    # Auto-generated Microsoft Teams API client.
    # ruff: noqa: BLE001, D417, E501, ANN003, PGH003, PLR0912, C901, PLR0913, G004, TRY400, TRY003, EM101, D100, INP001

import keyword as _kw
import logging
import re
from collections.abc import Mapping

from app.sources.client.microsoft.microsoft import MSGraphClient, MSGraphResponse

# Set up logger
logger = logging.getLogger(__name__)

class TeamsDataSource:
    """Auto-generated Microsoft Teams API client wrapper.

    - Uses Microsoft Graph SDK client internally
    - Snake_case method names for all Microsoft Teams API operations
    - Standardized MSGraphResponse format for all responses
    - No direct HTTP calls - all requests go through Graph SDK
    """

    def __init__(self, client: MSGraphClient) -> None:
        """Initialize with Microsoft Graph SDK client."""
        self.client = client.get_client()
        if not hasattr(self.client, "me"):
            raise ValueError("Client must be a Microsoft Graph SDK client")
        logger.info("Microsoft Teams API client initialized successfully")

    def _sanitize_py_name(self, name: str) -> str:
        """Runtime-safe version of sanitize_py_name for mirroring param keys.

        Turns '$select' -> 'dollar_select', 'message-id' -> 'message_id', etc.
        """
        n = name.replace("$", "dollar_").replace("@", "at_").replace(".", "_")
        n = re.sub(r"[^0-9a-zA-Z_]", "_", n)
        if n and n[0].isdigit():
            n = f"_{n}"
        if _kw.iskeyword(n):
            n += "_"
        if n.startswith("__"):
            n = f"_{n}"
        return n

    def _handle_response(self, response: dict[str, str | int | bool | list[object]]) -> MSGraphResponse:
        """Handle Microsoft Graph API response."""
        try:
            if response is None:
                    return MSGraphResponse(success=False, error="Empty response from Microsoft Graph")

            success = True
            error_msg = None

            # Handle error responses
            if hasattr(response, "error"):
                success = False
                error_msg = str(response.error) #type:ignore
            elif isinstance(response, dict) and "error" in response:
                success = False
                error_msg = str(response["error"])
            elif hasattr(response, "code") and hasattr(response, "message"):
                success = False
                error_msg = f"{response.code}: {response.message}" #type:ignore

            return MSGraphResponse(
                success=success,
                data=response,
                error=error_msg,
            )
        except Exception as e:
            logger.error(f"Error handling Microsoft Teams API response: {e}")
            return MSGraphResponse(success=False, error=str(e))

    def get_data_source(self) -> "TeamsDataSource":
        """Get the underlying Microsoft Teams API client."""
        return self


    def chats_create_installed_apps(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Add app to chat.

        Microsoft Teams API method: /chats/{chat-id}/installedApps (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_create_members(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Add member to a chat.

        Microsoft Teams API method: /chats/{chat-id}/members (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_create_messages(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Send chatMessage in a channel or a chat.

        Microsoft Teams API method: /chats/{chat-id}/messages (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_create_permission_grants(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to permissionGrants for chats.

        Microsoft Teams API method: /chats/{chat-id}/permissionGrants (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_create_pinned_messages(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Pin a message in a chat.

        Microsoft Teams API method: /chats/{chat-id}/pinnedMessages (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_create_tabs(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Add tab to chat.

        Microsoft Teams API method: /chats/{chat-id}/tabs (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_delete_installed_apps(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Uninstall app in a chat.

        Microsoft Teams API method: /chats/{chat-id}/installedApps/{teamsAppInstallation-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_delete_last_message_preview(self,
        *,
        chat_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property lastMessagePreview for chats.

        Microsoft Teams API method: /chats/{chat-id}/lastMessagePreview (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .last_message_preview().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_delete_members(self,
        *,
        chat_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Remove member from chat.

        Microsoft Teams API method: /chats/{chat-id}/members/{conversationMember-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_delete_messages(self,
        *,
        chat_id: str,
        chat_message_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property messages for chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_delete_permission_grants(self,
        *,
        chat_id: str,
        resource_specific_permission_grant_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property permissionGrants for chats.

        Microsoft Teams API method: /chats/{chat-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_delete_pinned_messages(self,
        *,
        chat_id: str,
        pinned_chat_message_info_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Unpin a message from a chat.

        Microsoft Teams API method: /chats/{chat-id}/pinnedMessages/{pinnedChatMessageInfo-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            pinned_chat_message_info_id (required): The unique identifier of pinnedChatMessageInfo
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if pinned_chat_message_info_id is not None:
            params["pinnedChatMessageInfo-id"] = pinned_chat_message_info_id
            params["pinnedChatMessageInfo_id"] = pinned_chat_message_info_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().by_id(params.get("pinnedChatMessageInfo_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_delete_tabs(self,
        *,
        chat_id: str,
        teams_tab_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete tab from chat.

        Microsoft Teams API method: /chats/{chat-id}/tabs/{teamsTab-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            teams_tab_id (required): The unique identifier of teamsTab
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().by_id(params.get("teamsTab_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_get_count_61c7(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /chats/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().count().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_get_installed_apps(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get installed app in chat.

        Microsoft Teams API method: /chats/{chat-id}/installedApps/{teamsAppInstallation-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_get_last_message_preview(self,
        *,
        chat_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get lastMessagePreview from chats.

        Microsoft Teams API method: /chats/{chat-id}/lastMessagePreview (GET).

        Args:
            chat_id (required): The unique identifier of chat
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .last_message_preview().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_get_members(self,
        *,
        chat_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get conversationMember in a chat.

        Microsoft Teams API method: /chats/{chat-id}/members/{conversationMember-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_get_messages(self,
        *,
        chat_id: str,
        chat_message_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get chatMessage in a channel or chat.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_get_permission_grants(self,
        *,
        chat_id: str,
        resource_specific_permission_grant_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get permissionGrants from chats.

        Microsoft Teams API method: /chats/{chat-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_get_pinned_messages(self,
        *,
        chat_id: str,
        pinned_chat_message_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pinnedMessages from chats.

        Microsoft Teams API method: /chats/{chat-id}/pinnedMessages/{pinnedChatMessageInfo-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            pinned_chat_message_info_id (required): The unique identifier of pinnedChatMessageInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if pinned_chat_message_info_id is not None:
            params["pinnedChatMessageInfo-id"] = pinned_chat_message_info_id
            params["pinnedChatMessageInfo_id"] = pinned_chat_message_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().by_id(params.get("pinnedChatMessageInfo_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_get_tabs(self,
        *,
        chat_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tab in chat.

        Microsoft Teams API method: /chats/{chat-id}/tabs/{teamsTab-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().by_id(params.get("teamsTab_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_list_installed_apps(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List apps in chat.

        Microsoft Teams API method: /chats/{chat-id}/installedApps (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_list_members(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List conversationMembers.

        Microsoft Teams API method: /chats/{chat-id}/members (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_list_messages(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List messages in a chat.

        Microsoft Teams API method: /chats/{chat-id}/messages (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_list_permission_grants(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List permissionGrants of a chat.

        Microsoft Teams API method: /chats/{chat-id}/permissionGrants (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_list_pinned_messages(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List pinnedChatMessages in a chat.

        Microsoft Teams API method: /chats/{chat-id}/pinnedMessages (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_list_tabs(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List tabs in chat.

        Microsoft Teams API method: /chats/{chat-id}/tabs (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_update_installed_apps(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property installedApps in chats.

        Microsoft Teams API method: /chats/{chat-id}/installedApps/{teamsAppInstallation-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_update_last_message_preview(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property lastMessagePreview in chats.

        Microsoft Teams API method: /chats/{chat-id}/lastMessagePreview (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .last_message_preview().patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_update_members(self,
        *,
        chat_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property members in chats.

        Microsoft Teams API method: /chats/{chat-id}/members/{conversationMember-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_update_messages(self,
        *,
        chat_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property messages in chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_update_permission_grants(self,
        *,
        chat_id: str,
        resource_specific_permission_grant_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property permissionGrants in chats.

        Microsoft Teams API method: /chats/{chat-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_update_pinned_messages(self,
        *,
        chat_id: str,
        pinned_chat_message_info_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pinnedMessages in chats.

        Microsoft Teams API method: /chats/{chat-id}/pinnedMessages/{pinnedChatMessageInfo-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            pinned_chat_message_info_id (required): The unique identifier of pinnedChatMessageInfo
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if pinned_chat_message_info_id is not None:
            params["pinnedChatMessageInfo-id"] = pinned_chat_message_info_id
            params["pinnedChatMessageInfo_id"] = pinned_chat_message_info_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().by_id(params.get("pinnedChatMessageInfo_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_update_tabs(self,
        *,
        chat_id: str,
        teams_tab_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update tab in chat.

        Microsoft Teams API method: /chats/{chat-id}/tabs/{teamsTab-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            teams_tab_id (required): The unique identifier of teamsTab
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().by_id(params.get("teamsTab_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_create_chat(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create chat.

        Microsoft Teams API method: /chats (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_delete_chat(self,
        *,
        chat_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete chat.

        Microsoft Teams API method: /chats/{chat-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_get_chat(self,
        *,
        chat_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get chat.

        Microsoft Teams API method: /chats/{chat-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_list_chat(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List chats.

        Microsoft Teams API method: /chats (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_update_chat(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update chat.

        Microsoft Teams API method: /chats/{chat-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_hide_for_user(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action hideForUser.

        Microsoft Teams API method: /chats/{chat-id}/hideForUser (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .hide_for_user().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_installed_apps_teams_app_installation_upgrade(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action upgrade.

        Microsoft Teams API method: /chats/{chat-id}/installedApps/{teamsAppInstallation-id}/upgrade (POST).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .upgrade().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_mark_chat_read_for_user(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action markChatReadForUser.

        Microsoft Teams API method: /chats/{chat-id}/markChatReadForUser (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .mark_chat_read_for_user().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_mark_chat_unread_for_user(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action markChatUnreadForUser.

        Microsoft Teams API method: /chats/{chat-id}/markChatUnreadForUser (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .mark_chat_unread_for_user().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_members_add(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /chats/{chat-id}/members/add (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().add().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_members_remove(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /chats/{chat-id}/members/remove (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().remove().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_messages_chat_message_replies_chat_message_set_reaction(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/setReaction (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_messages_chat_message_replies_chat_message_soft_delete(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/softDelete (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_messages_chat_message_replies_chat_message_undo_soft_delete(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/undoSoftDelete (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).undo_soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_messages_chat_message_replies_chat_message_unset_reaction(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/unsetReaction (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_messages_chat_message_replies_delta(self,
        *,
        chat_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/delta() (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().delta()()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_messages_chat_message_set_reaction(self,
        *,
        chat_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/setReaction (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_messages_chat_message_soft_delete(self,
        *,
        chat_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/softDelete (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).soft_delete()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_messages_chat_message_undo_soft_delete(self,
        *,
        chat_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/undoSoftDelete (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).undo_soft_delete()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_messages_chat_message_unset_reaction(self,
        *,
        chat_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/unsetReaction (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_messages_delta(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /chats/{chat-id}/messages/delta() (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().delta()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_send_activity_notification(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action sendActivityNotification.

        Microsoft Teams API method: /chats/{chat-id}/sendActivityNotification (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .send_activity_notification().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_chat_unhide_for_user(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unhideForUser.

        Microsoft Teams API method: /chats/{chat-id}/unhideForUser (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .unhide_for_user().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_get_all_messages(self,
        *,
        model: str | None = None,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllMessages.

        Microsoft Teams API method: /chats/getAllMessages() (GET).

        Args:
            model (optional): The payment model for the API
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if model is not None:
            params["model"] = model
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().get_all_messages()()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_get_all_retained_messages(self,
        *,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllRetainedMessages.

        Microsoft Teams API method: /chats/getAllRetainedMessages() (GET).

        Args:
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().get_all_retained_messages()()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_installed_apps_get_count_3987(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /chats/{chat-id}/installedApps/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_installed_apps_get_teams_app(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from chats.

        Microsoft Teams API method: /chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsApp (GET).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .teams_app().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_installed_apps_get_teams_app_definition(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsAppDefinition from chats.

        Microsoft Teams API method: /chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition (GET).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .teams_app_definition().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_members_get_count_9627(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /chats/{chat-id}/members/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_create_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/hostedContents (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_create_replies(self,
        *,
        chat_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to replies for chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_delete_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_delete_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_delete_replies(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property replies for chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_get_count_3dde(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /chats/{chat-id}/messages/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_get_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get chatMessageHostedContent.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_get_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """List hostedContents.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_get_replies(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_list_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List hostedContents.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/hostedContents (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_list_replies(self,
        *,
        chat_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_update_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_update_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_update_replies(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property replies in chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_hosted_contents_get_count_a167(self,
        *,
        chat_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/hostedContents/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_replies_create_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_replies_delete_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_replies_delete_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_replies_get_count_10ad(self,
        *,
        chat_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_replies_get_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_replies_get_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_replies_list_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_replies_update_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_replies_update_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in chats.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_messages_replies_hosted_contents_get_count_ccd3(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_permission_grants_get_count_7597(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /chats/{chat-id}/permissionGrants/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_pinned_messages_get_count_ad15(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /chats/{chat-id}/pinnedMessages/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_pinned_messages_get_message(self,
        *,
        chat_id: str,
        pinned_chat_message_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get message from chats.

        Microsoft Teams API method: /chats/{chat-id}/pinnedMessages/{pinnedChatMessageInfo-id}/message (GET).

        Args:
            chat_id (required): The unique identifier of chat
            pinned_chat_message_info_id (required): The unique identifier of pinnedChatMessageInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if pinned_chat_message_info_id is not None:
            params["pinnedChatMessageInfo-id"] = pinned_chat_message_info_id
            params["pinnedChatMessageInfo_id"] = pinned_chat_message_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().by_id(params.get("pinnedChatMessageInfo_id", ""))
            .message().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_tabs_get_count_b645(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /chats/{chat-id}/tabs/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def chats_tabs_get_teams_app(self,
        *,
        chat_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from chats.

        Microsoft Teams API method: /chats/{chat-id}/tabs/{teamsTab-id}/teamsApp (GET).

        Args:
            chat_id (required): The unique identifier of chat
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().by_id(params.get("teamsTab_id", "")).teams_app().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_create_chats(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create new navigation property to chats for me.

        Microsoft Teams API method: /me/chats (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_create_joined_teams(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create new navigation property to joinedTeams for me.

        Microsoft Teams API method: /me/joinedTeams (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_delete_chats(self,
        *,
        chat_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property chats for me.

        Microsoft Teams API method: /me/chats/{chat-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_delete_joined_teams(self,
        *,
        team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property joinedTeams for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_get_chats(self,
        *,
        chat_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get chats from me.

        Microsoft Teams API method: /me/chats/{chat-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_get_joined_teams(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get joinedTeams from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_list_chats(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get chats from me.

        Microsoft Teams API method: /me/chats (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_list_joined_teams(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List joinedTeams.

        Microsoft Teams API method: /me/joinedTeams (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_update_chats(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property chats in me.

        Microsoft Teams API method: /me/chats/{chat-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_update_joined_teams(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property joinedTeams in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_create_installed_apps(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to installedApps for me.

        Microsoft Teams API method: /me/chats/{chat-id}/installedApps (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_create_members(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to members for me.

        Microsoft Teams API method: /me/chats/{chat-id}/members (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_create_messages(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to messages for me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_create_permission_grants(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to permissionGrants for me.

        Microsoft Teams API method: /me/chats/{chat-id}/permissionGrants (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_create_pinned_messages(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pinnedMessages for me.

        Microsoft Teams API method: /me/chats/{chat-id}/pinnedMessages (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_create_tabs(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to tabs for me.

        Microsoft Teams API method: /me/chats/{chat-id}/tabs (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_delete_installed_apps(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property installedApps for me.

        Microsoft Teams API method: /me/chats/{chat-id}/installedApps/{teamsAppInstallation-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_delete_last_message_preview(self,
        *,
        chat_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property lastMessagePreview for me.

        Microsoft Teams API method: /me/chats/{chat-id}/lastMessagePreview (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .last_message_preview().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_delete_members(self,
        *,
        chat_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property members for me.

        Microsoft Teams API method: /me/chats/{chat-id}/members/{conversationMember-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_delete_messages(self,
        *,
        chat_id: str,
        chat_message_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property messages for me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_delete_permission_grants(self,
        *,
        chat_id: str,
        resource_specific_permission_grant_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property permissionGrants for me.

        Microsoft Teams API method: /me/chats/{chat-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_delete_pinned_messages(self,
        *,
        chat_id: str,
        pinned_chat_message_info_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pinnedMessages for me.

        Microsoft Teams API method: /me/chats/{chat-id}/pinnedMessages/{pinnedChatMessageInfo-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            pinned_chat_message_info_id (required): The unique identifier of pinnedChatMessageInfo
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if pinned_chat_message_info_id is not None:
            params["pinnedChatMessageInfo-id"] = pinned_chat_message_info_id
            params["pinnedChatMessageInfo_id"] = pinned_chat_message_info_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().by_id(params.get("pinnedChatMessageInfo_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_delete_tabs(self,
        *,
        chat_id: str,
        teams_tab_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property tabs for me.

        Microsoft Teams API method: /me/chats/{chat-id}/tabs/{teamsTab-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            teams_tab_id (required): The unique identifier of teamsTab
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().by_id(params.get("teamsTab_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_get_count_aef8(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/chats/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().count().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_get_installed_apps(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get installedApps from me.

        Microsoft Teams API method: /me/chats/{chat-id}/installedApps/{teamsAppInstallation-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_get_last_message_preview(self,
        *,
        chat_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get lastMessagePreview from me.

        Microsoft Teams API method: /me/chats/{chat-id}/lastMessagePreview (GET).

        Args:
            chat_id (required): The unique identifier of chat
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .last_message_preview().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_get_members(self,
        *,
        chat_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from me.

        Microsoft Teams API method: /me/chats/{chat-id}/members/{conversationMember-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_get_messages(self,
        *,
        chat_id: str,
        chat_message_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get messages from me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_get_permission_grants(self,
        *,
        chat_id: str,
        resource_specific_permission_grant_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get permissionGrants from me.

        Microsoft Teams API method: /me/chats/{chat-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_get_pinned_messages(self,
        *,
        chat_id: str,
        pinned_chat_message_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pinnedMessages from me.

        Microsoft Teams API method: /me/chats/{chat-id}/pinnedMessages/{pinnedChatMessageInfo-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            pinned_chat_message_info_id (required): The unique identifier of pinnedChatMessageInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if pinned_chat_message_info_id is not None:
            params["pinnedChatMessageInfo-id"] = pinned_chat_message_info_id
            params["pinnedChatMessageInfo_id"] = pinned_chat_message_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().by_id(params.get("pinnedChatMessageInfo_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_get_tabs(self,
        *,
        chat_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tabs from me.

        Microsoft Teams API method: /me/chats/{chat-id}/tabs/{teamsTab-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().by_id(params.get("teamsTab_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_list_installed_apps(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get installedApps from me.

        Microsoft Teams API method: /me/chats/{chat-id}/installedApps (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_list_members(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List members of a chat.

        Microsoft Teams API method: /me/chats/{chat-id}/members (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_list_messages(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get messages from me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_list_permission_grants(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get permissionGrants from me.

        Microsoft Teams API method: /me/chats/{chat-id}/permissionGrants (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_list_pinned_messages(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pinnedMessages from me.

        Microsoft Teams API method: /me/chats/{chat-id}/pinnedMessages (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_list_tabs(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tabs from me.

        Microsoft Teams API method: /me/chats/{chat-id}/tabs (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_update_installed_apps(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property installedApps in me.

        Microsoft Teams API method: /me/chats/{chat-id}/installedApps/{teamsAppInstallation-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_update_last_message_preview(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property lastMessagePreview in me.

        Microsoft Teams API method: /me/chats/{chat-id}/lastMessagePreview (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .last_message_preview().patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_update_members(self,
        *,
        chat_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property members in me.

        Microsoft Teams API method: /me/chats/{chat-id}/members/{conversationMember-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_update_messages(self,
        *,
        chat_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property messages in me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_update_permission_grants(self,
        *,
        chat_id: str,
        resource_specific_permission_grant_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property permissionGrants in me.

        Microsoft Teams API method: /me/chats/{chat-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_update_pinned_messages(self,
        *,
        chat_id: str,
        pinned_chat_message_info_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pinnedMessages in me.

        Microsoft Teams API method: /me/chats/{chat-id}/pinnedMessages/{pinnedChatMessageInfo-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            pinned_chat_message_info_id (required): The unique identifier of pinnedChatMessageInfo
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if pinned_chat_message_info_id is not None:
            params["pinnedChatMessageInfo-id"] = pinned_chat_message_info_id
            params["pinnedChatMessageInfo_id"] = pinned_chat_message_info_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().by_id(params.get("pinnedChatMessageInfo_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_update_tabs(self,
        *,
        chat_id: str,
        teams_tab_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property tabs in me.

        Microsoft Teams API method: /me/chats/{chat-id}/tabs/{teamsTab-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            teams_tab_id (required): The unique identifier of teamsTab
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().by_id(params.get("teamsTab_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_hide_for_user(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action hideForUser.

        Microsoft Teams API method: /me/chats/{chat-id}/hideForUser (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .hide_for_user().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_installed_apps_teams_app_installation_upgrade(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action upgrade.

        Microsoft Teams API method: /me/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/upgrade (POST).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .upgrade().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_mark_chat_read_for_user(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action markChatReadForUser.

        Microsoft Teams API method: /me/chats/{chat-id}/markChatReadForUser (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .mark_chat_read_for_user().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_mark_chat_unread_for_user(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action markChatUnreadForUser.

        Microsoft Teams API method: /me/chats/{chat-id}/markChatUnreadForUser (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .mark_chat_unread_for_user().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_members_add(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /me/chats/{chat-id}/members/add (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().add().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_members_remove(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /me/chats/{chat-id}/members/remove (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().remove().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_messages_chat_message_replies_chat_message_set_reaction(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/setReaction (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_messages_chat_message_replies_chat_message_soft_delete(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/softDelete (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_messages_chat_message_replies_chat_message_undo_soft_delete(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/undoSoftDelete (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).undo_soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_messages_chat_message_replies_chat_message_unset_reaction(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/unsetReaction (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_messages_chat_message_replies_delta(self,
        *,
        chat_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/delta() (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().delta()()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_messages_chat_message_set_reaction(self,
        *,
        chat_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/setReaction (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_messages_chat_message_soft_delete(self,
        *,
        chat_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/softDelete (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).soft_delete()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_messages_chat_message_undo_soft_delete(self,
        *,
        chat_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/undoSoftDelete (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).undo_soft_delete()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_messages_chat_message_unset_reaction(self,
        *,
        chat_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/unsetReaction (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_messages_delta(self,
        *,
        chat_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/delta() (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().delta()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_send_activity_notification(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action sendActivityNotification.

        Microsoft Teams API method: /me/chats/{chat-id}/sendActivityNotification (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .send_activity_notification().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_chat_unhide_for_user(self,
        *,
        chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unhideForUser.

        Microsoft Teams API method: /me/chats/{chat-id}/unhideForUser (POST).

        Args:
            chat_id (required): The unique identifier of chat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .unhide_for_user().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_get_all_messages(self,
        *,
        model: str | None = None,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllMessages.

        Microsoft Teams API method: /me/chats/getAllMessages() (GET).

        Args:
            model (optional): The payment model for the API
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if model is not None:
            params["model"] = model
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().get_all_messages()()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_get_all_retained_messages(self,
        *,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllRetainedMessages.

        Microsoft Teams API method: /me/chats/getAllRetainedMessages() (GET).

        Args:
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().get_all_retained_messages()()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_installed_apps_get_count_295d(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/chats/{chat-id}/installedApps/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_installed_apps_get_teams_app(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from me.

        Microsoft Teams API method: /me/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsApp (GET).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .teams_app().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_installed_apps_get_teams_app_definition(self,
        *,
        chat_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsAppDefinition from me.

        Microsoft Teams API method: /me/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition (GET).

        Args:
            chat_id (required): The unique identifier of chat
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .teams_app_definition().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_members_get_count_1223(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/chats/{chat-id}/members/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_create_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/hostedContents (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_create_replies(self,
        *,
        chat_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to replies for me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_delete_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_delete_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_delete_replies(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property replies for me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_get_count_5db5(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_get_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_get_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_get_replies(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_list_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/hostedContents (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_list_replies(self,
        *,
        chat_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_update_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_update_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_update_replies(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property replies in me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_hosted_contents_get_count_5707(self,
        *,
        chat_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/hostedContents/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_replies_create_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (POST).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_replies_delete_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_replies_delete_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_replies_get_count_ac4d(self,
        *,
        chat_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_replies_get_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_replies_get_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_replies_list_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_replies_update_hosted_contents(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_replies_update_hosted_contents_content(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_messages_replies_hosted_contents_get_count_62f4(self,
        *,
        chat_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_permission_grants_get_count_9e7e(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/chats/{chat-id}/permissionGrants/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .permission_grants().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_pinned_messages_get_count_f614(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/chats/{chat-id}/pinnedMessages/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_pinned_messages_get_message(self,
        *,
        chat_id: str,
        pinned_chat_message_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get message from me.

        Microsoft Teams API method: /me/chats/{chat-id}/pinnedMessages/{pinnedChatMessageInfo-id}/message (GET).

        Args:
            chat_id (required): The unique identifier of chat
            pinned_chat_message_info_id (required): The unique identifier of pinnedChatMessageInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if pinned_chat_message_info_id is not None:
            params["pinnedChatMessageInfo-id"] = pinned_chat_message_info_id
            params["pinnedChatMessageInfo_id"] = pinned_chat_message_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .pinned_messages().by_id(params.get("pinnedChatMessageInfo_id", ""))
            .message().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_tabs_get_count_35b1(self,
        *,
        chat_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/chats/{chat-id}/tabs/$count (GET).

        Args:
            chat_id (required): The unique identifier of chat
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_chats_tabs_get_teams_app(self,
        *,
        chat_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from me.

        Microsoft Teams API method: /me/chats/{chat-id}/tabs/{teamsTab-id}/teamsApp (GET).

        Args:
            chat_id (required): The unique identifier of chat
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if chat_id is not None:
            params["chat-id"] = chat_id
            params["chat_id"] = chat_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.chats().by_id(params.get("chat_id", ""))  # type:ignore
            .tabs().by_id(params.get("teamsTab_id", "")).teams_app().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_create_channels(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to channels for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_create_installed_apps(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to installedApps for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/installedApps (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_create_members(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to members for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/members (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_create_operations(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to operations for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/operations (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_create_permission_grants(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to permissionGrants for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/permissionGrants (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_create_tags(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to tags for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_delete_channels(self,
        *,
        team_id: str,
        channel_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property channels for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_delete_installed_apps(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property installedApps for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/installedApps/{teamsAppInstallation-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_delete_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property members for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/members/{conversationMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_delete_operations(self,
        *,
        team_id: str,
        teams_async_operation_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property operations for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/operations/{teamsAsyncOperation-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            teams_async_operation_id (required): The unique identifier of teamsAsyncOperation
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_async_operation_id is not None:
            params["teamsAsyncOperation-id"] = teams_async_operation_id
            params["teamsAsyncOperation_id"] = teams_async_operation_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().by_id(params.get("teamsAsyncOperation_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_delete_permission_grants(self,
        *,
        team_id: str,
        resource_specific_permission_grant_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property permissionGrants for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_delete_photo_content(self,
        *,
        team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property photo in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/photo/$value (DELETE).

        Args:
            team_id (required): The unique identifier of team
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .photo().value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_delete_primary_channel(self,
        *,
        team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property primaryChannel for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel (DELETE).

        Args:
            team_id (required): The unique identifier of team
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_delete_schedule(self,
        *,
        team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property schedule for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule (DELETE).

        Args:
            team_id (required): The unique identifier of team
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_delete_tags(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property tags for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags/{teamworkTag-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_all_channels(self,
        *,
        team_id: str,
        channel_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allChannels from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/allChannels/{channel-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .all_channels().by_id(params.get("channel_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_channels(self,
        *,
        team_id: str,
        channel_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get channels from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_count_8eca(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().count().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_group(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get group from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/group (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_incoming_channels(self,
        *,
        team_id: str,
        channel_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get incomingChannels from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/incomingChannels/{channel-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .incoming_channels().by_id(params.get("channel_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_installed_apps(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get installedApps from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/installedApps/{teamsAppInstallation-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/members/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_operations(self,
        *,
        team_id: str,
        teams_async_operation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get operations from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/operations/{teamsAsyncOperation-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_async_operation_id (required): The unique identifier of teamsAsyncOperation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_async_operation_id is not None:
            params["teamsAsyncOperation-id"] = teams_async_operation_id
            params["teamsAsyncOperation_id"] = teams_async_operation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().by_id(params.get("teamsAsyncOperation_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_permission_grants(self,
        *,
        team_id: str,
        resource_specific_permission_grant_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get permissionGrants from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_photo(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get photo from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/photo (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .photo().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_photo_content(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Get media content for the navigation property photo from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/photo/$value (GET).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .photo().value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_primary_channel(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get primaryChannel from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_schedule(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get schedule from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_tags(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tags from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags/{teamworkTag-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_template(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get template from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/template (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .template().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_list_all_channels(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allChannels from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/allChannels (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .all_channels().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_list_channels(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get channels from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_list_incoming_channels(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get incomingChannels from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/incomingChannels (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .incoming_channels().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_list_installed_apps(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get installedApps from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/installedApps (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_list_members(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/members (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_list_operations(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get operations from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/operations (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_list_permission_grants(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get permissionGrants from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/permissionGrants (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_list_tags(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tags from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_set_schedule(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property schedule in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule (PUT).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_update_channels(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property channels in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_update_installed_apps(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property installedApps in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/installedApps/{teamsAppInstallation-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_update_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property members in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/members/{conversationMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_update_operations(self,
        *,
        team_id: str,
        teams_async_operation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property operations in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/operations/{teamsAsyncOperation-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            teams_async_operation_id (required): The unique identifier of teamsAsyncOperation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_async_operation_id is not None:
            params["teamsAsyncOperation-id"] = teams_async_operation_id
            params["teamsAsyncOperation_id"] = teams_async_operation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().by_id(params.get("teamsAsyncOperation_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_update_permission_grants(self,
        *,
        team_id: str,
        resource_specific_permission_grant_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property permissionGrants in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_update_photo(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property photo in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/photo (PATCH).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .photo().patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_update_photo_content(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property photo in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/photo/$value (PUT).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .photo().value().put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_update_primary_channel(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property primaryChannel in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel (PATCH).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_update_tags(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property tags in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags/{teamworkTag-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_all_channels_get_count_382e(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/allChannels/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .all_channels().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_create_all_members(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to allMembers for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/allMembers (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_create_members(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to members for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/members (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_create_messages(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to messages for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_create_shared_with_teams(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sharedWithTeams for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/sharedWithTeams (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_create_tabs(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to tabs for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/tabs (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_delete_all_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property allMembers for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/allMembers/{conversationMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().by_id(params
            .get("conversationMember_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_delete_files_folder_content(self,
        *,
        team_id: str,
        channel_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property filesFolder in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/filesFolder/content (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).files_folder().content()
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_delete_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property members for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/members/{conversationMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().by_id(params
            .get("conversationMember_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_delete_messages(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property messages for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_delete_shared_with_teams(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sharedWithTeams for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_delete_tabs(self,
        *,
        team_id: str,
        channel_id: str,
        teams_tab_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property tabs for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().by_id(params
            .get("teamsTab_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_get_all_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allMembers from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/allMembers/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().by_id(params
            .get("conversationMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_get_count_719a(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_get_files_folder(self,
        *,
        team_id: str,
        channel_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get filesFolder from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/filesFolder (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).files_folder()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_get_files_folder_content(self,
        *,
        team_id: str,
        channel_id: str,
        dollar_format: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property filesFolder from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/filesFolder/content (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            dollar_format (optional): Format of the content

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_format is not None:
            params["$format"] = dollar_format
            params["dollar_format"] = dollar_format
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).files_folder().content()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_get_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/members/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().by_id(params
            .get("conversationMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_get_messages(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get messages from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_get_shared_with_teams(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sharedWithTeams from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_get_tabs(self,
        *,
        team_id: str,
        channel_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tabs from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().by_id(params
            .get("teamsTab_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_list_all_members(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allMembers from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/allMembers (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_list_members(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/members (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_list_messages(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get messages from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_list_shared_with_teams(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sharedWithTeams from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/sharedWithTeams (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_list_tabs(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tabs from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/tabs (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_update_all_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property allMembers in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/allMembers/{conversationMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().by_id(params
            .get("conversationMember_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_update_files_folder_content(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property filesFolder in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/filesFolder/content (PUT).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).files_folder().content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_update_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property members in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/members/{conversationMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().by_id(params
            .get("conversationMember_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_update_messages(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property messages in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_update_shared_with_teams(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sharedWithTeams in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_update_tabs(self,
        *,
        team_id: str,
        channel_id: str,
        teams_tab_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property tabs in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().by_id(params
            .get("teamsTab_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_all_members_get_count_4afb(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/allMembers/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_members_get_count_f9b9(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/members/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_create_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_create_replies(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to replies for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_delete_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_delete_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_delete_replies(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property replies for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_get_count_31de(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_get_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_get_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_get_replies(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_list_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_list_replies(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_update_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_update_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_update_replies(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property replies in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_hosted_contents_get_count_0878(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_replies_create_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_replies_delete_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_replies_delete_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_replies_get_count_2855(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_replies_get_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_replies_get_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_replies_list_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_replies_update_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_replies_update_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_messages_replies_hosted_contents_get_count_ff44(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_shared_with_teams_get_allowed_members(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allowedMembers from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", "")).allowed_members()
            .by_id(params.get("conversationMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_shared_with_teams_get_count_2a75(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/sharedWithTeams/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_shared_with_teams_get_team(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get team from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/team (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", "")).team()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_shared_with_teams_list_allowed_members(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allowedMembers from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", "")).allowed_members()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_shared_with_teams_allowed_members_get_count_2fcd(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", "")).allowed_members()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_tabs_get_count_4693(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/tabs/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_channels_tabs_get_teams_app(self,
        *,
        team_id: str,
        channel_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id}/teamsApp (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().by_id(params
            .get("teamsTab_id", "")).teams_app().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_get_all_messages(self,
        *,
        model: str | None = None,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllMessages.

        Microsoft Teams API method: /me/joinedTeams/getAllMessages() (GET).

        Args:
            model (optional): The payment model for the API
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if model is not None:
            params["model"] = model
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().get_all_messages()()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_group_list_service_provisioning_errors(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get serviceProvisioningErrors property value.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/group/serviceProvisioningErrors (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .group().service_provisioning_errors().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_group_service_provisioning_errors_get_count_dad9(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/group/serviceProvisioningErrors/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .group().service_provisioning_errors().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_incoming_channels_get_count_677e(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/incomingChannels/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .incoming_channels().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_installed_apps_get_count_37f0(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/installedApps/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_installed_apps_get_teams_app(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsApp (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .teams_app().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_installed_apps_get_teams_app_definition(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsAppDefinition from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .teams_app_definition().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_members_get_count_85d7(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/members/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_operations_get_count_e702(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/operations/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_permission_grants_get_count_a196(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/permissionGrants/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_create_all_members(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to allMembers for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/allMembers (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_create_members(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to members for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/members (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_create_messages(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to messages for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_create_shared_with_teams(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sharedWithTeams for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/sharedWithTeams (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_create_tabs(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to tabs for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/tabs (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_delete_all_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property allMembers for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/allMembers/{conversationMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().by_id(params
            .get("conversationMember_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_delete_files_folder_content(self,
        *,
        team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property filesFolder in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/filesFolder/content (DELETE).

        Args:
            team_id (required): The unique identifier of team
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().files_folder().content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_delete_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property members for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/members/{conversationMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().by_id(params.get("conversationMember_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_delete_messages(self,
        *,
        team_id: str,
        chat_message_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property messages for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_delete_shared_with_teams(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sharedWithTeams for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_delete_tabs(self,
        *,
        team_id: str,
        teams_tab_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property tabs for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/tabs/{teamsTab-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            teams_tab_id (required): The unique identifier of teamsTab
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().by_id(params.get("teamsTab_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_get_all_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allMembers from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/allMembers/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().by_id(params
            .get("conversationMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_get_files_folder(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get filesFolder from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/filesFolder (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().files_folder().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_get_files_folder_content(self,
        *,
        team_id: str,
        dollar_format: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property filesFolder from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/filesFolder/content (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_format (optional): Format of the content

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_format is not None:
            params["$format"] = dollar_format
            params["dollar_format"] = dollar_format
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().files_folder().content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_get_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/members/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().by_id(params.get("conversationMember_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_get_messages(self,
        *,
        team_id: str,
        chat_message_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get messages from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_get_shared_with_teams(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sharedWithTeams from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_get_tabs(self,
        *,
        team_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tabs from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/tabs/{teamsTab-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().by_id(params.get("teamsTab_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_list_all_members(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allMembers from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/allMembers (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_list_members(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/members (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_list_messages(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get messages from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_list_shared_with_teams(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sharedWithTeams from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/sharedWithTeams (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_list_tabs(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tabs from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/tabs (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_update_all_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property allMembers in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/allMembers/{conversationMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().by_id(params
            .get("conversationMember_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_update_files_folder_content(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property filesFolder in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/filesFolder/content (PUT).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().files_folder().content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_update_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property members in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/members/{conversationMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().by_id(params.get("conversationMember_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_update_messages(self,
        *,
        team_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property messages in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_update_shared_with_teams(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sharedWithTeams in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_update_tabs(self,
        *,
        team_id: str,
        teams_tab_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property tabs in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/tabs/{teamsTab-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            teams_tab_id (required): The unique identifier of teamsTab
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().by_id(params.get("teamsTab_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_all_members_get_count_0b8e(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/allMembers/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_members_get_count_4efc(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/members/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_create_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_create_replies(self,
        *,
        team_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to replies for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_delete_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_delete_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_delete_replies(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property replies for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_get_count_dd6f(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_get_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_get_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_get_replies(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1} (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_list_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_list_replies(self,
        *,
        team_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_update_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_update_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .value().put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_update_replies(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property replies in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_hosted_contents_get_count_ce20(self,
        *,
        team_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_replies_create_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_replies_delete_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_replies_delete_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_replies_get_count_1792(self,
        *,
        team_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_replies_get_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_replies_get_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_replies_list_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_replies_update_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_replies_update_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_messages_replies_hosted_contents_get_count_6077(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_shared_with_teams_get_allowed_members(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allowedMembers from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).allowed_members().by_id(params
            .get("conversationMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_shared_with_teams_get_count_ebb0(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/sharedWithTeams/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_shared_with_teams_get_team(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get team from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id}/team (GET).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).team().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_shared_with_teams_list_allowed_members(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allowedMembers from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers (GET).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).allowed_members()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_shared_with_teams_allowed_members_get_count_f6e0(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).allowed_members().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_tabs_get_count_f9aa(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/tabs/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_primary_channel_tabs_get_teams_app(self,
        *,
        team_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/tabs/{teamsTab-id}/teamsApp (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().by_id(params.get("teamsTab_id", "")).teams_app()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_day_notes(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to dayNotes for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/dayNotes (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_offer_shift_requests(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to offerShiftRequests for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/offerShiftRequests (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_open_shift_change_requests(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to openShiftChangeRequests for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShiftChangeRequests (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_open_shifts(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to openShifts for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShifts (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_scheduling_groups(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to schedulingGroups for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/schedulingGroups (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_shifts(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to shifts for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/shifts (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_swap_shifts_change_requests(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to swapShiftsChangeRequests for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/swapShiftsChangeRequests (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_time_cards(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to timeCards for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_time_off_reasons(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to timeOffReasons for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffReasons (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_time_off_requests(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to timeOffRequests for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffRequests (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_create_times_off(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to timesOff for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timesOff (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_day_notes(self,
        *,
        team_id: str,
        day_note_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property dayNotes for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/dayNotes/{dayNote-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            day_note_id (required): The unique identifier of dayNote
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if day_note_id is not None:
            params["dayNote-id"] = day_note_id
            params["dayNote_id"] = day_note_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().by_id(params.get("dayNote_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_offer_shift_requests(self,
        *,
        team_id: str,
        offer_shift_request_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property offerShiftRequests for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/offerShiftRequests/{offerShiftRequest-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            offer_shift_request_id (required): The unique identifier of offerShiftRequest
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if offer_shift_request_id is not None:
            params["offerShiftRequest-id"] = offer_shift_request_id
            params["offerShiftRequest_id"] = offer_shift_request_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().by_id(params
            .get("offerShiftRequest_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_open_shift_change_requests(self,
        *,
        team_id: str,
        open_shift_change_request_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property openShiftChangeRequests for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShiftChangeRequests/{openShiftChangeRequest-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            open_shift_change_request_id (required): The unique identifier of openShiftChangeRequest
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_change_request_id is not None:
            params["openShiftChangeRequest-id"] = open_shift_change_request_id
            params["openShiftChangeRequest_id"] = open_shift_change_request_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests().by_id(params
            .get("openShiftChangeRequest_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_open_shifts(self,
        *,
        team_id: str,
        open_shift_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property openShifts for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShifts/{openShift-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            open_shift_id (required): The unique identifier of openShift
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_id is not None:
            params["openShift-id"] = open_shift_id
            params["openShift_id"] = open_shift_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().by_id(params.get("openShift_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_scheduling_groups(self,
        *,
        team_id: str,
        scheduling_group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property schedulingGroups for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/schedulingGroups/{schedulingGroup-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            scheduling_group_id (required): The unique identifier of schedulingGroup
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if scheduling_group_id is not None:
            params["schedulingGroup-id"] = scheduling_group_id
            params["schedulingGroup_id"] = scheduling_group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().by_id(params.get("schedulingGroup_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_shifts(self,
        *,
        team_id: str,
        shift_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property shifts for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/shifts/{shift-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            shift_id (required): The unique identifier of shift
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shift_id is not None:
            params["shift-id"] = shift_id
            params["shift_id"] = shift_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().by_id(params.get("shift_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_swap_shifts_change_requests(self,
        *,
        team_id: str,
        swap_shifts_change_request_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property swapShiftsChangeRequests for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/swapShiftsChangeRequests/{swapShiftsChangeRequest-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            swap_shifts_change_request_id (required): The unique identifier of swapShiftsChangeRequest
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if swap_shifts_change_request_id is not None:
            params["swapShiftsChangeRequest-id"] = swap_shifts_change_request_id
            params["swapShiftsChangeRequest_id"] = swap_shifts_change_request_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests().by_id(params
            .get("swapShiftsChangeRequest_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_time_cards(self,
        *,
        team_id: str,
        time_card_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property timeCards for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards/{timeCard-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_time_off_reasons(self,
        *,
        team_id: str,
        time_off_reason_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property timeOffReasons for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffReasons/{timeOffReason-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            time_off_reason_id (required): The unique identifier of timeOffReason
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_reason_id is not None:
            params["timeOffReason-id"] = time_off_reason_id
            params["timeOffReason_id"] = time_off_reason_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().by_id(params.get("timeOffReason_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_time_off_requests(self,
        *,
        team_id: str,
        time_off_request_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property timeOffRequests for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffRequests/{timeOffRequest-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            time_off_request_id (required): The unique identifier of timeOffRequest
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_request_id is not None:
            params["timeOffRequest-id"] = time_off_request_id
            params["timeOffRequest_id"] = time_off_request_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().by_id(params.get("timeOffRequest_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_delete_times_off(self,
        *,
        team_id: str,
        time_off_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property timesOff for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timesOff/{timeOff-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            time_off_id (required): The unique identifier of timeOff
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_id is not None:
            params["timeOff-id"] = time_off_id
            params["timeOff_id"] = time_off_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().by_id(params.get("timeOff_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_day_notes(self,
        *,
        team_id: str,
        day_note_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get dayNotes from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/dayNotes/{dayNote-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            day_note_id (required): The unique identifier of dayNote
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if day_note_id is not None:
            params["dayNote-id"] = day_note_id
            params["dayNote_id"] = day_note_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().by_id(params.get("dayNote_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_offer_shift_requests(self,
        *,
        team_id: str,
        offer_shift_request_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get offerShiftRequests from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/offerShiftRequests/{offerShiftRequest-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            offer_shift_request_id (required): The unique identifier of offerShiftRequest
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if offer_shift_request_id is not None:
            params["offerShiftRequest-id"] = offer_shift_request_id
            params["offerShiftRequest_id"] = offer_shift_request_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().by_id(params
            .get("offerShiftRequest_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_open_shift_change_requests(self,
        *,
        team_id: str,
        open_shift_change_request_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get openShiftChangeRequests from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShiftChangeRequests/{openShiftChangeRequest-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            open_shift_change_request_id (required): The unique identifier of openShiftChangeRequest
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_change_request_id is not None:
            params["openShiftChangeRequest-id"] = open_shift_change_request_id
            params["openShiftChangeRequest_id"] = open_shift_change_request_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests().by_id(params
            .get("openShiftChangeRequest_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_open_shifts(self,
        *,
        team_id: str,
        open_shift_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get openShifts from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShifts/{openShift-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            open_shift_id (required): The unique identifier of openShift
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_id is not None:
            params["openShift-id"] = open_shift_id
            params["openShift_id"] = open_shift_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().by_id(params.get("openShift_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_scheduling_groups(self,
        *,
        team_id: str,
        scheduling_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get schedulingGroups from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/schedulingGroups/{schedulingGroup-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            scheduling_group_id (required): The unique identifier of schedulingGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if scheduling_group_id is not None:
            params["schedulingGroup-id"] = scheduling_group_id
            params["schedulingGroup_id"] = scheduling_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().by_id(params.get("schedulingGroup_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_shifts(self,
        *,
        team_id: str,
        shift_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get shifts from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/shifts/{shift-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            shift_id (required): The unique identifier of shift
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shift_id is not None:
            params["shift-id"] = shift_id
            params["shift_id"] = shift_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().by_id(params.get("shift_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_swap_shifts_change_requests(self,
        *,
        team_id: str,
        swap_shifts_change_request_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get swapShiftsChangeRequests from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/swapShiftsChangeRequests/{swapShiftsChangeRequest-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            swap_shifts_change_request_id (required): The unique identifier of swapShiftsChangeRequest
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if swap_shifts_change_request_id is not None:
            params["swapShiftsChangeRequest-id"] = swap_shifts_change_request_id
            params["swapShiftsChangeRequest_id"] = swap_shifts_change_request_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests().by_id(params
            .get("swapShiftsChangeRequest_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_time_cards(self,
        *,
        team_id: str,
        time_card_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timeCards from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards/{timeCard-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_time_off_reasons(self,
        *,
        team_id: str,
        time_off_reason_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timeOffReasons from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffReasons/{timeOffReason-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            time_off_reason_id (required): The unique identifier of timeOffReason
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_reason_id is not None:
            params["timeOffReason-id"] = time_off_reason_id
            params["timeOffReason_id"] = time_off_reason_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().by_id(params.get("timeOffReason_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_time_off_requests(self,
        *,
        team_id: str,
        time_off_request_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timeOffRequests from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffRequests/{timeOffRequest-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            time_off_request_id (required): The unique identifier of timeOffRequest
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_request_id is not None:
            params["timeOffRequest-id"] = time_off_request_id
            params["timeOffRequest_id"] = time_off_request_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().by_id(params.get("timeOffRequest_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_get_times_off(self,
        *,
        team_id: str,
        time_off_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timesOff from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timesOff/{timeOff-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            time_off_id (required): The unique identifier of timeOff
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_id is not None:
            params["timeOff-id"] = time_off_id
            params["timeOff_id"] = time_off_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().by_id(params.get("timeOff_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_day_notes(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get dayNotes from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/dayNotes (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_offer_shift_requests(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get offerShiftRequests from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/offerShiftRequests (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_open_shift_change_requests(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get openShiftChangeRequests from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShiftChangeRequests (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_open_shifts(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get openShifts from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShifts (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_scheduling_groups(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get schedulingGroups from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/schedulingGroups (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_shifts(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get shifts from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/shifts (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_swap_shifts_change_requests(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get swapShiftsChangeRequests from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/swapShiftsChangeRequests (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_time_cards(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timeCards from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_time_off_reasons(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timeOffReasons from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffReasons (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_time_off_requests(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timeOffRequests from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffRequests (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_list_times_off(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timesOff from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timesOff (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_day_notes(self,
        *,
        team_id: str,
        day_note_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property dayNotes in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/dayNotes/{dayNote-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            day_note_id (required): The unique identifier of dayNote
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if day_note_id is not None:
            params["dayNote-id"] = day_note_id
            params["dayNote_id"] = day_note_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().by_id(params.get("dayNote_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_offer_shift_requests(self,
        *,
        team_id: str,
        offer_shift_request_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property offerShiftRequests in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/offerShiftRequests/{offerShiftRequest-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            offer_shift_request_id (required): The unique identifier of offerShiftRequest
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if offer_shift_request_id is not None:
            params["offerShiftRequest-id"] = offer_shift_request_id
            params["offerShiftRequest_id"] = offer_shift_request_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().by_id(params
            .get("offerShiftRequest_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_open_shift_change_requests(self,
        *,
        team_id: str,
        open_shift_change_request_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property openShiftChangeRequests in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShiftChangeRequests/{openShiftChangeRequest-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            open_shift_change_request_id (required): The unique identifier of openShiftChangeRequest
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_change_request_id is not None:
            params["openShiftChangeRequest-id"] = open_shift_change_request_id
            params["openShiftChangeRequest_id"] = open_shift_change_request_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests().by_id(params
            .get("openShiftChangeRequest_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_open_shifts(self,
        *,
        team_id: str,
        open_shift_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property openShifts in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShifts/{openShift-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            open_shift_id (required): The unique identifier of openShift
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_id is not None:
            params["openShift-id"] = open_shift_id
            params["openShift_id"] = open_shift_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().by_id(params.get("openShift_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_scheduling_groups(self,
        *,
        team_id: str,
        scheduling_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property schedulingGroups in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/schedulingGroups/{schedulingGroup-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            scheduling_group_id (required): The unique identifier of schedulingGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if scheduling_group_id is not None:
            params["schedulingGroup-id"] = scheduling_group_id
            params["schedulingGroup_id"] = scheduling_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().by_id(params.get("schedulingGroup_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_shifts(self,
        *,
        team_id: str,
        shift_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property shifts in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/shifts/{shift-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            shift_id (required): The unique identifier of shift
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shift_id is not None:
            params["shift-id"] = shift_id
            params["shift_id"] = shift_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().by_id(params.get("shift_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_swap_shifts_change_requests(self,
        *,
        team_id: str,
        swap_shifts_change_request_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property swapShiftsChangeRequests in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/swapShiftsChangeRequests/{swapShiftsChangeRequest-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            swap_shifts_change_request_id (required): The unique identifier of swapShiftsChangeRequest
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if swap_shifts_change_request_id is not None:
            params["swapShiftsChangeRequest-id"] = swap_shifts_change_request_id
            params["swapShiftsChangeRequest_id"] = swap_shifts_change_request_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests().by_id(params
            .get("swapShiftsChangeRequest_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_time_cards(self,
        *,
        team_id: str,
        time_card_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property timeCards in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards/{timeCard-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_time_off_reasons(self,
        *,
        team_id: str,
        time_off_reason_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property timeOffReasons in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffReasons/{timeOffReason-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            time_off_reason_id (required): The unique identifier of timeOffReason
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_reason_id is not None:
            params["timeOffReason-id"] = time_off_reason_id
            params["timeOffReason_id"] = time_off_reason_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().by_id(params.get("timeOffReason_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_time_off_requests(self,
        *,
        team_id: str,
        time_off_request_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property timeOffRequests in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffRequests/{timeOffRequest-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            time_off_request_id (required): The unique identifier of timeOffRequest
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_request_id is not None:
            params["timeOffRequest-id"] = time_off_request_id
            params["timeOffRequest_id"] = time_off_request_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().by_id(params.get("timeOffRequest_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_update_times_off(self,
        *,
        team_id: str,
        time_off_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property timesOff in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timesOff/{timeOff-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            time_off_id (required): The unique identifier of timeOff
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_id is not None:
            params["timeOff-id"] = time_off_id
            params["timeOff_id"] = time_off_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().by_id(params.get("timeOff_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_day_notes_get_count_b5ac(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/dayNotes/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_offer_shift_requests_get_count_7729(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/offerShiftRequests/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_open_shift_change_requests_get_count_f641(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShiftChangeRequests/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_open_shifts_get_count_9bbb(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/openShifts/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_scheduling_groups_get_count_2ecb(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/schedulingGroups/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_shifts_get_count_bd71(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/shifts/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_swap_shifts_change_requests_get_count_deaa(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/swapShiftsChangeRequests/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_time_cards_get_count_5c99(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_time_off_reasons_get_count_632a(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffReasons/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_time_off_requests_get_count_9693(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeOffRequests/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_schedule_times_off_get_count_8199(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timesOff/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_tags_create_members(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to members for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags/{teamworkTag-id}/members (POST).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_tags_delete_members(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        teamwork_tag_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property members for me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags/{teamworkTag-id}/members/{teamworkTagMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            teamwork_tag_member_id (required): The unique identifier of teamworkTagMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if teamwork_tag_member_id is not None:
            params["teamworkTagMember-id"] = teamwork_tag_member_id
            params["teamworkTagMember_id"] = teamwork_tag_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members().by_id(params
            .get("teamworkTagMember_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_tags_get_count_ca3e(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_tags_get_members(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        teamwork_tag_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags/{teamworkTag-id}/members/{teamworkTagMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            teamwork_tag_member_id (required): The unique identifier of teamworkTagMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if teamwork_tag_member_id is not None:
            params["teamworkTagMember-id"] = teamwork_tag_member_id
            params["teamworkTagMember_id"] = teamwork_tag_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members().by_id(params
            .get("teamworkTagMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_tags_list_members(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags/{teamworkTag-id}/members (GET).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_tags_update_members(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        teamwork_tag_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property members in me.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags/{teamworkTag-id}/members/{teamworkTagMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            teamwork_tag_member_id (required): The unique identifier of teamworkTagMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if teamwork_tag_member_id is not None:
            params["teamworkTagMember-id"] = teamwork_tag_member_id
            params["teamworkTagMember_id"] = teamwork_tag_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members().by_id(params
            .get("teamworkTagMember_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_tags_members_get_count_66e4(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/tags/{teamworkTag-id}/members/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_archive(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action archive.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/archive (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .archive().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_all_members_add(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/allMembers/add (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().add()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_all_members_remove(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/allMembers/remove (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().remove()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_archive(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action archive.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/archive (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).archive()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_complete_migration(self,
        *,
        team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action completeMigration.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/completeMigration (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).complete_migration()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_does_user_have_access(self,
        *,
        team_id: str,
        channel_id: str,
        user_id: str | None = None,
        tenant_id: str | None = None,
        user_principal_name: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function doesUserHaveAccess.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/doesUserHaveAccess(userId='@userId',tenantId='@tenantId',userPrincipalName='@userPrincipalName') (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            user_id (optional): Usage: userId='@userId'
            tenant_id (optional): Usage: tenantId='@tenantId'
            user_principal_name (optional): Usage: userPrincipalName='@userPrincipalName'

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if user_id is not None:
            params["userId"] = user_id
        if tenant_id is not None:
            params["tenantId"] = tenant_id
        if user_principal_name is not None:
            params["userPrincipalName"] = user_principal_name
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", ""))
            .does_user_have_access(user_id="at_user_id",tenant_id="at_tenant_id",user_principal_name="at_user_principal_name")()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_members_add(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/members/add (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().add()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_members_remove(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/members/remove (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().remove()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_set_reaction(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/setReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_soft_delete(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/softDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_undo_soft_delete(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/undoSoftDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).undo_soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_unset_reaction(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/unsetReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_messages_chat_message_replies_delta(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/delta() (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().delta()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_messages_chat_message_set_reaction(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/setReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_messages_chat_message_soft_delete(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/softDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_messages_chat_message_undo_soft_delete(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/undoSoftDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).undo_soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_messages_chat_message_unset_reaction(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/unsetReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_messages_delta(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/messages/delta() (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().delta()()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_provision_email(self,
        *,
        team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action provisionEmail.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/provisionEmail (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).provision_email()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_remove_email(self,
        *,
        team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action removeEmail.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/removeEmail (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).remove_email()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_channel_unarchive(self,
        *,
        team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unarchive.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/{channel-id}/unarchive (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).unarchive()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_get_all_messages(self,
        *,
        team_id: str,
        model: str | None = None,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllMessages.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/getAllMessages() (GET).

        Args:
            team_id (required): The unique identifier of team
            model (optional): The payment model for the API
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if model is not None:
            params["model"] = model
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().get_all_messages()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_channels_get_all_retained_messages(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllRetainedMessages.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/channels/getAllRetainedMessages() (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().get_all_retained_messages()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_clone(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action clone.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/clone (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .clone().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_complete_migration(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action completeMigration.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/completeMigration (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .complete_migration().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_installed_apps_teams_app_installation_upgrade(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action upgrade.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/installedApps/{teamsAppInstallation-id}/upgrade (POST).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .upgrade().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_members_add(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/members/add (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().add().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_members_remove(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/members/remove (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().remove().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_all_members_add(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/allMembers/add (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().add()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_all_members_remove(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/allMembers/remove (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().remove()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_archive(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action archive.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/archive (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().archive().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_complete_migration(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action completeMigration.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/completeMigration (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().complete_migration().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_does_user_have_access(self,
        *,
        team_id: str,
        user_id: str | None = None,
        tenant_id: str | None = None,
        user_principal_name: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function doesUserHaveAccess.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/doesUserHaveAccess(userId='@userId',tenantId='@tenantId',userPrincipalName='@userPrincipalName') (GET).

        Args:
            team_id (required): The unique identifier of team
            user_id (optional): Usage: userId='@userId'
            tenant_id (optional): Usage: tenantId='@tenantId'
            user_principal_name (optional): Usage: userPrincipalName='@userPrincipalName'

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if user_id is not None:
            params["userId"] = user_id
        if tenant_id is not None:
            params["tenantId"] = tenant_id
        if user_principal_name is not None:
            params["userPrincipalName"] = user_principal_name
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel()
            .does_user_have_access(user_id="at_user_id",tenant_id="at_tenant_id",user_principal_name="at_user_principal_name")()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_members_add(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/members/add (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().add().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_members_remove(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/members/remove (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().remove()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_set_reaction(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/setReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_soft_delete(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/softDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).soft_delete()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_undo_soft_delete(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/undoSoftDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).undo_soft_delete()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_unset_reaction(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/unsetReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_messages_chat_message_replies_delta(self,
        *,
        team_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/delta() (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().delta()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_messages_chat_message_set_reaction(self,
        *,
        team_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/setReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .set_reaction().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_messages_chat_message_soft_delete(self,
        *,
        team_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/softDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_messages_chat_message_undo_soft_delete(self,
        *,
        team_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/undoSoftDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .undo_soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_messages_chat_message_unset_reaction(self,
        *,
        team_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/{chatMessage-id}/unsetReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .unset_reaction().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_messages_delta(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/messages/delta() (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().delta()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_provision_email(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action provisionEmail.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/provisionEmail (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().provision_email().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_remove_email(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action removeEmail.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/removeEmail (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().remove_email().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_primary_channel_unarchive(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action unarchive.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/primaryChannel/unarchive (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().unarchive().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_schedule_share(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action share.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/share (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().share().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_schedule_time_cards_clock_in(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action clockIn.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards/clockIn (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().clock_in().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_schedule_time_cards_time_card_clock_out(self,
        *,
        team_id: str,
        time_card_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action clockOut.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards/{timeCard-id}/clockOut (POST).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", "")).clock_out()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_schedule_time_cards_time_card_confirm(self,
        *,
        team_id: str,
        time_card_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action confirm.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards/{timeCard-id}/confirm (POST).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", "")).confirm()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_schedule_time_cards_time_card_end_break(self,
        *,
        team_id: str,
        time_card_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action endBreak.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards/{timeCard-id}/endBreak (POST).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", "")).end_break()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_schedule_time_cards_time_card_start_break(self,
        *,
        team_id: str,
        time_card_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action startBreak.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/schedule/timeCards/{timeCard-id}/startBreak (POST).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", "")).start_break()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_send_activity_notification(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action sendActivityNotification.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/sendActivityNotification (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .send_activity_notification().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def me_joined_teams_team_unarchive(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action unarchive.

        Microsoft Teams API method: /me/joinedTeams/{team-id}/unarchive (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .unarchive().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_create_channels(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create channel.

        Microsoft Teams API method: /teams/{team-id}/channels (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_create_installed_apps(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Add app to team.

        Microsoft Teams API method: /teams/{team-id}/installedApps (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_create_members(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Add member to team.

        Microsoft Teams API method: /teams/{team-id}/members (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_create_operations(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to operations for teams.

        Microsoft Teams API method: /teams/{team-id}/operations (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_create_permission_grants(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to permissionGrants for teams.

        Microsoft Teams API method: /teams/{team-id}/permissionGrants (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_create_tags(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create teamworkTag.

        Microsoft Teams API method: /teams/{team-id}/tags (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_delete_channels(self,
        *,
        team_id: str,
        channel_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete channel.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_delete_installed_apps(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Remove app from team.

        Microsoft Teams API method: /teams/{team-id}/installedApps/{teamsAppInstallation-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_delete_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Remove member from team.

        Microsoft Teams API method: /teams/{team-id}/members/{conversationMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_delete_operations(self,
        *,
        team_id: str,
        teams_async_operation_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property operations for teams.

        Microsoft Teams API method: /teams/{team-id}/operations/{teamsAsyncOperation-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            teams_async_operation_id (required): The unique identifier of teamsAsyncOperation
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_async_operation_id is not None:
            params["teamsAsyncOperation-id"] = teams_async_operation_id
            params["teamsAsyncOperation_id"] = teams_async_operation_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().by_id(params.get("teamsAsyncOperation_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_delete_permission_grants(self,
        *,
        team_id: str,
        resource_specific_permission_grant_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property permissionGrants for teams.

        Microsoft Teams API method: /teams/{team-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_delete_photo_content(self,
        *,
        team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property photo in teams.

        Microsoft Teams API method: /teams/{team-id}/photo/$value (DELETE).

        Args:
            team_id (required): The unique identifier of team
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .photo().value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_delete_primary_channel(self,
        *,
        team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property primaryChannel for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel (DELETE).

        Args:
            team_id (required): The unique identifier of team
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_delete_schedule(self,
        *,
        team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property schedule for teams.

        Microsoft Teams API method: /teams/{team-id}/schedule (DELETE).

        Args:
            team_id (required): The unique identifier of team
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_delete_tags(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete teamworkTag.

        Microsoft Teams API method: /teams/{team-id}/tags/{teamworkTag-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_all_channels(self,
        *,
        team_id: str,
        channel_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allChannels from teams.

        Microsoft Teams API method: /teams/{team-id}/allChannels/{channel-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .all_channels().by_id(params.get("channel_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_channels(self,
        *,
        team_id: str,
        channel_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get channel.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_count_ff25(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().count().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_group(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get group from teams.

        Microsoft Teams API method: /teams/{team-id}/group (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_incoming_channels(self,
        *,
        team_id: str,
        channel_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get incomingChannels from teams.

        Microsoft Teams API method: /teams/{team-id}/incomingChannels/{channel-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .incoming_channels().by_id(params.get("channel_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_installed_apps(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get installed app in team.

        Microsoft Teams API method: /teams/{team-id}/installedApps/{teamsAppInstallation-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get member of team.

        Microsoft Teams API method: /teams/{team-id}/members/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_operations(self,
        *,
        team_id: str,
        teams_async_operation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get operations from teams.

        Microsoft Teams API method: /teams/{team-id}/operations/{teamsAsyncOperation-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_async_operation_id (required): The unique identifier of teamsAsyncOperation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_async_operation_id is not None:
            params["teamsAsyncOperation-id"] = teams_async_operation_id
            params["teamsAsyncOperation_id"] = teams_async_operation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().by_id(params.get("teamsAsyncOperation_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_permission_grants(self,
        *,
        team_id: str,
        resource_specific_permission_grant_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get permissionGrants from teams.

        Microsoft Teams API method: /teams/{team-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_photo(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get profilePhoto.

        Microsoft Teams API method: /teams/{team-id}/photo (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .photo().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_photo_content(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Get profilePhoto.

        Microsoft Teams API method: /teams/{team-id}/photo/$value (GET).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .photo().value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_primary_channel(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get primaryChannel.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_schedule(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get schedule.

        Microsoft Teams API method: /teams/{team-id}/schedule (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_tags(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamworkTag.

        Microsoft Teams API method: /teams/{team-id}/tags/{teamworkTag-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_template(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get template from teams.

        Microsoft Teams API method: /teams/{team-id}/template (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .template().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_list_all_channels(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List allChannels.

        Microsoft Teams API method: /teams/{team-id}/allChannels (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .all_channels().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_list_channels(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List channels.

        Microsoft Teams API method: /teams/{team-id}/channels (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_list_incoming_channels(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List incomingChannels.

        Microsoft Teams API method: /teams/{team-id}/incomingChannels (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .incoming_channels().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_list_installed_apps(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List apps in team.

        Microsoft Teams API method: /teams/{team-id}/installedApps (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_list_members(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List members of team.

        Microsoft Teams API method: /teams/{team-id}/members (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_list_operations(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get operations from teams.

        Microsoft Teams API method: /teams/{team-id}/operations (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_list_permission_grants(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List permissionGrants of a team.

        Microsoft Teams API method: /teams/{team-id}/permissionGrants (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_list_tags(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List teamworkTags.

        Microsoft Teams API method: /teams/{team-id}/tags (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_set_schedule(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create or replace schedule.

        Microsoft Teams API method: /teams/{team-id}/schedule (PUT).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_update_channels(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Patch channel.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_update_installed_apps(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property installedApps in teams.

        Microsoft Teams API method: /teams/{team-id}/installedApps/{teamsAppInstallation-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_update_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update member in team.

        Microsoft Teams API method: /teams/{team-id}/members/{conversationMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().by_id(params.get("conversationMember_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_update_operations(self,
        *,
        team_id: str,
        teams_async_operation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property operations in teams.

        Microsoft Teams API method: /teams/{team-id}/operations/{teamsAsyncOperation-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            teams_async_operation_id (required): The unique identifier of teamsAsyncOperation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_async_operation_id is not None:
            params["teamsAsyncOperation-id"] = teams_async_operation_id
            params["teamsAsyncOperation_id"] = teams_async_operation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().by_id(params.get("teamsAsyncOperation_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_update_permission_grants(self,
        *,
        team_id: str,
        resource_specific_permission_grant_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property permissionGrants in teams.

        Microsoft Teams API method: /teams/{team-id}/permissionGrants/{resourceSpecificPermissionGrant-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            resource_specific_permission_grant_id (required): The unique identifier of resourceSpecificPermissionGrant
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if resource_specific_permission_grant_id is not None:
            params["resourceSpecificPermissionGrant-id"] = resource_specific_permission_grant_id
            params["resourceSpecificPermissionGrant_id"] = resource_specific_permission_grant_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().by_id(params
            .get("resourceSpecificPermissionGrant_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_update_photo(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update profilePhoto.

        Microsoft Teams API method: /teams/{team-id}/photo (PATCH).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .photo().patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_update_photo_content(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update profilePhoto.

        Microsoft Teams API method: /teams/{team-id}/photo/$value (PUT).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .photo().value().put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_update_primary_channel(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property primaryChannel in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel (PATCH).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_update_tags(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update teamworkTag.

        Microsoft Teams API method: /teams/{team-id}/tags/{teamworkTag-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_all_channels_get_count_f86a(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/allChannels/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .all_channels().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_create_all_members(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to allMembers for teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/allMembers (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_create_members(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Add conversationMember.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/members (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_create_messages(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Send chatMessage in a channel or a chat.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_create_shared_with_teams(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sharedWithTeams for teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/sharedWithTeams (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_create_tabs(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Add tab to channel.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/tabs (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_delete_all_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property allMembers for teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/allMembers/{conversationMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().by_id(params
            .get("conversationMember_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_delete_files_folder_content(self,
        *,
        team_id: str,
        channel_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property filesFolder in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/filesFolder/content (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).files_folder().content()
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_delete_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete conversationMember.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/members/{conversationMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().by_id(params
            .get("conversationMember_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_delete_messages(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property messages for teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_delete_shared_with_teams(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete sharedWithChannelTeamInfo.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_delete_tabs(self,
        *,
        team_id: str,
        channel_id: str,
        teams_tab_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete tab from channel.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().by_id(params
            .get("teamsTab_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_get_all_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allMembers from teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/allMembers/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().by_id(params
            .get("conversationMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_get_count_1a82(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/channels/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_get_files_folder(self,
        *,
        team_id: str,
        channel_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get filesFolder.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/filesFolder (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).files_folder()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_get_files_folder_content(self,
        *,
        team_id: str,
        channel_id: str,
        dollar_format: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property filesFolder from teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/filesFolder/content (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            dollar_format (optional): Format of the content

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_format is not None:
            params["$format"] = dollar_format
            params["dollar_format"] = dollar_format
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).files_folder().content()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_get_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get member of channel.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/members/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().by_id(params
            .get("conversationMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_get_messages(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get chatMessage in a channel or chat.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_get_shared_with_teams(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sharedWithChannelTeamInfo.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_get_tabs(self,
        *,
        team_id: str,
        channel_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tab.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().by_id(params
            .get("teamsTab_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_list_all_members(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List allMembers.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/allMembers (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_list_members(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List members of a channel.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/members (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_list_messages(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List channel messages.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_list_shared_with_teams(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List sharedWithChannelTeamInfo.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/sharedWithTeams (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_list_tabs(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List tabs in channel.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/tabs (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_update_all_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property allMembers in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/allMembers/{conversationMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().by_id(params
            .get("conversationMember_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_update_files_folder_content(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property filesFolder in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/filesFolder/content (PUT).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).files_folder().content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_update_members(self,
        *,
        team_id: str,
        channel_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update member in channel.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/members/{conversationMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().by_id(params
            .get("conversationMember_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_update_messages(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update chatMessage.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_update_shared_with_teams(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sharedWithTeams in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_update_tabs(self,
        *,
        team_id: str,
        channel_id: str,
        teams_tab_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update tab.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().by_id(params
            .get("teamsTab_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_all_members_get_count_ea4d(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/allMembers/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_members_get_count_8e98(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/members/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_create_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_create_replies(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Reply to a message in a channel.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_delete_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_delete_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_delete_replies(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property replies for teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_get_count_6767(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_get_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_get_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """List hostedContents.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_get_replies(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get chatMessage in a channel or chat.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_list_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List hostedContents.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_list_replies(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List replies.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_update_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_update_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_update_replies(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property replies in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_hosted_contents_get_count_80f2(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).hosted_contents().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_replies_create_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_replies_delete_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_replies_delete_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_replies_get_count_bdfc(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_replies_get_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_replies_get_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """List hostedContents.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_replies_list_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List hostedContents.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_replies_update_hosted_contents(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_replies_update_hosted_contents_content(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_messages_replies_hosted_contents_get_count_3bb6(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_shared_with_teams_get_allowed_members(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allowedMembers from teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", "")).allowed_members()
            .by_id(params.get("conversationMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_shared_with_teams_get_count_11a3(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/sharedWithTeams/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_shared_with_teams_get_team(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get team from teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/team (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", "")).team()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_shared_with_teams_list_allowed_members(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List allowedMembers.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", "")).allowed_members()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_shared_with_teams_allowed_members_get_count_5a86(self,
        *,
        team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).shared_with_teams()
            .by_id(params.get("sharedWithChannelTeamInfo_id", "")).allowed_members()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_tabs_get_count_f94d(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/tabs/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_channels_tabs_get_teams_app(self,
        *,
        team_id: str,
        channel_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from teams.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id}/teamsApp (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).tabs().by_id(params
            .get("teamsTab_id", "")).teams_app().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_get_all_messages(self,
        *,
        model: str | None = None,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllMessages.

        Microsoft Teams API method: /teams/getAllMessages() (GET).

        Args:
            model (optional): The payment model for the API
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if model is not None:
            params["model"] = model
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().get_all_messages()()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_group_list_service_provisioning_errors(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get serviceProvisioningErrors property value.

        Microsoft Teams API method: /teams/{team-id}/group/serviceProvisioningErrors (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .group().service_provisioning_errors().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_group_service_provisioning_errors_get_count_f5fe(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/group/serviceProvisioningErrors/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .group().service_provisioning_errors().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_incoming_channels_get_count_728b(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/incomingChannels/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .incoming_channels().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_installed_apps_get_count_d47b(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/installedApps/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_installed_apps_get_teams_app(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from teams.

        Microsoft Teams API method: /teams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsApp (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .teams_app().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_installed_apps_get_teams_app_definition(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsAppDefinition from teams.

        Microsoft Teams API method: /teams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .teams_app_definition().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_members_get_count_717b(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/members/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_operations_get_count_66af(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/operations/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .operations().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_permission_grants_get_count_34e2(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/permissionGrants/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .permission_grants().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_create_all_members(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to allMembers for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/allMembers (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_create_members(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to members for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/members (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_create_messages(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to messages for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_create_shared_with_teams(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sharedWithTeams for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/sharedWithTeams (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_create_tabs(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to tabs for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/tabs (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_delete_all_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property allMembers for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/allMembers/{conversationMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().by_id(params
            .get("conversationMember_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_delete_files_folder_content(self,
        *,
        team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property filesFolder in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/filesFolder/content (DELETE).

        Args:
            team_id (required): The unique identifier of team
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().files_folder().content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_delete_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property members for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/members/{conversationMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().by_id(params.get("conversationMember_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_delete_messages(self,
        *,
        team_id: str,
        chat_message_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property messages for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_delete_shared_with_teams(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sharedWithTeams for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_delete_tabs(self,
        *,
        team_id: str,
        teams_tab_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property tabs for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/tabs/{teamsTab-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            teams_tab_id (required): The unique identifier of teamsTab
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().by_id(params.get("teamsTab_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_get_all_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allMembers from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/allMembers/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().by_id(params
            .get("conversationMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_get_files_folder(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get filesFolder from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/filesFolder (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().files_folder().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_get_files_folder_content(self,
        *,
        team_id: str,
        dollar_format: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property filesFolder from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/filesFolder/content (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_format (optional): Format of the content

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_format is not None:
            params["$format"] = dollar_format
            params["dollar_format"] = dollar_format
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().files_folder().content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_get_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/members/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().by_id(params.get("conversationMember_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_get_messages(self,
        *,
        team_id: str,
        chat_message_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get messages from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_get_shared_with_teams(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sharedWithTeams from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_get_tabs(self,
        *,
        team_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tabs from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/tabs/{teamsTab-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().by_id(params.get("teamsTab_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_list_all_members(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allMembers from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/allMembers (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_list_members(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/members (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_list_messages(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get messages from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_list_shared_with_teams(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sharedWithTeams from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/sharedWithTeams (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_list_tabs(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tabs from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/tabs (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_update_all_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property allMembers in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/allMembers/{conversationMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().by_id(params
            .get("conversationMember_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_update_files_folder_content(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property filesFolder in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/filesFolder/content (PUT).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().files_folder().content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_update_members(self,
        *,
        team_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property members in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/members/{conversationMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().by_id(params.get("conversationMember_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_update_messages(self,
        *,
        team_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property messages in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_update_shared_with_teams(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sharedWithTeams in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_update_tabs(self,
        *,
        team_id: str,
        teams_tab_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property tabs in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/tabs/{teamsTab-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            teams_tab_id (required): The unique identifier of teamsTab
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().by_id(params.get("teamsTab_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_all_members_get_count_4cdd(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/allMembers/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_members_get_count_8411(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/members/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_create_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_create_replies(self,
        *,
        team_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to replies for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_delete_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_delete_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_delete_replies(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property replies for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_get_count_d90b(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_get_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_get_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_get_replies(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1} (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_list_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_list_replies(self,
        *,
        team_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_update_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_update_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().by_id(params.get("chatMessageHostedContent_id", ""))
            .value().put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_update_replies(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property replies in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_hosted_contents_get_count_ed0a(self,
        *,
        team_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/hostedContents/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .hosted_contents().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_replies_create_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_replies_delete_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_replies_delete_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_replies_get_count_eb7a(self,
        *,
        team_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_replies_get_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_replies_get_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_replies_list_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_replies_update_hosted_contents(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_replies_update_hosted_contents_content(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_messages_replies_hosted_contents_get_count_1d3a(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).hosted_contents()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_shared_with_teams_get_allowed_members(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allowedMembers from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers/{conversationMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).allowed_members().by_id(params
            .get("conversationMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_shared_with_teams_get_count_9fea(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/sharedWithTeams/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_shared_with_teams_get_team(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get team from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id}/team (GET).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).team().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_shared_with_teams_list_allowed_members(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allowedMembers from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers (GET).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).allowed_members()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_shared_with_teams_allowed_members_get_count_2d1d(self,
        *,
        team_id: str,
        shared_with_channel_team_info_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().shared_with_teams().by_id(params
            .get("sharedWithChannelTeamInfo_id", "")).allowed_members().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_tabs_get_count_8cf3(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/tabs/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_primary_channel_tabs_get_teams_app(self,
        *,
        team_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from teams.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/tabs/{teamsTab-id}/teamsApp (GET).

        Args:
            team_id (required): The unique identifier of team
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().tabs().by_id(params.get("teamsTab_id", "")).teams_app()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_day_notes(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to dayNotes for teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/dayNotes (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_offer_shift_requests(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create offerShiftRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/offerShiftRequests (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_open_shift_change_requests(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create openShiftChangeRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShiftChangeRequests (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_open_shifts(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create openShift.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShifts (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_scheduling_groups(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create schedulingGroup.

        Microsoft Teams API method: /teams/{team-id}/schedule/schedulingGroups (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_shifts(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create shift.

        Microsoft Teams API method: /teams/{team-id}/schedule/shifts (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_swap_shifts_change_requests(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create swapShiftsChangeRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/swapShiftsChangeRequests (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_time_cards(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create timeCard.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_time_off_reasons(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create timeOffReason.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffReasons (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_time_off_requests(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create timeOffRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffRequests (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_create_times_off(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create timeOff.

        Microsoft Teams API method: /teams/{team-id}/schedule/timesOff (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_day_notes(self,
        *,
        team_id: str,
        day_note_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property dayNotes for teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/dayNotes/{dayNote-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            day_note_id (required): The unique identifier of dayNote
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if day_note_id is not None:
            params["dayNote-id"] = day_note_id
            params["dayNote_id"] = day_note_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().by_id(params.get("dayNote_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_offer_shift_requests(self,
        *,
        team_id: str,
        offer_shift_request_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property offerShiftRequests for teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/offerShiftRequests/{offerShiftRequest-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            offer_shift_request_id (required): The unique identifier of offerShiftRequest
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if offer_shift_request_id is not None:
            params["offerShiftRequest-id"] = offer_shift_request_id
            params["offerShiftRequest_id"] = offer_shift_request_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().by_id(params
            .get("offerShiftRequest_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_open_shift_change_requests(self,
        *,
        team_id: str,
        open_shift_change_request_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property openShiftChangeRequests for teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShiftChangeRequests/{openShiftChangeRequest-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            open_shift_change_request_id (required): The unique identifier of openShiftChangeRequest
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_change_request_id is not None:
            params["openShiftChangeRequest-id"] = open_shift_change_request_id
            params["openShiftChangeRequest_id"] = open_shift_change_request_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests().by_id(params
            .get("openShiftChangeRequest_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_open_shifts(self,
        *,
        team_id: str,
        open_shift_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete openShift.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShifts/{openShift-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            open_shift_id (required): The unique identifier of openShift
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_id is not None:
            params["openShift-id"] = open_shift_id
            params["openShift_id"] = open_shift_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().by_id(params.get("openShift_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_scheduling_groups(self,
        *,
        team_id: str,
        scheduling_group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete schedulingGroup.

        Microsoft Teams API method: /teams/{team-id}/schedule/schedulingGroups/{schedulingGroup-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            scheduling_group_id (required): The unique identifier of schedulingGroup
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if scheduling_group_id is not None:
            params["schedulingGroup-id"] = scheduling_group_id
            params["schedulingGroup_id"] = scheduling_group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().by_id(params.get("schedulingGroup_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_shifts(self,
        *,
        team_id: str,
        shift_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete shift.

        Microsoft Teams API method: /teams/{team-id}/schedule/shifts/{shift-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            shift_id (required): The unique identifier of shift
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shift_id is not None:
            params["shift-id"] = shift_id
            params["shift_id"] = shift_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().by_id(params.get("shift_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_swap_shifts_change_requests(self,
        *,
        team_id: str,
        swap_shifts_change_request_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property swapShiftsChangeRequests for teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/swapShiftsChangeRequests/{swapShiftsChangeRequest-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            swap_shifts_change_request_id (required): The unique identifier of swapShiftsChangeRequest
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if swap_shifts_change_request_id is not None:
            params["swapShiftsChangeRequest-id"] = swap_shifts_change_request_id
            params["swapShiftsChangeRequest_id"] = swap_shifts_change_request_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests().by_id(params
            .get("swapShiftsChangeRequest_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_time_cards(self,
        *,
        team_id: str,
        time_card_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete timeCard.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards/{timeCard-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_time_off_reasons(self,
        *,
        team_id: str,
        time_off_reason_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete timeOffReason.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffReasons/{timeOffReason-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            time_off_reason_id (required): The unique identifier of timeOffReason
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_reason_id is not None:
            params["timeOffReason-id"] = time_off_reason_id
            params["timeOffReason_id"] = time_off_reason_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().by_id(params.get("timeOffReason_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_time_off_requests(self,
        *,
        team_id: str,
        time_off_request_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete timeOffRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffRequests/{timeOffRequest-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            time_off_request_id (required): The unique identifier of timeOffRequest
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_request_id is not None:
            params["timeOffRequest-id"] = time_off_request_id
            params["timeOffRequest_id"] = time_off_request_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().by_id(params.get("timeOffRequest_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_delete_times_off(self,
        *,
        team_id: str,
        time_off_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete timeOff.

        Microsoft Teams API method: /teams/{team-id}/schedule/timesOff/{timeOff-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            time_off_id (required): The unique identifier of timeOff
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_id is not None:
            params["timeOff-id"] = time_off_id
            params["timeOff_id"] = time_off_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().by_id(params.get("timeOff_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_day_notes(self,
        *,
        team_id: str,
        day_note_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get dayNotes from teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/dayNotes/{dayNote-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            day_note_id (required): The unique identifier of dayNote
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if day_note_id is not None:
            params["dayNote-id"] = day_note_id
            params["dayNote_id"] = day_note_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().by_id(params.get("dayNote_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_offer_shift_requests(self,
        *,
        team_id: str,
        offer_shift_request_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get offerShiftRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/offerShiftRequests/{offerShiftRequest-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            offer_shift_request_id (required): The unique identifier of offerShiftRequest
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if offer_shift_request_id is not None:
            params["offerShiftRequest-id"] = offer_shift_request_id
            params["offerShiftRequest_id"] = offer_shift_request_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().by_id(params
            .get("offerShiftRequest_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_open_shift_change_requests(self,
        *,
        team_id: str,
        open_shift_change_request_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get openShiftChangeRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShiftChangeRequests/{openShiftChangeRequest-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            open_shift_change_request_id (required): The unique identifier of openShiftChangeRequest
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_change_request_id is not None:
            params["openShiftChangeRequest-id"] = open_shift_change_request_id
            params["openShiftChangeRequest_id"] = open_shift_change_request_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests().by_id(params
            .get("openShiftChangeRequest_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_open_shifts(self,
        *,
        team_id: str,
        open_shift_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get openShift.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShifts/{openShift-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            open_shift_id (required): The unique identifier of openShift
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_id is not None:
            params["openShift-id"] = open_shift_id
            params["openShift_id"] = open_shift_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().by_id(params.get("openShift_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_scheduling_groups(self,
        *,
        team_id: str,
        scheduling_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get schedulingGroup.

        Microsoft Teams API method: /teams/{team-id}/schedule/schedulingGroups/{schedulingGroup-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            scheduling_group_id (required): The unique identifier of schedulingGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if scheduling_group_id is not None:
            params["schedulingGroup-id"] = scheduling_group_id
            params["schedulingGroup_id"] = scheduling_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().by_id(params.get("schedulingGroup_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_shifts(self,
        *,
        team_id: str,
        shift_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get shift.

        Microsoft Teams API method: /teams/{team-id}/schedule/shifts/{shift-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            shift_id (required): The unique identifier of shift
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shift_id is not None:
            params["shift-id"] = shift_id
            params["shift_id"] = shift_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().by_id(params.get("shift_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_swap_shifts_change_requests(self,
        *,
        team_id: str,
        swap_shifts_change_request_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get swapShiftsChangeRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/swapShiftsChangeRequests/{swapShiftsChangeRequest-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            swap_shifts_change_request_id (required): The unique identifier of swapShiftsChangeRequest
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if swap_shifts_change_request_id is not None:
            params["swapShiftsChangeRequest-id"] = swap_shifts_change_request_id
            params["swapShiftsChangeRequest_id"] = swap_shifts_change_request_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests().by_id(params
            .get("swapShiftsChangeRequest_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_time_cards(self,
        *,
        team_id: str,
        time_card_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timeCards from teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards/{timeCard-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_time_off_reasons(self,
        *,
        team_id: str,
        time_off_reason_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timeOffReason.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffReasons/{timeOffReason-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            time_off_reason_id (required): The unique identifier of timeOffReason
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_reason_id is not None:
            params["timeOffReason-id"] = time_off_reason_id
            params["timeOffReason_id"] = time_off_reason_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().by_id(params.get("timeOffReason_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_time_off_requests(self,
        *,
        team_id: str,
        time_off_request_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timeOffRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffRequests/{timeOffRequest-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            time_off_request_id (required): The unique identifier of timeOffRequest
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_request_id is not None:
            params["timeOffRequest-id"] = time_off_request_id
            params["timeOffRequest_id"] = time_off_request_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().by_id(params.get("timeOffRequest_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_get_times_off(self,
        *,
        team_id: str,
        time_off_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get timeOff.

        Microsoft Teams API method: /teams/{team-id}/schedule/timesOff/{timeOff-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            time_off_id (required): The unique identifier of timeOff
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_id is not None:
            params["timeOff-id"] = time_off_id
            params["timeOff_id"] = time_off_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().by_id(params.get("timeOff_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_day_notes(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get dayNotes from teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/dayNotes (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_offer_shift_requests(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List offerShiftRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/offerShiftRequests (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_open_shift_change_requests(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List openShiftChangeRequests.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShiftChangeRequests (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_open_shifts(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List openShifts.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShifts (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_scheduling_groups(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List scheduleGroups.

        Microsoft Teams API method: /teams/{team-id}/schedule/schedulingGroups (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_shifts(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List shifts.

        Microsoft Teams API method: /teams/{team-id}/schedule/shifts (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_swap_shifts_change_requests(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List swapShiftsChangeRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/swapShiftsChangeRequests (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_time_cards(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List timeCard.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_time_off_reasons(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List timeOffReasons.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffReasons (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_time_off_requests(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List timeOffRequest.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffRequests (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_list_times_off(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List timesOff.

        Microsoft Teams API method: /teams/{team-id}/schedule/timesOff (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_day_notes(self,
        *,
        team_id: str,
        day_note_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property dayNotes in teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/dayNotes/{dayNote-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            day_note_id (required): The unique identifier of dayNote
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if day_note_id is not None:
            params["dayNote-id"] = day_note_id
            params["dayNote_id"] = day_note_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().by_id(params.get("dayNote_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_offer_shift_requests(self,
        *,
        team_id: str,
        offer_shift_request_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property offerShiftRequests in teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/offerShiftRequests/{offerShiftRequest-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            offer_shift_request_id (required): The unique identifier of offerShiftRequest
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if offer_shift_request_id is not None:
            params["offerShiftRequest-id"] = offer_shift_request_id
            params["offerShiftRequest_id"] = offer_shift_request_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().by_id(params
            .get("offerShiftRequest_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_open_shift_change_requests(self,
        *,
        team_id: str,
        open_shift_change_request_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property openShiftChangeRequests in teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShiftChangeRequests/{openShiftChangeRequest-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            open_shift_change_request_id (required): The unique identifier of openShiftChangeRequest
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_change_request_id is not None:
            params["openShiftChangeRequest-id"] = open_shift_change_request_id
            params["openShiftChangeRequest_id"] = open_shift_change_request_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests().by_id(params
            .get("openShiftChangeRequest_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_open_shifts(self,
        *,
        team_id: str,
        open_shift_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update openShift.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShifts/{openShift-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            open_shift_id (required): The unique identifier of openShift
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if open_shift_id is not None:
            params["openShift-id"] = open_shift_id
            params["openShift_id"] = open_shift_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().by_id(params.get("openShift_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_scheduling_groups(self,
        *,
        team_id: str,
        scheduling_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Replace schedulingGroup.

        Microsoft Teams API method: /teams/{team-id}/schedule/schedulingGroups/{schedulingGroup-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            scheduling_group_id (required): The unique identifier of schedulingGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if scheduling_group_id is not None:
            params["schedulingGroup-id"] = scheduling_group_id
            params["schedulingGroup_id"] = scheduling_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().by_id(params.get("schedulingGroup_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_shifts(self,
        *,
        team_id: str,
        shift_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Replace shift.

        Microsoft Teams API method: /teams/{team-id}/schedule/shifts/{shift-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            shift_id (required): The unique identifier of shift
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if shift_id is not None:
            params["shift-id"] = shift_id
            params["shift_id"] = shift_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().by_id(params.get("shift_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_swap_shifts_change_requests(self,
        *,
        team_id: str,
        swap_shifts_change_request_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property swapShiftsChangeRequests in teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/swapShiftsChangeRequests/{swapShiftsChangeRequest-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            swap_shifts_change_request_id (required): The unique identifier of swapShiftsChangeRequest
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if swap_shifts_change_request_id is not None:
            params["swapShiftsChangeRequest-id"] = swap_shifts_change_request_id
            params["swapShiftsChangeRequest_id"] = swap_shifts_change_request_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests().by_id(params
            .get("swapShiftsChangeRequest_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_time_cards(self,
        *,
        team_id: str,
        time_card_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property timeCards in teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards/{timeCard-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_time_off_reasons(self,
        *,
        team_id: str,
        time_off_reason_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Replace timeOffReason.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffReasons/{timeOffReason-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            time_off_reason_id (required): The unique identifier of timeOffReason
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_reason_id is not None:
            params["timeOffReason-id"] = time_off_reason_id
            params["timeOffReason_id"] = time_off_reason_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().by_id(params.get("timeOffReason_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_time_off_requests(self,
        *,
        team_id: str,
        time_off_request_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property timeOffRequests in teams.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffRequests/{timeOffRequest-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            time_off_request_id (required): The unique identifier of timeOffRequest
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_request_id is not None:
            params["timeOffRequest-id"] = time_off_request_id
            params["timeOffRequest_id"] = time_off_request_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().by_id(params.get("timeOffRequest_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_update_times_off(self,
        *,
        team_id: str,
        time_off_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Replace timeOff.

        Microsoft Teams API method: /teams/{team-id}/schedule/timesOff/{timeOff-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            time_off_id (required): The unique identifier of timeOff
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_off_id is not None:
            params["timeOff-id"] = time_off_id
            params["timeOff_id"] = time_off_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().by_id(params.get("timeOff_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_day_notes_get_count_2cfa(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/dayNotes/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().day_notes().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_offer_shift_requests_get_count_9c52(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/offerShiftRequests/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().offer_shift_requests().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_open_shift_change_requests_get_count_179b(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShiftChangeRequests/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shift_change_requests().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_open_shifts_get_count_bdbd(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/openShifts/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().open_shifts().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_scheduling_groups_get_count_256b(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/schedulingGroups/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().scheduling_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_shifts_get_count_97aa(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/shifts/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().shifts().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_swap_shifts_change_requests_get_count_9390(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/swapShiftsChangeRequests/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().swap_shifts_change_requests().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_time_cards_get_count_2ea4(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_time_off_reasons_get_count_4024(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffReasons/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_reasons().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_time_off_requests_get_count_9411(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeOffRequests/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_off_requests().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_schedule_times_off_get_count_16b4(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/schedule/timesOff/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().times_off().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_tags_create_members(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create teamworkTagMember.

        Microsoft Teams API method: /teams/{team-id}/tags/{teamworkTag-id}/members (POST).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_tags_delete_members(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        teamwork_tag_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete teamworkTagMember.

        Microsoft Teams API method: /teams/{team-id}/tags/{teamworkTag-id}/members/{teamworkTagMember-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            teamwork_tag_member_id (required): The unique identifier of teamworkTagMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if teamwork_tag_member_id is not None:
            params["teamworkTagMember-id"] = teamwork_tag_member_id
            params["teamworkTagMember_id"] = teamwork_tag_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members().by_id(params
            .get("teamworkTagMember_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_tags_get_count_db00(self,
        *,
        team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/tags/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_tags_get_members(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        teamwork_tag_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamworkTagMember.

        Microsoft Teams API method: /teams/{team-id}/tags/{teamworkTag-id}/members/{teamworkTagMember-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            teamwork_tag_member_id (required): The unique identifier of teamworkTagMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if teamwork_tag_member_id is not None:
            params["teamworkTagMember-id"] = teamwork_tag_member_id
            params["teamworkTagMember_id"] = teamwork_tag_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members().by_id(params
            .get("teamworkTagMember_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_tags_list_members(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List members in a teamworkTag.

        Microsoft Teams API method: /teams/{team-id}/tags/{teamworkTag-id}/members (GET).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_tags_update_members(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        teamwork_tag_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property members in teams.

        Microsoft Teams API method: /teams/{team-id}/tags/{teamworkTag-id}/members/{teamworkTagMember-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            teamwork_tag_member_id (required): The unique identifier of teamworkTagMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if teamwork_tag_member_id is not None:
            params["teamworkTagMember-id"] = teamwork_tag_member_id
            params["teamworkTagMember_id"] = teamwork_tag_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members().by_id(params
            .get("teamworkTagMember_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_tags_members_get_count_cbc7(self,
        *,
        team_id: str,
        teamwork_tag_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teams/{team-id}/tags/{teamworkTag-id}/members/$count (GET).

        Args:
            team_id (required): The unique identifier of team
            teamwork_tag_id (required): The unique identifier of teamworkTag
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teamwork_tag_id is not None:
            params["teamworkTag-id"] = teamwork_tag_id
            params["teamworkTag_id"] = teamwork_tag_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .tags().by_id(params.get("teamworkTag_id", "")).members().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_create_team(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create team.

        Microsoft Teams API method: /teams (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_delete_team(self,
        *,
        team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete entity from teams.

        Microsoft Teams API method: /teams/{team-id} (DELETE).

        Args:
            team_id (required): The unique identifier of team
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_get_team(self,
        *,
        team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get team.

        Microsoft Teams API method: /teams/{team-id} (GET).

        Args:
            team_id (required): The unique identifier of team
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_list_team(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List teams.

        Microsoft Teams API method: /teams (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_update_team(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update team.

        Microsoft Teams API method: /teams/{team-id} (PATCH).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_archive(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action archive.

        Microsoft Teams API method: /teams/{team-id}/archive (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .archive().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_all_members_add(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/allMembers/add (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().add()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_all_members_remove(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/allMembers/remove (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).all_members().remove()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_archive(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action archive.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/archive (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).archive()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_complete_migration(self,
        *,
        team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action completeMigration.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/completeMigration (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).complete_migration()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_does_user_have_access(self,
        *,
        team_id: str,
        channel_id: str,
        user_id: str | None = None,
        tenant_id: str | None = None,
        user_principal_name: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function doesUserHaveAccess.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/doesUserHaveAccess(userId='@userId',tenantId='@tenantId',userPrincipalName='@userPrincipalName') (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            user_id (optional): Usage: userId='@userId'
            tenant_id (optional): Usage: tenantId='@tenantId'
            user_principal_name (optional): Usage: userPrincipalName='@userPrincipalName'

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if user_id is not None:
            params["userId"] = user_id
        if tenant_id is not None:
            params["tenantId"] = tenant_id
        if user_principal_name is not None:
            params["userPrincipalName"] = user_principal_name
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", ""))
            .does_user_have_access(user_id="at_user_id",tenant_id="at_tenant_id",user_principal_name="at_user_principal_name")()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_members_add(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/members/add (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().add()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_members_remove(self,
        *,
        team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/members/remove (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).members().remove()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_messages_chat_message_replies_chat_message_set_reaction(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/setReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_messages_chat_message_replies_chat_message_soft_delete(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/softDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_messages_chat_message_replies_chat_message_undo_soft_delete(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/undoSoftDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).undo_soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_messages_chat_message_replies_chat_message_unset_reaction(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/unsetReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_messages_chat_message_replies_delta(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/delta() (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).replies().delta()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_messages_chat_message_set_reaction(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/setReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_messages_chat_message_soft_delete(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/softDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_messages_chat_message_undo_soft_delete(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/undoSoftDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).undo_soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_messages_chat_message_unset_reaction(self,
        *,
        team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}/unsetReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().by_id(params
            .get("chatMessage_id", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_messages_delta(self,
        *,
        team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/messages/delta() (GET).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).messages().delta()()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_provision_email(self,
        *,
        team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action provisionEmail.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/provisionEmail (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).provision_email()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_remove_email(self,
        *,
        team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action removeEmail.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/removeEmail (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).remove_email()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_channel_unarchive(self,
        *,
        team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unarchive.

        Microsoft Teams API method: /teams/{team-id}/channels/{channel-id}/unarchive (POST).

        Args:
            team_id (required): The unique identifier of team
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().by_id(params.get("channel_id", "")).unarchive()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_get_all_messages(self,
        *,
        team_id: str,
        model: str | None = None,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllMessages.

        Microsoft Teams API method: /teams/{team-id}/channels/getAllMessages() (GET).

        Args:
            team_id (required): The unique identifier of team
            model (optional): The payment model for the API
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if model is not None:
            params["model"] = model
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().get_all_messages()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_channels_get_all_retained_messages(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllRetainedMessages.

        Microsoft Teams API method: /teams/{team-id}/channels/getAllRetainedMessages() (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .channels().get_all_retained_messages()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_clone(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action clone.

        Microsoft Teams API method: /teams/{team-id}/clone (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .clone().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_complete_migration(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action completeMigration.

        Microsoft Teams API method: /teams/{team-id}/completeMigration (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .complete_migration().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_installed_apps_teams_app_installation_upgrade(self,
        *,
        team_id: str,
        teams_app_installation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action upgrade.

        Microsoft Teams API method: /teams/{team-id}/installedApps/{teamsAppInstallation-id}/upgrade (POST).

        Args:
            team_id (required): The unique identifier of team
            teams_app_installation_id (required): The unique identifier of teamsAppInstallation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if teams_app_installation_id is not None:
            params["teamsAppInstallation-id"] = teams_app_installation_id
            params["teamsAppInstallation_id"] = teams_app_installation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .installed_apps().by_id(params.get("teamsAppInstallation_id", ""))
            .upgrade().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_members_add(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /teams/{team-id}/members/add (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().add().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_members_remove(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /teams/{team-id}/members/remove (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .members().remove().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_all_members_add(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/allMembers/add (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().add()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_all_members_remove(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/allMembers/remove (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().all_members().remove()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_archive(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action archive.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/archive (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().archive().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_complete_migration(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action completeMigration.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/completeMigration (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().complete_migration().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_does_user_have_access(self,
        *,
        team_id: str,
        user_id: str | None = None,
        tenant_id: str | None = None,
        user_principal_name: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function doesUserHaveAccess.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/doesUserHaveAccess(userId='@userId',tenantId='@tenantId',userPrincipalName='@userPrincipalName') (GET).

        Args:
            team_id (required): The unique identifier of team
            user_id (optional): Usage: userId='@userId'
            tenant_id (optional): Usage: tenantId='@tenantId'
            user_principal_name (optional): Usage: userPrincipalName='@userPrincipalName'

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if user_id is not None:
            params["userId"] = user_id
        if tenant_id is not None:
            params["tenantId"] = tenant_id
        if user_principal_name is not None:
            params["userPrincipalName"] = user_principal_name
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel()
            .does_user_have_access(user_id="at_user_id",tenant_id="at_tenant_id",user_principal_name="at_user_principal_name")()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_members_add(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/members/add (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().add().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_members_remove(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/members/remove (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().members().remove()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_messages_chat_message_replies_chat_message_set_reaction(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/setReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_messages_chat_message_replies_chat_message_soft_delete(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/softDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).soft_delete()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_messages_chat_message_replies_chat_message_undo_soft_delete(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/undoSoftDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).undo_soft_delete()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_messages_chat_message_replies_chat_message_unset_reaction(self,
        *,
        team_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/{chatMessage-id1}/unsetReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().by_id(params.get("chatMessage_id1", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_messages_chat_message_replies_delta(self,
        *,
        team_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/replies/delta() (GET).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .replies().delta()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_messages_chat_message_set_reaction(self,
        *,
        team_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/setReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .set_reaction().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_messages_chat_message_soft_delete(self,
        *,
        team_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/softDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_messages_chat_message_undo_soft_delete(self,
        *,
        team_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/undoSoftDelete (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .undo_soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_messages_chat_message_unset_reaction(self,
        *,
        team_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/{chatMessage-id}/unsetReaction (POST).

        Args:
            team_id (required): The unique identifier of team
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().by_id(params.get("chatMessage_id", ""))
            .unset_reaction().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_messages_delta(self,
        *,
        team_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/messages/delta() (GET).

        Args:
            team_id (required): The unique identifier of team
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().messages().delta()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_provision_email(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action provisionEmail.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/provisionEmail (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().provision_email().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_remove_email(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action removeEmail.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/removeEmail (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().remove_email().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_primary_channel_unarchive(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action unarchive.

        Microsoft Teams API method: /teams/{team-id}/primaryChannel/unarchive (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .primary_channel().unarchive().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_schedule_share(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action share.

        Microsoft Teams API method: /teams/{team-id}/schedule/share (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().share().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_schedule_time_cards_clock_in(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action clockIn.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards/clockIn (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().clock_in().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_schedule_time_cards_time_card_clock_out(self,
        *,
        team_id: str,
        time_card_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action clockOut.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards/{timeCard-id}/clockOut (POST).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", "")).clock_out()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_schedule_time_cards_time_card_confirm(self,
        *,
        team_id: str,
        time_card_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action confirm.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards/{timeCard-id}/confirm (POST).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", "")).confirm()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_schedule_time_cards_time_card_end_break(self,
        *,
        team_id: str,
        time_card_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action endBreak.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards/{timeCard-id}/endBreak (POST).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", "")).end_break()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_schedule_time_cards_time_card_start_break(self,
        *,
        team_id: str,
        time_card_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action startBreak.

        Microsoft Teams API method: /teams/{team-id}/schedule/timeCards/{timeCard-id}/startBreak (POST).

        Args:
            team_id (required): The unique identifier of team
            time_card_id (required): The unique identifier of timeCard
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if time_card_id is not None:
            params["timeCard-id"] = time_card_id
            params["timeCard_id"] = time_card_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .schedule().time_cards().by_id(params.get("timeCard_id", "")).start_break()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_send_activity_notification(self,
        *,
        team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action sendActivityNotification.

        Microsoft Teams API method: /teams/{team-id}/sendActivityNotification (POST).

        Args:
            team_id (required): The unique identifier of team
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .send_activity_notification().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_team_unarchive(self, *, team_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action unarchive.

        Microsoft Teams API method: /teams/{team-id}/unarchive (POST).

        Args:
            team_id (required): The unique identifier of team

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if team_id is not None:
            params["team-id"] = team_id
            params["team_id"] = team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().by_id(params.get("team_id", ""))  # type:ignore
            .unarchive().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_templates_get_count_3b4a(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamsTemplates/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teams_templates().count()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_templates_teams_template_create_teams_template(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Add new entity to teamsTemplates.

        Microsoft Teams API method: /teamsTemplates (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teams_templates()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_templates_teams_template_delete_teams_template(self,
        *,
        teams_template_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete entity from teamsTemplates.

        Microsoft Teams API method: /teamsTemplates/{teamsTemplate-id} (DELETE).

        Args:
            teams_template_id (required): The unique identifier of teamsTemplate
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if teams_template_id is not None:
            params["teamsTemplate-id"] = teams_template_id
            params["teamsTemplate_id"] = teams_template_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teams_templates().by_id(params  # type:ignore
            .get("teamsTemplate_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_templates_teams_template_get_teams_template(self,
        *,
        teams_template_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get entity from teamsTemplates by key.

        Microsoft Teams API method: /teamsTemplates/{teamsTemplate-id} (GET).

        Args:
            teams_template_id (required): The unique identifier of teamsTemplate
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if teams_template_id is not None:
            params["teamsTemplate-id"] = teams_template_id
            params["teamsTemplate_id"] = teams_template_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teams_templates().by_id(params  # type:ignore
            .get("teamsTemplate_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_templates_teams_template_list_teams_template(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get entities from teamsTemplates.

        Microsoft Teams API method: /teamsTemplates (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teams_templates().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teams_templates_teams_template_update_teams_template(self,
        *,
        teams_template_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update entity in teamsTemplates.

        Microsoft Teams API method: /teamsTemplates/{teamsTemplate-id} (PATCH).

        Args:
            teams_template_id (required): The unique identifier of teamsTemplate
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if teams_template_id is not None:
            params["teamsTemplate-id"] = teams_template_id
            params["teamsTemplate_id"] = teams_template_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teams_templates().by_id(params  # type:ignore
            .get("teamsTemplate_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_create_deleted_chats(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create new navigation property to deletedChats for teamwork.

        Microsoft Teams API method: /teamwork/deletedChats (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_chats()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_create_deleted_teams(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create new navigation property to deletedTeams for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_create_workforce_integrations(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create workforceIntegration.

        Microsoft Teams API method: /teamwork/workforceIntegrations (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().workforce_integrations()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_delete_deleted_chats(self,
        *,
        deleted_chat_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property deletedChats for teamwork.

        Microsoft Teams API method: /teamwork/deletedChats/{deletedChat-id} (DELETE).

        Args:
            deleted_chat_id (required): The unique identifier of deletedChat
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_chat_id is not None:
            params["deletedChat-id"] = deleted_chat_id
            params["deletedChat_id"] = deleted_chat_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_chats().by_id(params  # type:ignore
            .get("deletedChat_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_delete_deleted_teams(self,
        *,
        deleted_team_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property deletedTeams for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id} (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_delete_teams_app_settings(self, *, if_match: str | None = None, **kwargs) -> MSGraphResponse:
        """Delete navigation property teamsAppSettings for teamwork.

        Microsoft Teams API method: /teamwork/teamsAppSettings (DELETE).

        Args:
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teamwork().teams_app_settings()  # type:ignore
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_delete_workforce_integrations(self,
        *,
        workforce_integration_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete workforceIntegration.

        Microsoft Teams API method: /teamwork/workforceIntegrations/{workforceIntegration-id} (DELETE).

        Args:
            workforce_integration_id (required): The unique identifier of workforceIntegration
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if workforce_integration_id is not None:
            params["workforceIntegration-id"] = workforce_integration_id
            params["workforceIntegration_id"] = workforce_integration_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().workforce_integrations()  # type:ignore
            .by_id(params.get("workforceIntegration_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_get_deleted_chats(self,
        *,
        deleted_chat_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get deletedChat.

        Microsoft Teams API method: /teamwork/deletedChats/{deletedChat-id} (GET).

        Args:
            deleted_chat_id (required): The unique identifier of deletedChat
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_chat_id is not None:
            params["deletedChat-id"] = deleted_chat_id
            params["deletedChat_id"] = deleted_chat_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_chats().by_id(params  # type:ignore
            .get("deletedChat_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_get_deleted_teams(self,
        *,
        deleted_team_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get deletedTeams from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_get_teams_app_settings(self,
        *,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsAppSettings.

        Microsoft Teams API method: /teamwork/teamsAppSettings (GET).

        Args:
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teamwork().teams_app_settings()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_get_workforce_integrations(self,
        *,
        workforce_integration_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get workforceIntegration.

        Microsoft Teams API method: /teamwork/workforceIntegrations/{workforceIntegration-id} (GET).

        Args:
            workforce_integration_id (required): The unique identifier of workforceIntegration
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if workforce_integration_id is not None:
            params["workforceIntegration-id"] = workforce_integration_id
            params["workforceIntegration_id"] = workforce_integration_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().workforce_integrations()  # type:ignore
            .by_id(params.get("workforceIntegration_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_list_deleted_chats(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get deletedChat.

        Microsoft Teams API method: /teamwork/deletedChats (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_chats()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_list_deleted_teams(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List deletedTeams.

        Microsoft Teams API method: /teamwork/deletedTeams (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_list_workforce_integrations(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List workforceIntegrations.

        Microsoft Teams API method: /teamwork/workforceIntegrations (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().workforce_integrations()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_update_deleted_chats(self,
        *,
        deleted_chat_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property deletedChats in teamwork.

        Microsoft Teams API method: /teamwork/deletedChats/{deletedChat-id} (PATCH).

        Args:
            deleted_chat_id (required): The unique identifier of deletedChat
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_chat_id is not None:
            params["deletedChat-id"] = deleted_chat_id
            params["deletedChat_id"] = deleted_chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_chats().by_id(params  # type:ignore
            .get("deletedChat_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_update_deleted_teams(self,
        *,
        deleted_team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property deletedTeams in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id} (PATCH).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_update_teams_app_settings(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Update teamsAppSettings.

        Microsoft Teams API method: /teamwork/teamsAppSettings (PATCH).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teamwork().teams_app_settings()  # type:ignore
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_update_workforce_integrations(self,
        *,
        workforce_integration_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update workforceIntegration.

        Microsoft Teams API method: /teamwork/workforceIntegrations/{workforceIntegration-id} (PATCH).

        Args:
            workforce_integration_id (required): The unique identifier of workforceIntegration
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if workforce_integration_id is not None:
            params["workforceIntegration-id"] = workforce_integration_id
            params["workforceIntegration_id"] = workforce_integration_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().workforce_integrations()  # type:ignore
            .by_id(params.get("workforceIntegration_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_chats_get_count_fc09(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedChats/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_chats().count()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_chats_deleted_chat_undo_delete(self, *, deleted_chat_id: str, **kwargs) -> MSGraphResponse:
        """Invoke action undoDelete.

        Microsoft Teams API method: /teamwork/deletedChats/{deletedChat-id}/undoDelete (POST).

        Args:
            deleted_chat_id (required): The unique identifier of deletedChat

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_chat_id is not None:
            params["deletedChat-id"] = deleted_chat_id
            params["deletedChat_id"] = deleted_chat_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_chats().by_id(params  # type:ignore
            .get("deletedChat_id", "")).undo_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_create_channels(self,
        *,
        deleted_team_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to channels for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_delete_channels(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property channels for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id} (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_get_channels(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get channels from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_get_count_c07f(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().count()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_list_channels(self,
        *,
        deleted_team_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get channels from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_update_channels(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property channels in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id} (PATCH).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_create_all_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to allMembers for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/allMembers (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .all_members().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_create_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to members for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/members (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .members().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_create_messages(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to messages for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_create_shared_with_teams(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sharedWithTeams for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/sharedWithTeams (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .shared_with_teams().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_create_tabs(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to tabs for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/tabs (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .tabs().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_delete_all_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property allMembers for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/allMembers/{conversationMember-id} (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .all_members().by_id(params.get("conversationMember_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_delete_files_folder_content(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property filesFolder in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/filesFolder/content (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .files_folder().content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_delete_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        conversation_member_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property members for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/members/{conversationMember-id} (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .members().by_id(params.get("conversationMember_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_delete_messages(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property messages for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id} (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_delete_shared_with_teams(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sharedWithTeams for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id} (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .shared_with_teams().by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_delete_tabs(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        teams_tab_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property tabs for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/tabs/{teamsTab-id} (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teamwork().deleted_teams()  # type:ignore
            .by_id(params.get("deletedTeam_id", "")).channels().by_id(params
            .get("channel_id", "")).tabs().by_id(params.get("teamsTab_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_get_all_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allMembers from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/allMembers/{conversationMember-id} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .all_members().by_id(params.get("conversationMember_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_get_count_1c02(self,
        *,
        deleted_team_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/$count (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_get_files_folder(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get filesFolder from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/filesFolder (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .files_folder().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_get_files_folder_content(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        dollar_format: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property filesFolder from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/filesFolder/content (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            dollar_format (optional): Format of the content

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if dollar_format is not None:
            params["$format"] = dollar_format
            params["dollar_format"] = dollar_format
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .files_folder().content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_get_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/members/{conversationMember-id} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .members().by_id(params.get("conversationMember_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_get_messages(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get messages from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_get_shared_with_teams(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sharedWithTeams from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .shared_with_teams().by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_get_tabs(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tabs from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/tabs/{teamsTab-id} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teamwork().deleted_teams()  # type:ignore
            .by_id(params.get("deletedTeam_id", "")).channels().by_id(params
            .get("channel_id", "")).tabs().by_id(params.get("teamsTab_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_list_all_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allMembers from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/allMembers (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .all_members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_list_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get members from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/members (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_list_messages(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get messages from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_list_shared_with_teams(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sharedWithTeams from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/sharedWithTeams (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .shared_with_teams().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_list_tabs(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get tabs from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/tabs (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .tabs().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_update_all_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property allMembers in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/allMembers/{conversationMember-id} (PATCH).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .all_members().by_id(params.get("conversationMember_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_update_files_folder_content(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property filesFolder in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/filesFolder/content (PUT).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .files_folder().content().put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_update_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        conversation_member_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property members in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/members/{conversationMember-id} (PATCH).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            conversation_member_id (required): The unique identifier of conversationMember
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .members().by_id(params.get("conversationMember_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_update_messages(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property messages in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id} (PATCH).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_update_shared_with_teams(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sharedWithTeams in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id} (PATCH).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .shared_with_teams().by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_update_tabs(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        teams_tab_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property tabs in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/tabs/{teamsTab-id} (PATCH).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teamwork().deleted_teams()  # type:ignore
            .by_id(params.get("deletedTeam_id", "")).channels().by_id(params
            .get("channel_id", "")).tabs().by_id(params.get("teamsTab_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_all_members_get_count_c12c(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/allMembers/$count (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .all_members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_members_get_count_f8e9(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/members/$count (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_create_hosted_contents(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_create_replies(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to replies for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_delete_hosted_contents(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_delete_hosted_contents_content(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_delete_replies(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property replies for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_get_count_d80c(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/$count (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_get_hosted_contents(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_get_hosted_contents_content(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_get_replies(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_list_hosted_contents(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_list_replies(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get replies from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_update_hosted_contents(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_update_hosted_contents_content(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .by_id(params.get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_update_replies(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property replies in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1} (PATCH).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_hosted_contents_get_count_bbdc(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/hostedContents/$count (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).hosted_contents()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_replies_create_hosted_contents(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to hostedContents for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_replies_delete_hosted_contents(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property hostedContents for teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_replies_delete_hosted_contents_content(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete media content for the navigation property hostedContents in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (DELETE).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_replies_get_count_32b1(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/$count (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_replies_get_hosted_contents(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_replies_get_hosted_contents_content(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get media content for the navigation property hostedContents from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_replies_list_hosted_contents(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get hostedContents from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_replies_update_hosted_contents(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property hostedContents in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id} (PATCH).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_replies_update_hosted_contents_content(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        chat_message_hosted_content_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update media content for the navigation property hostedContents in teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/{chatMessageHostedContent-id}/$value (PUT).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            chat_message_hosted_content_id (required): The unique identifier of chatMessageHostedContent
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if chat_message_hosted_content_id is not None:
            params["chatMessageHostedContent-id"] = chat_message_hosted_content_id
            params["chatMessageHostedContent_id"] = chat_message_hosted_content_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().by_id(params
            .get("chatMessageHostedContent_id", "")).value()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_messages_replies_hosted_contents_get_count_a9d7(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/hostedContents/$count (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).hosted_contents().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_shared_with_teams_get_allowed_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        conversation_member_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allowedMembers from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers/{conversationMember-id} (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            conversation_member_id (required): The unique identifier of conversationMember
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if conversation_member_id is not None:
            params["conversationMember-id"] = conversation_member_id
            params["conversationMember_id"] = conversation_member_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .shared_with_teams().by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .allowed_members().by_id(params.get("conversationMember_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_shared_with_teams_get_count_cc9d(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/sharedWithTeams/$count (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .shared_with_teams().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_shared_with_teams_get_team(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get team from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/team (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .shared_with_teams().by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .team().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_shared_with_teams_list_allowed_members(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get allowedMembers from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .shared_with_teams().by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .allowed_members().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_shared_with_teams_allowed_members_get_count_f7b0(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        shared_with_channel_team_info_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/sharedWithTeams/{sharedWithChannelTeamInfo-id}/allowedMembers/$count (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            shared_with_channel_team_info_id (required): The unique identifier of sharedWithChannelTeamInfo
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if shared_with_channel_team_info_id is not None:
            params["sharedWithChannelTeamInfo-id"] = shared_with_channel_team_info_id
            params["sharedWithChannelTeamInfo_id"] = shared_with_channel_team_info_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .shared_with_teams().by_id(params.get("sharedWithChannelTeamInfo_id", ""))
            .allowed_members().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_tabs_get_count_5911(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/tabs/$count (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .tabs().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_channels_tabs_get_teams_app(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        teams_tab_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamsApp from teamwork.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/tabs/{teamsTab-id}/teamsApp (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            teams_tab_id (required): The unique identifier of teamsTab
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if teams_tab_id is not None:
            params["teamsTab-id"] = teams_tab_id
            params["teamsTab_id"] = teams_tab_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.teams().teamwork().deleted_teams()  # type:ignore
            .by_id(params.get("deletedTeam_id", "")).channels().by_id(params
            .get("channel_id", "")).tabs().by_id(params.get("teamsTab_id", ""))
            .teams_app().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_all_members_add(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/allMembers/add (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .all_members().add().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_all_members_remove(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/allMembers/remove (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .all_members().remove().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_archive(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action archive.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/archive (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .archive().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_complete_migration(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action completeMigration.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/completeMigration (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .complete_migration().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_does_user_have_access(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        user_id: str | None = None,
        tenant_id: str | None = None,
        user_principal_name: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function doesUserHaveAccess.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/doesUserHaveAccess(userId='@userId',tenantId='@tenantId',userPrincipalName='@userPrincipalName') (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            user_id (optional): Usage: userId='@userId'
            tenant_id (optional): Usage: tenantId='@tenantId'
            user_principal_name (optional): Usage: userPrincipalName='@userPrincipalName'

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if user_id is not None:
            params["userId"] = user_id
        if tenant_id is not None:
            params["tenantId"] = tenant_id
        if user_principal_name is not None:
            params["userPrincipalName"] = user_principal_name
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .does_user_have_access(user_id="at_user_id",tenant_id="at_tenant_id",user_principal_name="at_user_principal_name")()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_members_add(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action add.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/members/add (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .members().add().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_members_remove(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action remove.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/members/remove (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .members().remove().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_set_reaction(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/setReaction (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_soft_delete(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/softDelete (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_undo_soft_delete(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/undoSoftDelete (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).undo_soft_delete().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_unset_reaction(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        chat_message_id1: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}/unsetReaction (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            chat_message_id1 (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if chat_message_id1 is not None:
            params["chatMessage-id1"] = chat_message_id1
            params["chatMessage_id1"] = chat_message_id1
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().by_id(params
            .get("chatMessage_id1", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_delta(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/replies/delta() (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).replies().delta()()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_set_reaction(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action setReaction.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/setReaction (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).set_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_soft_delete(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action softDelete.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/softDelete (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).soft_delete()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_undo_soft_delete(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action undoSoftDelete.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/undoSoftDelete (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).undo_soft_delete()
            .post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_unset_reaction(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        chat_message_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unsetReaction.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/{chatMessage-id}/unsetReaction (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            chat_message_id (required): The unique identifier of chatMessage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if chat_message_id is not None:
            params["chatMessage-id"] = chat_message_id
            params["chatMessage_id"] = chat_message_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().by_id(params.get("chatMessage_id", "")).unset_reaction()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_messages_delta(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function delta.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/messages/delta() (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .messages().delta()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_provision_email(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action provisionEmail.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/provisionEmail (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .provision_email().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_remove_email(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action removeEmail.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/removeEmail (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .remove_email().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_channel_unarchive(self,
        *,
        deleted_team_id: str,
        channel_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action unarchive.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/{channel-id}/unarchive (POST).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            channel_id (required): The unique identifier of channel

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if channel_id is not None:
            params["channel-id"] = channel_id
            params["channel_id"] = channel_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().by_id(params.get("channel_id", ""))
            .unarchive().post(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_get_all_messages(self,
        *,
        deleted_team_id: str,
        model: str | None = None,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllMessages.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/getAllMessages() (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            model (optional): The payment model for the API
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if model is not None:
            params["model"] = model
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().get_all_messages()()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_deleted_team_channels_get_all_retained_messages(self,
        *,
        deleted_team_id: str,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllRetainedMessages.

        Microsoft Teams API method: /teamwork/deletedTeams/{deletedTeam-id}/channels/getAllRetainedMessages() (GET).

        Args:
            deleted_team_id (required): The unique identifier of deletedTeam
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if deleted_team_id is not None:
            params["deletedTeam-id"] = deleted_team_id
            params["deletedTeam_id"] = deleted_team_id
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams().by_id(params  # type:ignore
            .get("deletedTeam_id", "")).channels().get_all_retained_messages()()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_deleted_teams_get_all_messages(self,
        *,
        model: str | None = None,
        param: str | None = None,
        dollar_select: list[str] | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getAllMessages.

        Microsoft Teams API method: /teamwork/deletedTeams/getAllMessages() (GET).

        Args:
            model (optional): The payment model for the API
            param (optional):
            dollar_select (optional): Select properties to be returned
            dollar_orderby (optional): Order items by property values
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if model is not None:
            params["model"] = model
        if param is not None:
            params["param"] = param
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().deleted_teams()  # type:ignore
            .get_all_messages()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_send_activity_notification_to_recipients(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Invoke action sendActivityNotificationToRecipients.

        Microsoft Teams API method: /teamwork/sendActivityNotificationToRecipients (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork()  # type:ignore
            .send_activity_notification_to_recipients()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_teamwork_get_teamwork(self,
        *,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get teamwork.

        Microsoft Teams API method: /teamwork (GET).

        Args:
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_teamwork_update_teamwork(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Update teamwork.

        Microsoft Teams API method: /teamwork (PATCH).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork()  # type:ignore
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )

    def teamwork_workforce_integrations_get_count_5b5b(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft Teams API method: /teamwork/workforceIntegrations/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().teamwork().workforce_integrations()  # type:ignore
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft Teams API API call failed: {e!s}",
            )
