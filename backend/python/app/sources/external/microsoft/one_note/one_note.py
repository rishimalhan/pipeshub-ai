    # Auto-generated Microsoft Onenote API client.
    # ruff: noqa: BLE001, D417, E501, ANN003, PGH003, PLR0912, C901, PLR0913, G004, TRY400, TRY003, EM101, D100, INP001, PLR0915, D401

import keyword as _kw
import logging
import re
from collections.abc import Mapping

from app.sources.client.microsoft.microsoft import MSGraphClient, MSGraphResponse

# Set up logger
logger = logging.getLogger(__name__)

class OneNoteDataSource:
    """Auto-generated Microsoft OneNote API client wrapper.

    - Uses Microsoft Graph SDK client internally
    - Snake_case method names for all Microsoft OneNote API operations
    - Standardized MSGraphResponse format for all responses
    - No direct HTTP calls - all requests go through Graph SDK
    """

    def __init__(self, client: MSGraphClient) -> None:
        """Initialize with Microsoft Graph SDK client."""
        self.client = client.get_client()
        if not hasattr(self.client, "me"):
            raise ValueError("Client must be a Microsoft Graph SDK client")
        logger.info("Microsoft OneNote API client initialized successfully")

    def _sanitize_py_name(self, name: str) -> str:
        """Runtime-safe version of sanitize_py_name for mirroring param keys.

        Turns '$select' -> 'dollar_select', 'message-id' -> 'message_id', etc.
        """
        n = name.replace("$", "dollar_").replace("@", "at_").replace(".", "_")
        n = re.sub(r"[^0-9a-zA-Z_]", "_", n)
        if n and n[0].isdigit():
            n = f"_{n}"
        if _kw.iskeyword(n):
            n += "_"
        if n.startswith("__"):
            n = f"_{n}"
        return n

    def _handle_response(self, response: dict[str, str | int | bool | list[object]]) -> MSGraphResponse:
        """Handle Microsoft Graph API response."""
        try:
            if response is None:
                    return MSGraphResponse(success=False, error="Empty response from Microsoft Graph")

            success = True
            error_msg = None

            # Handle error responses
            if hasattr(response, "error"):
                success = False
                error_msg = str(response.error) #type:ignore
            elif isinstance(response, dict) and "error" in response:
                success = False
                error_msg = str(response["error"])
            elif hasattr(response, "code") and hasattr(response, "message"):
                success = False
                error_msg = f"{response.code}: {response.message}" #type:ignore

            return MSGraphResponse(
                success=success,
                data=response,
                error=error_msg,
            )
        except Exception as e:
            logger.error(f"Error handling Microsoft OneNote API response: {e}")
            return MSGraphResponse(success=False, error=str(e))

    def get_data_source(self) -> "OneNoteDataSource":
        """Get the underlying Microsoft OneNote API client."""
        return self


    def groups_delete_onenote(self,
        *,
        group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property onenote for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote (DELETE).

        Args:
            group_id (required): The unique identifier of group
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_get_onenote(self,
        *,
        group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get onenote from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote (GET).

        Args:
            group_id (required): The unique identifier of group
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_update_onenote(self,
        *,
        group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property onenote in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote (PATCH).

        Args:
            group_id (required): The unique identifier of group
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_get_notebook_from_web_url(self,
        *,
        group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action getNotebookFromWebUrl.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/getNotebookFromWebUrl (POST).

        Args:
            group_id (required): The unique identifier of group
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().get_notebook_from_web_url()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_get_recent_notebooks(self,
        *,
        group_id: str,
        include_personal_notebooks: bool,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getRecentNotebooks.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/getRecentNotebooks(includePersonalNotebooks={includePersonalNotebooks}) (GET).

        Args:
            group_id (required): The unique identifier of group
            include_personal_notebooks (required): Usage: includePersonalNotebooks={includePersonalNotebooks}
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if include_personal_notebooks is not None:
            params["includePersonalNotebooks"] = include_personal_notebooks
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks()
            .get_recent_notebooks(include_personal_notebooks={include_personal_notebooks})()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_copy_notebook(self,
        *,
        group_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyNotebook.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/copyNotebook (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).copy_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_pages_onenote_page_copy_to_section(self,
        *,
        group_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_pages_onenote_page_onenote_patch_content(self,
        *,
        group_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_pages_onenote_page_preview(self,
        *,
        group_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id}/preview() (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_sections_onenote_section_copy_to_notebook(self,
        *,
        group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_sections_onenote_section_copy_to_section_group(self,
        *,
        group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_group_onenote_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_create_notebooks(self,
        *,
        group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to notebooks for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks (POST).

        Args:
            group_id (required): The unique identifier of group
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_create_operations(self,
        *,
        group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to operations for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/operations (POST).

        Args:
            group_id (required): The unique identifier of group
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().operations()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_create_pages(self,
        *,
        group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages (POST).

        Args:
            group_id (required): The unique identifier of group
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_create_resources(self,
        *,
        group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to resources for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/resources (POST).

        Args:
            group_id (required): The unique identifier of group
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().resources()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_create_section_groups(self,
        *,
        group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sectionGroups for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups (POST).

        Args:
            group_id (required): The unique identifier of group
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_create_sections(self,
        *,
        group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections (POST).

        Args:
            group_id (required): The unique identifier of group
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_delete_notebooks(self,
        *,
        group_id: str,
        notebook_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property notebooks for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_delete_operations(self,
        *,
        group_id: str,
        onenote_operation_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property operations for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/operations/{onenoteOperation-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            onenote_operation_id (required): The unique identifier of onenoteOperation
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().operations().by_id(params
            .get("onenoteOperation_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_delete_pages(self,
        *,
        group_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_delete_pages_content(self,
        *,
        group_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id}/content (DELETE).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_delete_resources(self,
        *,
        group_id: str,
        onenote_resource_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property resources for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/resources/{onenoteResource-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            onenote_resource_id (required): The unique identifier of onenoteResource
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().resources().by_id(params
            .get("onenoteResource_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_delete_resources_content(self,
        *,
        group_id: str,
        onenote_resource_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property resources in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/resources/{onenoteResource-id}/content (DELETE).

        Args:
            group_id (required): The unique identifier of group
            onenote_resource_id (required): The unique identifier of onenoteResource
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().resources().by_id(params
            .get("onenoteResource_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_delete_section_groups(self,
        *,
        group_id: str,
        section_group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sectionGroups for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_delete_sections(self,
        *,
        group_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_get_notebooks(self,
        *,
        group_id: str,
        notebook_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get notebooks from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_get_operations(self,
        *,
        group_id: str,
        onenote_operation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get operations from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/operations/{onenoteOperation-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_operation_id (required): The unique identifier of onenoteOperation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().operations().by_id(params
            .get("onenoteOperation_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_get_pages(self,
        *,
        group_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_get_pages_content(self,
        *,
        group_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id}/content (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_get_resources(self,
        *,
        group_id: str,
        onenote_resource_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get resources from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/resources/{onenoteResource-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_resource_id (required): The unique identifier of onenoteResource
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().resources().by_id(params
            .get("onenoteResource_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_get_resources_content(self,
        *,
        group_id: str,
        onenote_resource_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property resources from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/resources/{onenoteResource-id}/content (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_resource_id (required): The unique identifier of onenoteResource

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().resources().by_id(params
            .get("onenoteResource_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_get_section_groups(self,
        *,
        group_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_get_sections(self,
        *,
        group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_list_notebooks(self,
        *,
        group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get notebooks from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_list_operations(self,
        *,
        group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get operations from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/operations (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().operations().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_list_pages(self,
        *,
        group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_list_resources(self,
        *,
        group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get resources from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/resources (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().resources().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_list_section_groups(self,
        *,
        group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_list_sections(self,
        *,
        group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_update_notebooks(self,
        *,
        group_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property notebooks in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_update_operations(self,
        *,
        group_id: str,
        onenote_operation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property operations in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/operations/{onenoteOperation-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            onenote_operation_id (required): The unique identifier of onenoteOperation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().operations().by_id(params
            .get("onenoteOperation_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_update_pages(self,
        *,
        group_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_update_pages_content(self,
        *,
        group_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id}/content (PUT).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_update_resources(self,
        *,
        group_id: str,
        onenote_resource_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property resources in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/resources/{onenoteResource-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            onenote_resource_id (required): The unique identifier of onenoteResource
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().resources().by_id(params
            .get("onenoteResource_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_update_resources_content(self,
        *,
        group_id: str,
        onenote_resource_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property resources in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/resources/{onenoteResource-id}/content (PUT).

        Args:
            group_id (required): The unique identifier of group
            onenote_resource_id (required): The unique identifier of onenoteResource
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().resources().by_id(params
            .get("onenoteResource_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_update_section_groups(self,
        *,
        group_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sectionGroups in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_update_sections(self,
        *,
        group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_create_section_groups(self,
        *,
        group_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sectionGroups for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_create_sections(self,
        *,
        group_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_delete_section_groups(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sectionGroups for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_delete_sections(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_get_count_4d2a(self,
        *,
        group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_get_section_groups(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_get_sections(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_list_section_groups(self,
        *,
        group_id: str,
        notebook_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_list_sections(self,
        *,
        group_id: str,
        notebook_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_update_section_groups(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sectionGroups in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_update_sections(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_create_sections(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_delete_sections(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_get_count_e27e(self,
        *,
        group_id: str,
        notebook_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_get_parent_notebook(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_get_parent_section_group(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_get_section_groups(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        section_group_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1} (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            section_group_id1 (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if section_group_id1 is not None:
            params["sectionGroup-id1"] = section_group_id1
            params["sectionGroup_id1"] = section_group_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).section_groups().by_id(params
            .get("sectionGroup_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_get_sections(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_list_section_groups(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_list_sections(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_update_sections(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_section_groups_get_count_e27e(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_create_pages(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_delete_pages(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_delete_pages_content(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_get_count_abc0(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_get_pages(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_get_pages_content(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_get_parent_notebook(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_get_parent_section_group(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_list_pages(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_update_pages(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_update_pages_content(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_pages_get_count_6db1(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_section_groups_sections_pages_get_parent_section(self,
        *,
        group_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_create_pages(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_delete_pages(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_delete_pages_content(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_get_count_8678(self,
        *,
        group_id: str,
        notebook_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_get_pages(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_get_pages_content(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_get_parent_notebook(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_get_parent_section_group(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_list_pages(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_update_pages(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_update_pages_content(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_pages_get_count_9305(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_pages_get_parent_notebook(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_notebooks_sections_pages_get_parent_section(self,
        *,
        group_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            group_id (required): The unique identifier of group
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().notebooks().by_id(params
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_operations_get_count_b2ab(self,
        *,
        group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/operations/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().operations().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_pages_get_count_8bf6(self,
        *,
        group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_pages_get_parent_notebook(self,
        *,
        group_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_pages_get_parent_section(self,
        *,
        group_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_resources_get_count_b07f(self,
        *,
        group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/resources/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().resources().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_create_sections(self,
        *,
        group_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections (POST).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_delete_sections(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_get_count_17b9(self,
        *,
        group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_get_parent_notebook(self,
        *,
        group_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_get_parent_section_group(self,
        *,
        group_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_get_section_groups(self,
        *,
        group_id: str,
        section_group_id: str,
        section_group_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1} (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            section_group_id1 (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if section_group_id1 is not None:
            params["sectionGroup-id1"] = section_group_id1
            params["sectionGroup_id1"] = section_group_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).section_groups().by_id(params
            .get("sectionGroup_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_get_sections(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_list_section_groups(self,
        *,
        group_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_list_sections(self,
        *,
        group_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_update_sections(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_section_groups_get_count_17b9(self,
        *,
        group_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_create_pages(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_delete_pages(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_delete_pages_content(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_get_count_4d99(self,
        *,
        group_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_get_pages(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_get_pages_content(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_get_parent_notebook(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_get_parent_section_group(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_list_pages(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_update_pages(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_update_pages_content(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_pages_get_count_110b(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_pages_get_parent_notebook(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_section_groups_sections_pages_get_parent_section(self,
        *,
        group_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            group_id (required): The unique identifier of group
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_create_pages(self,
        *,
        group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages (POST).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_delete_pages(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_delete_pages_content(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_get_count_0122(self,
        *,
        group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_get_pages(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_get_pages_content(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_get_parent_notebook(self,
        *,
        group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_get_parent_section_group(self,
        *,
        group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_list_pages(self,
        *,
        group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_update_pages(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_update_pages_content(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_pages_get_count_375d(self,
        *,
        group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_pages_get_parent_notebook(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def groups_onenote_sections_pages_get_parent_section(self,
        *,
        group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from groups.

        Microsoft OneNote API method: /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            group_id (required): The unique identifier of group
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if group_id is not None:
            params["group-id"] = group_id
            params["group_id"] = group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().groups().by_id(params  # type:ignore
            .get("group_id", "")).onenote().sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_delete_onenote(self, *, if_match: str | None = None, **kwargs) -> MSGraphResponse:
        """Delete navigation property onenote for me.

        Microsoft OneNote API method: /me/onenote (DELETE).

        Args:
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().delete(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_get_onenote(self,
        *,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get onenote from me.

        Microsoft OneNote API method: /me/onenote (GET).

        Args:
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_update_onenote(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Update the navigation property onenote in me.

        Microsoft OneNote API method: /me/onenote (PATCH).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote()  # type:ignore
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_create_notebooks(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create notebook.

        Microsoft OneNote API method: /me/onenote/notebooks (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_create_operations(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create new navigation property to operations for me.

        Microsoft OneNote API method: /me/onenote/operations (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().operations()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_create_pages(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create onenotePage.

        Microsoft OneNote API method: /me/onenote/pages (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_create_resources(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create new navigation property to resources for me.

        Microsoft OneNote API method: /me/onenote/resources (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().resources()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_create_section_groups(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create new navigation property to sectionGroups for me.

        Microsoft OneNote API method: /me/onenote/sectionGroups (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_create_sections(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Create new navigation property to sections for me.

        Microsoft OneNote API method: /me/onenote/sections (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections()  # type:ignore
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_delete_notebooks(self,
        *,
        notebook_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property notebooks for me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id} (DELETE).

        Args:
            notebook_id (required): The unique identifier of notebook
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_delete_operations(self,
        *,
        onenote_operation_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property operations for me.

        Microsoft OneNote API method: /me/onenote/operations/{onenoteOperation-id} (DELETE).

        Args:
            onenote_operation_id (required): The unique identifier of onenoteOperation
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().operations().by_id(params  # type:ignore
            .get("onenoteOperation_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_delete_pages(self,
        *,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete page.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id} (DELETE).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_delete_pages_content(self,
        *,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id}/content (DELETE).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_delete_resources(self,
        *,
        onenote_resource_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property resources for me.

        Microsoft OneNote API method: /me/onenote/resources/{onenoteResource-id} (DELETE).

        Args:
            onenote_resource_id (required): The unique identifier of onenoteResource
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().resources().by_id(params  # type:ignore
            .get("onenoteResource_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_delete_resources_content(self,
        *,
        onenote_resource_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property resources in me.

        Microsoft OneNote API method: /me/onenote/resources/{onenoteResource-id}/content (DELETE).

        Args:
            onenote_resource_id (required): The unique identifier of onenoteResource
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().resources().by_id(params  # type:ignore
            .get("onenoteResource_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_delete_section_groups(self,
        *,
        section_group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sectionGroups for me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id} (DELETE).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_delete_sections(self,
        *,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id} (DELETE).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_get_notebooks(self,
        *,
        notebook_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get notebook.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id} (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_get_operations(self,
        *,
        onenote_operation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get onenoteOperation.

        Microsoft OneNote API method: /me/onenote/operations/{onenoteOperation-id} (GET).

        Args:
            onenote_operation_id (required): The unique identifier of onenoteOperation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().operations().by_id(params  # type:ignore
            .get("onenoteOperation_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_get_pages(self,
        *,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get page.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id} (GET).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_get_pages_content(self, *, onenote_page_id: str, **kwargs) -> MSGraphResponse:
        """Get content for the navigation property pages from me.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id}/content (GET).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_get_resources(self,
        *,
        onenote_resource_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get resources from me.

        Microsoft OneNote API method: /me/onenote/resources/{onenoteResource-id} (GET).

        Args:
            onenote_resource_id (required): The unique identifier of onenoteResource
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().resources().by_id(params  # type:ignore
            .get("onenoteResource_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_get_resources_content(self, *, onenote_resource_id: str, **kwargs) -> MSGraphResponse:
        """Get resource.

        Microsoft OneNote API method: /me/onenote/resources/{onenoteResource-id}/content (GET).

        Args:
            onenote_resource_id (required): The unique identifier of onenoteResource

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().resources().by_id(params  # type:ignore
            .get("onenoteResource_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_get_section_groups(self,
        *,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroup.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id} (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_get_sections(self,
        *,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get section.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id} (GET).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_list_notebooks(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List notebooks.

        Microsoft OneNote API method: /me/onenote/notebooks (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_list_operations(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get onenoteOperation.

        Microsoft OneNote API method: /me/onenote/operations (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().operations().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_list_pages(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List onenotePages.

        Microsoft OneNote API method: /me/onenote/pages (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_list_resources(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get resources from me.

        Microsoft OneNote API method: /me/onenote/resources (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().resources().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_list_section_groups(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List sectionGroups.

        Microsoft OneNote API method: /me/onenote/sectionGroups (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_list_sections(self,
        *,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List sections.

        Microsoft OneNote API method: /me/onenote/sections (GET).

        Args:
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().get(params=params)  # type:ignore
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_update_notebooks(self,
        *,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property notebooks in me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id} (PATCH).

        Args:
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_update_operations(self,
        *,
        onenote_operation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property operations in me.

        Microsoft OneNote API method: /me/onenote/operations/{onenoteOperation-id} (PATCH).

        Args:
            onenote_operation_id (required): The unique identifier of onenoteOperation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().operations().by_id(params  # type:ignore
            .get("onenoteOperation_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_update_pages(self,
        *,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id} (PATCH).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_update_pages_content(self,
        *,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update page.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id}/content (PUT).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_update_resources(self,
        *,
        onenote_resource_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property resources in me.

        Microsoft OneNote API method: /me/onenote/resources/{onenoteResource-id} (PATCH).

        Args:
            onenote_resource_id (required): The unique identifier of onenoteResource
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().resources().by_id(params  # type:ignore
            .get("onenoteResource_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_update_resources_content(self,
        *,
        onenote_resource_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property resources in me.

        Microsoft OneNote API method: /me/onenote/resources/{onenoteResource-id}/content (PUT).

        Args:
            onenote_resource_id (required): The unique identifier of onenoteResource
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().resources().by_id(params  # type:ignore
            .get("onenoteResource_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_update_section_groups(self,
        *,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sectionGroups in me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id} (PATCH).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_update_sections(self,
        *,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id} (PATCH).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_create_section_groups(self,
        *,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create sectionGroup.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_create_sections(self,
        *,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create section.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_delete_section_groups(self,
        *,
        notebook_id: str,
        section_group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sectionGroups for me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (DELETE).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_delete_sections(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_get_count_6c1a(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/notebooks/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().count()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_get_section_groups(self,
        *,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_get_sections(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_list_section_groups(self,
        *,
        notebook_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List sectionGroups.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_list_sections(self,
        *,
        notebook_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List sections.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_update_section_groups(self,
        *,
        notebook_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sectionGroups in me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (PATCH).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_update_sections(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_get_notebook_from_web_url(self, *, request_body: Mapping[str, object] | None = None, **kwargs) -> MSGraphResponse:
        """Invoke action getNotebookFromWebUrl.

        Microsoft OneNote API method: /me/onenote/notebooks/getNotebookFromWebUrl (POST).

        Args:
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        # No parameters
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks()  # type:ignore
            .get_notebook_from_web_url().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_get_recent_notebooks(self,
        *,
        include_personal_notebooks: bool,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getRecentNotebooks.

        Microsoft OneNote API method: /me/onenote/notebooks/getRecentNotebooks(includePersonalNotebooks={includePersonalNotebooks}) (GET).

        Args:
            include_personal_notebooks (required): Usage: includePersonalNotebooks={includePersonalNotebooks}
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if include_personal_notebooks is not None:
            params["includePersonalNotebooks"] = include_personal_notebooks
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks()  # type:ignore
            .get_recent_notebooks(include_personal_notebooks={include_personal_notebooks})()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_copy_notebook(self,
        *,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyNotebook.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/copyNotebook (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).copy_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_create_sections(self,
        *,
        notebook_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_delete_sections(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_get_count_ab55(self,
        *,
        notebook_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/$count (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_get_parent_notebook(self,
        *,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_get_parent_section_group(self,
        *,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_get_section_groups(self,
        *,
        notebook_id: str,
        section_group_id: str,
        section_group_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1} (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            section_group_id1 (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if section_group_id1 is not None:
            params["sectionGroup-id1"] = section_group_id1
            params["sectionGroup_id1"] = section_group_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).section_groups().by_id(params
            .get("sectionGroup_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_get_sections(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_list_section_groups(self,
        *,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_list_sections(self,
        *,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_update_sections(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_section_groups_get_count_ab55(self,
        *,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/$count (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_create_pages(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_delete_pages(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_delete_pages_content(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_get_count_505d(self,
        *,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/$count (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_get_pages(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_get_pages_content(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_get_parent_notebook(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_get_parent_section_group(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_list_pages(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_update_pages(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_update_pages_content(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_pages_get_count_85ea(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_section_groups_sections_pages_get_parent_section(self,
        *,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).section_groups().by_id(params
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_create_pages(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_delete_pages(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_delete_pages_content(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_get_count_1a52(self,
        *,
        notebook_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/$count (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_get_pages(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_get_pages_content(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_get_parent_notebook(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_get_parent_section_group(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_list_pages(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_update_pages(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_update_pages_content(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_pages_get_count_044d(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_pages_get_parent_notebook(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_notebooks_sections_pages_get_parent_section(self,
        *,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from me.

        Microsoft OneNote API method: /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().notebooks().by_id(params  # type:ignore
            .get("notebook_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_operations_get_count_7b8c(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/operations/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().operations().count()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_pages_get_count_d1a4(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/pages/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().count()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_pages_get_parent_notebook(self,
        *,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_pages_get_parent_section(self,
        *,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from me.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id}/parentSection (GET).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_pages_onenote_page_copy_to_section(self,
        *,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_pages_onenote_page_onenote_patch_content(self,
        *,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_pages_onenote_page_preview(self, *, onenote_page_id: str, **kwargs) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /me/onenote/pages/{onenotePage-id}/preview() (GET).

        Args:
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().pages().by_id(params  # type:ignore
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_resources_get_count_d3f1(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/resources/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().resources().count()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_create_sections(self,
        *,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create section.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections (POST).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_delete_sections(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_get_count_e635(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/sectionGroups/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().count()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_get_parent_notebook(self,
        *,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_get_parent_section_group(self,
        *,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_get_section_groups(self,
        *,
        section_group_id: str,
        section_group_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1} (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            section_group_id1 (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if section_group_id1 is not None:
            params["sectionGroup-id1"] = section_group_id1
            params["sectionGroup_id1"] = section_group_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).section_groups().by_id(params
            .get("sectionGroup_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_get_sections(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_list_section_groups(self,
        *,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List sectionGroups.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sectionGroups (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_list_sections(self,
        *,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List sections.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_update_sections(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_section_groups_get_count_ef22(self,
        *,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/$count (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_create_pages(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_delete_pages(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_delete_pages_content(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_get_count_fa35(self,
        *,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/$count (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_get_pages(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_get_pages_content(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_get_parent_notebook(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_get_parent_section_group(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_list_pages(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_update_pages(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_update_pages_content(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_pages_get_count_e774(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_pages_get_parent_notebook(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_section_groups_sections_pages_get_parent_section(self,
        *,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from me.

        Microsoft OneNote API method: /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().section_groups().by_id(params  # type:ignore
            .get("sectionGroup_id", "")).sections().by_id(params
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_create_pages(self,
        *,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create page.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages (POST).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_delete_pages(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_delete_pages_content(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_get_count_dbb4(self, *, param: str | None = None, **kwargs) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/sections/$count (GET).

        Args:
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().count()  # type:ignore
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_get_pages(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_get_pages_content(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_get_parent_notebook(self,
        *,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_get_parent_section_group(self,
        *,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_list_pages(self,
        *,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """List pages.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages (GET).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_update_pages(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_update_pages_content(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_onenote_section_copy_to_notebook(self,
        *,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_onenote_section_copy_to_section_group(self,
        *,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_pages_get_count_bb75(self,
        *,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_pages_get_parent_notebook(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def me_onenote_sections_pages_get_parent_section(self,
        *,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from me.

        Microsoft OneNote API method: /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().onenote().sections().by_id(params  # type:ignore
            .get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_delete_onenote(self,
        *,
        site_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property onenote for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote (DELETE).

        Args:
            site_id (required): The unique identifier of site
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_get_onenote(self,
        *,
        site_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get onenote from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote (GET).

        Args:
            site_id (required): The unique identifier of site
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_update_onenote(self,
        *,
        site_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property onenote in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote (PATCH).

        Args:
            site_id (required): The unique identifier of site
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_create_notebooks(self,
        *,
        site_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to notebooks for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks (POST).

        Args:
            site_id (required): The unique identifier of site
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_create_operations(self,
        *,
        site_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to operations for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/operations (POST).

        Args:
            site_id (required): The unique identifier of site
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().operations().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_create_pages(self,
        *,
        site_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages (POST).

        Args:
            site_id (required): The unique identifier of site
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_create_resources(self,
        *,
        site_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to resources for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/resources (POST).

        Args:
            site_id (required): The unique identifier of site
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().resources().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_create_section_groups(self,
        *,
        site_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sectionGroups for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups (POST).

        Args:
            site_id (required): The unique identifier of site
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_create_sections(self,
        *,
        site_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections (POST).

        Args:
            site_id (required): The unique identifier of site
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_delete_notebooks(self,
        *,
        site_id: str,
        notebook_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property notebooks for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_delete_operations(self,
        *,
        site_id: str,
        onenote_operation_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property operations for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/operations/{onenoteOperation-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            onenote_operation_id (required): The unique identifier of onenoteOperation
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().operations().by_id(params.get("onenoteOperation_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_delete_pages(self,
        *,
        site_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/{onenotePage-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_delete_resources(self,
        *,
        site_id: str,
        onenote_resource_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property resources for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/resources/{onenoteResource-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            onenote_resource_id (required): The unique identifier of onenoteResource
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_delete_section_groups(self,
        *,
        site_id: str,
        section_group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sectionGroups for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_delete_sections(self,
        *,
        site_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_get_notebooks(self,
        *,
        site_id: str,
        notebook_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get notebooks from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_get_operations(self,
        *,
        site_id: str,
        onenote_operation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get operations from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/operations/{onenoteOperation-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_operation_id (required): The unique identifier of onenoteOperation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().operations().by_id(params.get("onenoteOperation_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_get_pages(self,
        *,
        site_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/{onenotePage-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_get_pages_content(self,
        *,
        site_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/{onenotePage-id}/content (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", "")).content()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_get_resources(self,
        *,
        site_id: str,
        onenote_resource_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get resources from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/resources/{onenoteResource-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_resource_id (required): The unique identifier of onenoteResource
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_get_resources_content(self,
        *,
        site_id: str,
        onenote_resource_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property resources from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/resources/{onenoteResource-id}/content (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_resource_id (required): The unique identifier of onenoteResource

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_get_section_groups(self,
        *,
        site_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_get_sections(self,
        *,
        site_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_list_notebooks(self,
        *,
        site_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get notebooks from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_list_operations(self,
        *,
        site_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get operations from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/operations (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().operations().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_list_pages(self,
        *,
        site_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_list_resources(self,
        *,
        site_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get resources from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/resources (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().resources().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_list_section_groups(self,
        *,
        site_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_list_sections(self,
        *,
        site_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_update_notebooks(self,
        *,
        site_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property notebooks in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_update_operations(self,
        *,
        site_id: str,
        onenote_operation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property operations in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/operations/{onenoteOperation-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            onenote_operation_id (required): The unique identifier of onenoteOperation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().operations().by_id(params.get("onenoteOperation_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_update_pages(self,
        *,
        site_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/{onenotePage-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_update_pages_content(self,
        *,
        site_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/{onenotePage-id}/content (PUT).

        Args:
            site_id (required): The unique identifier of site
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_update_resources(self,
        *,
        site_id: str,
        onenote_resource_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property resources in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/resources/{onenoteResource-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            onenote_resource_id (required): The unique identifier of onenoteResource
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_update_resources_content(self,
        *,
        site_id: str,
        onenote_resource_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property resources in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/resources/{onenoteResource-id}/content (PUT).

        Args:
            site_id (required): The unique identifier of site
            onenote_resource_id (required): The unique identifier of onenoteResource
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .content().put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_update_section_groups(self,
        *,
        site_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sectionGroups in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_update_sections(self,
        *,
        site_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_create_section_groups(self,
        *,
        site_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sectionGroups for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_create_sections(self,
        *,
        site_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_delete_section_groups(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sectionGroups for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_delete_sections(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_get_count_fb6b(self,
        *,
        site_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_get_section_groups(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_get_sections(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_list_section_groups(self,
        *,
        site_id: str,
        notebook_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_list_sections(self,
        *,
        site_id: str,
        notebook_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_update_section_groups(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sectionGroups in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_update_sections(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_create_sections(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_delete_sections(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_get_count_52f9(self,
        *,
        site_id: str,
        notebook_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_get_parent_notebook(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", ""))
            .parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_get_parent_section_group(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", ""))
            .parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_get_section_groups(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        section_group_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1} (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            section_group_id1 (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if section_group_id1 is not None:
            params["sectionGroup-id1"] = section_group_id1
            params["sectionGroup_id1"] = section_group_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).section_groups()
            .by_id(params.get("sectionGroup_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_get_sections(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_list_section_groups(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).section_groups()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_list_sections(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_update_sections(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_section_groups_get_count_52f9(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).section_groups()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_create_pages(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_delete_pages(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_get_count_26e6(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_get_pages(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_get_pages_content(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_get_parent_notebook(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).parent_notebook()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_get_parent_section_group(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).parent_section_group()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_list_pages(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_update_pages(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_update_pages_content(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_pages_get_count_56bb(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_section_groups_sections_pages_get_parent_section(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_create_pages(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_delete_pages(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_get_count_6101(self,
        *,
        site_id: str,
        notebook_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_get_pages(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_get_pages_content(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_get_parent_notebook(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).parent_notebook()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_get_parent_section_group(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).parent_section_group()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_list_pages(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_update_pages(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_update_pages_content(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_pages_get_count_9b53(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_pages_get_parent_notebook(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_notebooks_sections_pages_get_parent_section(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_operations_get_count_eadd(self,
        *,
        site_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/operations/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().operations().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_pages_get_count_bfb1(self,
        *,
        site_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_pages_get_parent_notebook(self,
        *,
        site_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_pages_get_parent_section(self,
        *,
        site_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", "")).parent_section()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_resources_get_count_476e(self,
        *,
        site_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/resources/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().resources().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_create_sections(self,
        *,
        site_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections (POST).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_delete_sections(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_get_count_2fdb(self,
        *,
        site_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_get_parent_notebook(self,
        *,
        site_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_get_parent_section_group(self,
        *,
        site_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_get_section_groups(self,
        *,
        site_id: str,
        section_group_id: str,
        section_group_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1} (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            section_group_id1 (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if section_group_id1 is not None:
            params["sectionGroup-id1"] = section_group_id1
            params["sectionGroup_id1"] = section_group_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id1", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_get_sections(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_list_section_groups(self,
        *,
        site_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_list_sections(self,
        *,
        site_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_update_sections(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_section_groups_get_count_2fdb(self,
        *,
        site_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_create_pages(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_delete_pages(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_get_count_2fbc(self,
        *,
        site_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_get_pages(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_get_pages_content(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_get_parent_notebook(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).parent_notebook()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_get_parent_section_group(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", ""))
            .parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_list_pages(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_update_pages(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_update_pages_content(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_pages_get_count_9ecc(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_pages_get_parent_notebook(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_section_groups_sections_pages_get_parent_section(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_create_pages(self,
        *,
        site_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages (POST).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_delete_pages(self,
        *,
        site_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_get_count_5061(self,
        *,
        site_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_get_pages(self,
        *,
        site_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_get_pages_content(self,
        *,
        site_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_get_parent_notebook(self,
        *,
        site_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_get_parent_section_group(self,
        *,
        site_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_list_pages(self,
        *,
        site_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_update_pages(self,
        *,
        site_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_update_pages_content(self,
        *,
        site_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_pages_get_count_a33a(self,
        *,
        site_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_pages_get_parent_notebook(self,
        *,
        site_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).parent_notebook()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_onenote_sections_pages_get_parent_section(self,
        *,
        site_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from sites.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).parent_section()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_get_notebook_from_web_url(self,
        *,
        site_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action getNotebookFromWebUrl.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/getNotebookFromWebUrl (POST).

        Args:
            site_id (required): The unique identifier of site
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().get_notebook_from_web_url()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_get_recent_notebooks(self,
        *,
        site_id: str,
        include_personal_notebooks: bool,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getRecentNotebooks.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/getRecentNotebooks(includePersonalNotebooks={includePersonalNotebooks}) (GET).

        Args:
            site_id (required): The unique identifier of site
            include_personal_notebooks (required): Usage: includePersonalNotebooks={includePersonalNotebooks}
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if include_personal_notebooks is not None:
            params["includePersonalNotebooks"] = include_personal_notebooks
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks()
            .get_recent_notebooks(include_personal_notebooks={include_personal_notebooks})()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_copy_notebook(self,
        *,
        site_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyNotebook.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/copyNotebook (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).copy_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        site_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        site_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            site_id (required): The unique identifier of site
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_pages_onenote_page_copy_to_section(self,
        *,
        site_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            site_id (required): The unique identifier of site
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .copy_to_section().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_pages_onenote_page_onenote_patch_content(self,
        *,
        site_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            site_id (required): The unique identifier of site
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .onenote_patch_content().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_pages_onenote_page_preview(self,
        *,
        site_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /sites/{site-id}/onenote/pages/{onenotePage-id}/preview() (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", "")).preview()()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", ""))
            .copy_to_section_group().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        site_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            site_id (required): The unique identifier of site
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_sections_onenote_section_copy_to_notebook(self,
        *,
        site_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .copy_to_notebook().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_sections_onenote_section_copy_to_section_group(self,
        *,
        site_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .copy_to_section_group().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        site_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        site_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def sites_site_onenote_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        site_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            site_id (required): The unique identifier of site
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if site_id is not None:
            params["site-id"] = site_id
            params["site_id"] = site_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().sites().by_id(params.get("site_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_delete_onenote(self,
        *,
        user_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property onenote for users.

        Microsoft OneNote API method: /users/{user-id}/onenote (DELETE).

        Args:
            user_id (required): The unique identifier of user
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_get_onenote(self,
        *,
        user_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get onenote from users.

        Microsoft OneNote API method: /users/{user-id}/onenote (GET).

        Args:
            user_id (required): The unique identifier of user
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_update_onenote(self,
        *,
        user_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property onenote in users.

        Microsoft OneNote API method: /users/{user-id}/onenote (PATCH).

        Args:
            user_id (required): The unique identifier of user
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_create_notebooks(self,
        *,
        user_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to notebooks for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks (POST).

        Args:
            user_id (required): The unique identifier of user
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_create_operations(self,
        *,
        user_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to operations for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/operations (POST).

        Args:
            user_id (required): The unique identifier of user
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().operations().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_create_pages(self,
        *,
        user_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages (POST).

        Args:
            user_id (required): The unique identifier of user
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_create_resources(self,
        *,
        user_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to resources for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/resources (POST).

        Args:
            user_id (required): The unique identifier of user
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().resources().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_create_section_groups(self,
        *,
        user_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sectionGroups for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups (POST).

        Args:
            user_id (required): The unique identifier of user
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_create_sections(self,
        *,
        user_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections (POST).

        Args:
            user_id (required): The unique identifier of user
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_delete_notebooks(self,
        *,
        user_id: str,
        notebook_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property notebooks for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_delete_operations(self,
        *,
        user_id: str,
        onenote_operation_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property operations for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/operations/{onenoteOperation-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            onenote_operation_id (required): The unique identifier of onenoteOperation
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().operations().by_id(params.get("onenoteOperation_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_delete_pages(self,
        *,
        user_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_delete_pages_content(self,
        *,
        user_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id}/content (DELETE).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", "")).content()
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_delete_resources(self,
        *,
        user_id: str,
        onenote_resource_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property resources for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/resources/{onenoteResource-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            onenote_resource_id (required): The unique identifier of onenoteResource
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_delete_resources_content(self,
        *,
        user_id: str,
        onenote_resource_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property resources in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/resources/{onenoteResource-id}/content (DELETE).

        Args:
            user_id (required): The unique identifier of user
            onenote_resource_id (required): The unique identifier of onenoteResource
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_delete_section_groups(self,
        *,
        user_id: str,
        section_group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sectionGroups for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_delete_sections(self,
        *,
        user_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_get_notebooks(self,
        *,
        user_id: str,
        notebook_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get notebooks from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_get_operations(self,
        *,
        user_id: str,
        onenote_operation_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get operations from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/operations/{onenoteOperation-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_operation_id (required): The unique identifier of onenoteOperation
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().operations().by_id(params.get("onenoteOperation_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_get_pages(self,
        *,
        user_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_get_pages_content(self,
        *,
        user_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id}/content (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", "")).content()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_get_resources(self,
        *,
        user_id: str,
        onenote_resource_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get resources from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/resources/{onenoteResource-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_resource_id (required): The unique identifier of onenoteResource
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_get_resources_content(self,
        *,
        user_id: str,
        onenote_resource_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property resources from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/resources/{onenoteResource-id}/content (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_resource_id (required): The unique identifier of onenoteResource

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_get_section_groups(self,
        *,
        user_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_get_sections(self,
        *,
        user_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_list_notebooks(self,
        *,
        user_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get notebooks from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_list_operations(self,
        *,
        user_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get operations from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/operations (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().operations().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_list_pages(self,
        *,
        user_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_list_resources(self,
        *,
        user_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get resources from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/resources (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().resources().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_list_section_groups(self,
        *,
        user_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_list_sections(self,
        *,
        user_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_update_notebooks(self,
        *,
        user_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property notebooks in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_update_operations(self,
        *,
        user_id: str,
        onenote_operation_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property operations in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/operations/{onenoteOperation-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            onenote_operation_id (required): The unique identifier of onenoteOperation
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_operation_id is not None:
            params["onenoteOperation-id"] = onenote_operation_id
            params["onenoteOperation_id"] = onenote_operation_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().operations().by_id(params.get("onenoteOperation_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_update_pages(self,
        *,
        user_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_update_pages_content(self,
        *,
        user_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id}/content (PUT).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_update_resources(self,
        *,
        user_id: str,
        onenote_resource_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property resources in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/resources/{onenoteResource-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            onenote_resource_id (required): The unique identifier of onenoteResource
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_update_resources_content(self,
        *,
        user_id: str,
        onenote_resource_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property resources in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/resources/{onenoteResource-id}/content (PUT).

        Args:
            user_id (required): The unique identifier of user
            onenote_resource_id (required): The unique identifier of onenoteResource
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_resource_id is not None:
            params["onenoteResource-id"] = onenote_resource_id
            params["onenoteResource_id"] = onenote_resource_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().resources().by_id(params.get("onenoteResource_id", ""))
            .content().put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_update_section_groups(self,
        *,
        user_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sectionGroups in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_update_sections(self,
        *,
        user_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_create_section_groups(self,
        *,
        user_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sectionGroups for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_create_sections(self,
        *,
        user_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_delete_section_groups(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sectionGroups for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_delete_sections(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_get_count_af06(self,
        *,
        user_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_get_section_groups(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_get_sections(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_list_section_groups(self,
        *,
        user_id: str,
        notebook_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_list_sections(self,
        *,
        user_id: str,
        notebook_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_update_section_groups(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sectionGroups in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_update_sections(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_create_sections(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_delete_sections(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_get_count_2e9f(self,
        *,
        user_id: str,
        notebook_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_get_parent_notebook(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", ""))
            .parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_get_parent_section_group(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", ""))
            .parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_get_section_groups(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        section_group_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1} (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            section_group_id1 (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if section_group_id1 is not None:
            params["sectionGroup-id1"] = section_group_id1
            params["sectionGroup_id1"] = section_group_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).section_groups()
            .by_id(params.get("sectionGroup_id1", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_get_sections(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_list_section_groups(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).section_groups()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_list_sections(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_update_sections(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_section_groups_get_count_2e9f(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).section_groups()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_create_pages(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_delete_pages(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_delete_pages_content(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_get_count_2e73(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_get_pages(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_get_pages_content(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_get_parent_notebook(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).parent_notebook()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_get_parent_section_group(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).parent_section_group()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_list_pages(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_update_pages(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_update_pages_content(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_pages_get_count_a323(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_section_groups_sections_pages_get_parent_section(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_create_pages(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_delete_pages(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_delete_pages_content(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_get_count_2f79(self,
        *,
        user_id: str,
        notebook_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_get_pages(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_get_pages_content(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_get_parent_notebook(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).parent_notebook()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_get_parent_section_group(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).parent_section_group()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_list_pages(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_update_pages(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_update_pages_content(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_pages_get_count_c5e5(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_pages_get_parent_notebook(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_notebooks_sections_pages_get_parent_section(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_operations_get_count_adfa(self,
        *,
        user_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/operations/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().operations().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_pages_get_count_b080(self,
        *,
        user_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_pages_get_parent_notebook(self,
        *,
        user_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_pages_get_parent_section(self,
        *,
        user_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id}/parentSection (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", "")).parent_section()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_resources_get_count_dba6(self,
        *,
        user_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/resources/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().resources().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_create_sections(self,
        *,
        user_id: str,
        section_group_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to sections for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections (POST).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_delete_sections(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property sections for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", ""))
            .delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_get_count_497a(self,
        *,
        user_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_get_parent_notebook(self,
        *,
        user_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_get_parent_section_group(self,
        *,
        user_id: str,
        section_group_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_get_section_groups(self,
        *,
        user_id: str,
        section_group_id: str,
        section_group_id1: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1} (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            section_group_id1 (required): The unique identifier of sectionGroup
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if section_group_id1 is not None:
            params["sectionGroup-id1"] = section_group_id1
            params["sectionGroup_id1"] = section_group_id1
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id1", ""))
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_get_sections(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_list_section_groups(self,
        *,
        user_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sectionGroups from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .section_groups().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_list_sections(self,
        *,
        user_id: str,
        section_group_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get sections from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_update_sections(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property sections in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_section_groups_get_count_497a(self,
        *,
        user_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .section_groups().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_create_pages(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (POST).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_delete_pages(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_delete_pages_content(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_get_count_6826(self,
        *,
        user_id: str,
        section_group_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_get_pages(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_get_pages_content(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_get_parent_notebook(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).parent_notebook()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_get_parent_section_group(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", ""))
            .parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_list_pages(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_update_pages(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_update_pages_content(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_pages_get_count_dfde(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().count()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_pages_get_parent_notebook(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_section_groups_sections_pages_get_parent_section(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).parent_section().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_create_pages(self,
        *,
        user_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Create new navigation property to pages for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages (POST).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_delete_pages(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete navigation property pages for users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (DELETE).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_delete_pages_content(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        if_match: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Delete content for the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (DELETE).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            if_match (optional): ETag

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if if_match is not None:
            params["If-Match"] = if_match
            params["If_Match"] = if_match
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).content().delete(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_get_count_8b0b(self,
        *,
        user_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_get_pages(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_get_pages_content(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Get content for the navigation property pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).content().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_get_parent_notebook(self,
        *,
        user_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .parent_notebook().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_get_parent_section_group(self,
        *,
        user_id: str,
        onenote_section_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSectionGroup from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .parent_section_group().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_list_pages(self,
        *,
        user_id: str,
        onenote_section_id: str,
        param: str | None = None,
        dollar_orderby: list[str] | None = None,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get pages from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):
            dollar_orderby (optional): Order items by property values
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if dollar_orderby is not None:
            _val = ",".join(dollar_orderby) if isinstance(dollar_orderby, list) else str(dollar_orderby)
            params["$orderby"] = _val
            params["dollar_orderby"] = _val
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_update_pages(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id} (PATCH).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", ""))
            .patch(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_update_pages_content(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Update content for the navigation property pages in users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content (PUT).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).content()
            .put(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_pages_get_count_17eb(self,
        *,
        user_id: str,
        onenote_section_id: str,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get the number of the resource.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/$count (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .count().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_pages_get_parent_notebook(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentNotebook from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).parent_notebook()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_onenote_sections_pages_get_parent_section(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        dollar_select: list[str] | None = None,
        dollar_expand: list[str] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Get parentSection from users.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            dollar_select (optional): Select properties to be returned
            dollar_expand (optional): Expand related entities

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if dollar_select is not None:
            _val = ",".join(dollar_select) if isinstance(dollar_select, list) else str(dollar_select)
            params["$select"] = _val
            params["dollar_select"] = _val
        if dollar_expand is not None:
            _val = ",".join(dollar_expand) if isinstance(dollar_expand, list) else str(dollar_expand)
            params["$expand"] = _val
            params["dollar_expand"] = _val
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).parent_section()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_get_notebook_from_web_url(self,
        *,
        user_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action getNotebookFromWebUrl.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/getNotebookFromWebUrl (POST).

        Args:
            user_id (required): The unique identifier of user
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().get_notebook_from_web_url()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_get_recent_notebooks(self,
        *,
        user_id: str,
        include_personal_notebooks: bool,
        param: str | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function getRecentNotebooks.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/getRecentNotebooks(includePersonalNotebooks={includePersonalNotebooks}) (GET).

        Args:
            user_id (required): The unique identifier of user
            include_personal_notebooks (required): Usage: includePersonalNotebooks={includePersonalNotebooks}
            param (optional):

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if include_personal_notebooks is not None:
            params["includePersonalNotebooks"] = include_personal_notebooks
        if param is not None:
            params["param"] = param
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks()
            .get_recent_notebooks(include_personal_notebooks={include_personal_notebooks})()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_copy_notebook(self,
        *,
        user_id: str,
        notebook_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyNotebook.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/copyNotebook (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).copy_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        user_id: str,
        notebook_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", ""))
            .section_groups().by_id(params.get("sectionGroup_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).copy_to_section_group()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        user_id: str,
        notebook_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            user_id (required): The unique identifier of user
            notebook_id (required): The unique identifier of notebook
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if notebook_id is not None:
            params["notebook-id"] = notebook_id
            params["notebook_id"] = notebook_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().notebooks().by_id(params.get("notebook_id", "")).sections()
            .by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_pages_onenote_page_copy_to_section(self,
        *,
        user_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .copy_to_section().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_pages_onenote_page_onenote_patch_content(self,
        *,
        user_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", ""))
            .onenote_patch_content().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_pages_onenote_page_preview(self,
        *,
        user_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /users/{user-id}/onenote/pages/{onenotePage-id}/preview() (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().pages().by_id(params.get("onenotePage_id", "")).preview()()
            .get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).copy_to_notebook()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", ""))
            .copy_to_section_group().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        user_id: str,
        section_group_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            user_id (required): The unique identifier of user
            section_group_id (required): The unique identifier of sectionGroup
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if section_group_id is not None:
            params["sectionGroup-id"] = section_group_id
            params["sectionGroup_id"] = section_group_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().section_groups().by_id(params.get("sectionGroup_id", ""))
            .sections().by_id(params.get("onenoteSection_id", "")).pages().by_id(params
            .get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_sections_onenote_section_copy_to_notebook(self,
        *,
        user_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToNotebook.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/copyToNotebook (POST).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .copy_to_notebook().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_sections_onenote_section_copy_to_section_group(self,
        *,
        user_id: str,
        onenote_section_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSectionGroup.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/copyToSectionGroup (POST).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", ""))
            .copy_to_section_group().post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action copyToSection.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection (POST).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).copy_to_section()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        request_body: Mapping[str, object] | None = None,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke action onenotePatchContent.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent (POST).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage
            request_body (optional): Request body data

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).onenote_patch_content()
            .post(request_body or {}, params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )

    def users_user_onenote_sections_onenote_section_pages_onenote_page_preview(self,
        *,
        user_id: str,
        onenote_section_id: str,
        onenote_page_id: str,
        **kwargs,
    ) -> MSGraphResponse:
        """Invoke function preview.

        Microsoft OneNote API method: /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview() (GET).

        Args:
            user_id (required): The unique identifier of user
            onenote_section_id (required): The unique identifier of onenoteSection
            onenote_page_id (required): The unique identifier of onenotePage

        Returns:
            MSGraphResponse: Standardized response wrapper

        """
        params: dict[str, object] = {}
        if user_id is not None:
            params["user-id"] = user_id
            params["user_id"] = user_id
        if onenote_section_id is not None:
            params["onenoteSection-id"] = onenote_section_id
            params["onenoteSection_id"] = onenote_section_id
        if onenote_page_id is not None:
            params["onenotePage-id"] = onenote_page_id
            params["onenotePage_id"] = onenote_page_id
        if kwargs:
            for k, v in kwargs.items():
                if v is None:
                    continue
                # CSV-encode OData list params; mirror hyphenated -> snake
                if k in ("$select", "$expand") and isinstance(v, list):
                    _vv = ",".join(v)
                    params[k] = _vv
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = _vv
                else:
                    params[k] = v
                    _mk = self._sanitize_py_name(k)
                    if _mk != k:
                        params[_mk] = v

        try:
            response = (
            self.client.me().users().by_id(params.get("user_id", ""))  # type:ignore
            .onenote().sections().by_id(params.get("onenoteSection_id", "")).pages()
            .by_id(params.get("onenotePage_id", "")).preview()().get(params=params)
            )
            return self._handle_response(response)
        except Exception as e:
            return MSGraphResponse(
                success=False,
                error=f"Microsoft OneNote API API call failed: {e!s}",
            )
