

import json
import logging
from dataclasses import asdict
from typing import Any, Dict, List, Mapping, Optional

from kiota_abstractions.base_request_configuration import (  # type: ignore
    RequestConfiguration,
)
from msgraph.generated.users.item.onenote.notebooks.notebooks_request_builder import (  # type: ignore
    NotebooksRequestBuilder,
)

# Import MS Graph specific query parameter classes for OneNote
from msgraph.generated.users.item.onenote.onenote_request_builder import (  # type: ignore
    OnenoteRequestBuilder,
)
from msgraph.generated.users.item.onenote.operations.operations_request_builder import (  # type: ignore
    OperationsRequestBuilder,
)
from msgraph.generated.users.item.onenote.pages.pages_request_builder import (  # type: ignore
    PagesRequestBuilder,
)
from msgraph.generated.users.item.onenote.resources.resources_request_builder import (  # type: ignore
    ResourcesRequestBuilder,
)
from msgraph.generated.users.item.onenote.sections.sections_request_builder import (  # type: ignore
    SectionsRequestBuilder,
)

from app.sources.client.microsoft.microsoft import MSGraphClient


# OneNote-specific response wrapper
class OneNoteResponse:
    """Standardized OneNote API response wrapper."""
    success: bool
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    message: Optional[str] = None

    def __init__(self, success: bool, data: Optional[Dict[str, Any]] = None, error: Optional[str] = None, message: Optional[str] = None) -> None:
        self.success = success
        self.data = data
        self.error = error
        self.message = message

    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)

    def to_json(self) -> str:
        return json.dumps(self.to_dict())

# Set up logger
logger = logging.getLogger(__name__)

class OneNoteDataSource:
    """
    Comprehensive Microsoft OneNote API client with complete Notebooks, Sections, and Pages coverage.

    Features:
    - Complete OneNote API coverage with 443 methods organized by operation type
    - Support for Personal OneNote, User OneNote, Group OneNote, and Site OneNote
    - Complete Notebook operations: create, read, update, delete, list, copy
    - Complete Section operations: create, read, update, delete, list, copy
    - Complete Section Group operations: create, read, update, delete, list
    - Complete Page operations: create, read, update, delete, list, copy
    - Content operations: HTML content retrieval and manipulation
    - Preview operations: Page previews and thumbnails
    - Resource operations: File attachments and embedded resources
    - Search capabilities across notebooks, sections, and pages
    - Microsoft Graph SDK integration with OneNote-specific optimizations
    - Async snake_case method names for all operations
    - Standardized OneNoteResponse format for all responses
    - Comprehensive error handling and OneNote-specific response processing

    EXCLUDED OPERATIONS (modify EXCLUDED_KEYWORDS list to change):
    - OneDrive operations (drive, drives, items)
    - Teams operations (chats, teams, channels)
    - SharePoint operations (sites, lists, document libraries)
    - Outlook operations (messages, mailFolders)
    - Calendar operations (events, calendars)
    - Planner operations (plans, tasks, buckets)
    - Directory operations (directoryObjects, devices)
    - Admin operations (admin, compliance, security)
    - Device management operations
    - Communications operations

    Operation Types:
    - Notebook operations: Complete CRUD for notebooks
    - Section operations: Section management and organization
    - Section Group operations: Section group hierarchy management
    - Page operations: Page content and metadata operations
    - Content operations: HTML content and formatting
    - Resource operations: File attachments and media
    - Operations operations: Long-running operation tracking
    - General operations: Base OneNote functionality
    """

    def __init__(self, client: MSGraphClient) -> None:
        """Initialize with Microsoft Graph SDK client optimized for OneNote."""
        self.client = client.get_client().get_ms_graph_service_client()
        if not hasattr(self.client, "me"):
            raise ValueError("Client must be a Microsoft Graph SDK client")
        logger.info("OneNote client initialized with comprehensive method coverage")

    def _handle_onenote_response(self, response: object) -> OneNoteResponse:
        """Handle OneNote API response with comprehensive error handling."""
        try:
            if response is None:
                return OneNoteResponse(success=False, error="Empty response from OneNote API")

            success = True
            error_msg = None

            # Enhanced error response handling for OneNote
            if hasattr(response, 'error'):
                success = False
                error_msg = str(response.error)
            elif isinstance(response, dict) and 'error' in response:
                success = False
                error_info = response['error']
                if isinstance(error_info, dict):
                    error_msg = f"{error_info.get('code', 'Unknown')}: {error_info.get('message', 'No message')}"
                else:
                    error_msg = str(error_info)
            elif hasattr(response, 'code') and hasattr(response, 'message'):
                success = False
                error_msg = f"{response.code}: {response.message}"

            return OneNoteResponse(
                success=success,
                data=response,
                error=error_msg,
            )
        except Exception as e:
            logger.error(f"Error handling OneNote response: {e}")
            return OneNoteResponse(success=False, error=str(e))

    def get_data_source(self) -> 'OneNoteDataSource':
        """Get the underlying OneNote client."""
        return self

    # ========== GENERAL OPERATIONS (9 methods) ==========

    async def groups_delete_onenote(
        self,
        group_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property onenote for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote
        Operation type: general
        Args:
            group_id (str, required): OneNote group id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_get_onenote(
        self,
        group_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get onenote from groups.
        OneNote operation: GET /groups/{group-id}/onenote
        Operation type: general
        Args:
            group_id (str, required): OneNote group id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_update_onenote(
        self,
        group_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property onenote in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote
        Operation type: general
        Args:
            group_id (str, required): OneNote group id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_delete_onenote(
        self,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property onenote for me.
        OneNote operation: DELETE /me/onenote
        Operation type: general
        Args:
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_get_onenote(
        self,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get onenote from me.
        OneNote operation: GET /me/onenote
        Operation type: general
        Args:
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_update_onenote(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property onenote in me.
        OneNote operation: PATCH /me/onenote
        Operation type: general
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_delete_onenote(
        self,
        user_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property onenote for users.
        OneNote operation: DELETE /users/{user-id}/onenote
        Operation type: general
        Args:
            user_id (str, required): OneNote user id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_get_onenote(
        self,
        user_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get onenote from users.
        OneNote operation: GET /users/{user-id}/onenote
        Operation type: general
        Args:
            user_id (str, required): OneNote user id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_update_onenote(
        self,
        user_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property onenote in users.
        OneNote operation: PATCH /users/{user-id}/onenote
        Operation type: general
        Args:
            user_id (str, required): OneNote user id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    # ========== NOTEBOOKS OPERATIONS (180 methods) ==========

    async def groups_onenote_create_notebooks(
        self,
        group_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to notebooks for groups.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_delete_notebooks(
        self,
        group_id: str,
        notebook_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property notebooks for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/notebooks/{notebook-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_get_notebooks(
        self,
        group_id: str,
        notebook_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get notebooks from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_update_notebooks(
        self,
        group_id: str,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property notebooks in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/notebooks/{notebook-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_copy_notebook(
        self,
        group_id: str,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyNotebook.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/copyNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).copy_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_create_section_groups(
        self,
        group_id: str,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sectionGroups for groups.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_delete_section_groups(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sectionGroups for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_get_section_groups(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_update_section_groups(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sectionGroups in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_get_parent_notebook(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_get_parent_section_group(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_get_section_groups(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        sectionGroup_id1: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            sectionGroup_id1 (str, required): OneNote sectionGroup id1 identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).section_groups.by_section_group_id(sectionGroup_id1).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_create_sections(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sections for groups.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_delete_sections(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_get_sections(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_update_sections(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_create_pages(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for groups.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_delete_pages(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_get_pages(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_update_pages(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_delete_pages_content(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_get_pages_content(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_update_pages_content(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in groups.
        OneNote operation: PUT /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_pages_get_parent_section(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_get_parent_notebook(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_section_groups_sections_get_parent_section_group(
        self,
        group_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_create_sections(
        self,
        group_id: str,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sections for groups.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sections
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_delete_sections(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_get_sections(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_update_sections(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_create_pages(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for groups.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_delete_pages(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_get_pages(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_update_pages(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_delete_pages_content(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_get_pages_content(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_update_pages_content(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in groups.
        OneNote operation: PUT /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_pages_get_parent_notebook(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_pages_get_parent_section(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_preview(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_get_parent_notebook(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_notebooks_sections_get_parent_section_group(
        self,
        group_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from groups.
        OneNote operation: GET /groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_pages_get_parent_notebook(
        self,
        group_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_get_parent_notebook(
        self,
        group_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_pages_get_parent_notebook(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_get_parent_notebook(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_sections_onenote_section_copy_to_notebook(
        self,
        group_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /groups/{group-id}/onenote/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_pages_get_parent_notebook(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_get_parent_notebook(
        self,
        group_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_create_notebooks(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create notebook.
        OneNote operation: POST /me/onenote/notebooks
        Operation type: notebooks
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_delete_notebooks(
        self,
        notebook_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property notebooks for me.
        OneNote operation: DELETE /me/onenote/notebooks/{notebook-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_get_notebooks(
        self,
        notebook_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get notebook.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_update_notebooks(
        self,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property notebooks in me.
        OneNote operation: PATCH /me/onenote/notebooks/{notebook-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_copy_notebook(
        self,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyNotebook.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/copyNotebook
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).copy_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_create_section_groups(
        self,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create sectionGroup.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sectionGroups
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_delete_section_groups(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sectionGroups for me.
        OneNote operation: DELETE /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_get_section_groups(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_update_section_groups(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sectionGroups in me.
        OneNote operation: PATCH /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_get_parent_notebook(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_get_parent_section_group(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_get_section_groups(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        sectionGroup_id1: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            sectionGroup_id1 (str, required): OneNote sectionGroup id1 identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).section_groups.by_section_group_id(sectionGroup_id1).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_create_sections(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sections for me.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_delete_sections(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for me.
        OneNote operation: DELETE /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_get_sections(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_update_sections(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in me.
        OneNote operation: PATCH /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_create_pages(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for me.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_delete_pages(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for me.
        OneNote operation: DELETE /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_get_pages(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_update_pages(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in me.
        OneNote operation: PATCH /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_delete_pages_content(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in me.
        OneNote operation: DELETE /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_get_pages_content(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_update_pages_content(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in me.
        OneNote operation: PUT /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_pages_get_parent_section(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_get_parent_notebook(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_section_groups_sections_get_parent_section_group(
        self,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_create_sections(
        self,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create section.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sections
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_delete_sections(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for me.
        OneNote operation: DELETE /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_get_sections(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_update_sections(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in me.
        OneNote operation: PATCH /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_create_pages(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for me.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_delete_pages(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for me.
        OneNote operation: DELETE /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_get_pages(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_update_pages(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in me.
        OneNote operation: PATCH /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_delete_pages_content(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in me.
        OneNote operation: DELETE /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_get_pages_content(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_update_pages_content(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in me.
        OneNote operation: PUT /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_pages_get_parent_notebook(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_pages_get_parent_section(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_preview(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_get_parent_notebook(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_notebooks_sections_get_parent_section_group(
        self,
        notebook_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from me.
        OneNote operation: GET /me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: notebooks
        Args:
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_pages_get_parent_notebook(
        self,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_get_parent_notebook(
        self,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook
        Operation type: notebooks
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_pages_get_parent_notebook(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_get_parent_notebook(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_onenote_section_copy_to_notebook(
        self,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /me/onenote/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_pages_get_parent_notebook(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_get_parent_notebook(
        self,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from me.
        OneNote operation: GET /me/onenote/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_create_notebooks(
        self,
        user_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to notebooks for users.
        OneNote operation: POST /users/{user-id}/onenote/notebooks
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_delete_notebooks(
        self,
        user_id: str,
        notebook_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property notebooks for users.
        OneNote operation: DELETE /users/{user-id}/onenote/notebooks/{notebook-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_get_notebooks(
        self,
        user_id: str,
        notebook_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get notebooks from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_update_notebooks(
        self,
        user_id: str,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property notebooks in users.
        OneNote operation: PATCH /users/{user-id}/onenote/notebooks/{notebook-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_copy_notebook(
        self,
        user_id: str,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyNotebook.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/copyNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).copy_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_create_section_groups(
        self,
        user_id: str,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sectionGroups for users.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_delete_section_groups(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sectionGroups for users.
        OneNote operation: DELETE /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_get_section_groups(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_update_section_groups(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sectionGroups in users.
        OneNote operation: PATCH /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_get_parent_notebook(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_get_parent_section_group(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_get_section_groups(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        sectionGroup_id1: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            sectionGroup_id1 (str, required): OneNote sectionGroup id1 identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).section_groups.by_section_group_id(sectionGroup_id1).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_create_sections(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sections for users.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_delete_sections(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for users.
        OneNote operation: DELETE /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_get_sections(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_update_sections(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in users.
        OneNote operation: PATCH /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_create_pages(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for users.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_delete_pages(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for users.
        OneNote operation: DELETE /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_get_pages(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_update_pages(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in users.
        OneNote operation: PATCH /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_delete_pages_content(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in users.
        OneNote operation: DELETE /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_get_pages_content(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_update_pages_content(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in users.
        OneNote operation: PUT /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_pages_get_parent_section(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_get_parent_notebook(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_section_groups_sections_get_parent_section_group(
        self,
        user_id: str,
        notebook_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_create_sections(
        self,
        user_id: str,
        notebook_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sections for users.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sections
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_delete_sections(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for users.
        OneNote operation: DELETE /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_get_sections(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_update_sections(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in users.
        OneNote operation: PATCH /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_create_pages(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for users.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_delete_pages(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for users.
        OneNote operation: DELETE /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_get_pages(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_update_pages(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in users.
        OneNote operation: PATCH /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_delete_pages_content(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in users.
        OneNote operation: DELETE /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_get_pages_content(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_update_pages_content(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in users.
        OneNote operation: PUT /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_pages_get_parent_notebook(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_pages_get_parent_section(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_preview(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_get_parent_notebook(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_notebooks_sections_get_parent_section_group(
        self,
        user_id: str,
        notebook_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from users.
        OneNote operation: GET /users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            notebook_id (str, required): OneNote notebook id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = NotebooksRequestBuilder.NotebooksRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = NotebooksRequestBuilder.NotebooksRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.notebooks.by_notebook_id(notebook_id).sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_pages_get_parent_notebook(
        self,
        user_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_get_parent_notebook(
        self,
        user_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_pages_get_parent_notebook(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_get_parent_notebook(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_sections_onenote_section_copy_to_notebook(
        self,
        user_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToNotebook.
        OneNote operation: POST /users/{user-id}/onenote/sections/{onenoteSection-id}/copyToNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).copy_to_notebook.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_pages_get_parent_notebook(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_get_parent_notebook(
        self,
        user_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentNotebook from users.
        OneNote operation: GET /users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook
        Operation type: notebooks
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).parent_notebook.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    # ========== SECTIONS OPERATIONS (51 methods) ==========

    async def groups_group_onenote_pages_onenote_page_copy_to_section(
        self,
        group_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /groups/{group-id}/onenote/pages/{onenotePage-id}/copyToSection
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_pages_get_parent_section(
        self,
        group_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from groups.
        OneNote operation: GET /groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_create_sections(
        self,
        group_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sections for groups.
        OneNote operation: POST /groups/{group-id}/onenote/sections
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_delete_sections(
        self,
        group_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/sections/{onenoteSection-id}
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_get_sections(
        self,
        group_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sections/{onenoteSection-id}
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_update_sections(
        self,
        group_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/sections/{onenoteSection-id}
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_create_pages(
        self,
        group_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for groups.
        OneNote operation: POST /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_delete_pages(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_get_pages(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_update_pages(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_delete_pages_content(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_get_pages_content(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_update_pages_content(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in groups.
        OneNote operation: PUT /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_pages_get_parent_section(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_sections_onenote_section_pages_onenote_page_preview(
        self,
        group_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: sections
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_pages_onenote_page_copy_to_section(
        self,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /me/onenote/pages/{onenotePage-id}/copyToSection
        Operation type: sections
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_pages_get_parent_section(
        self,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from me.
        OneNote operation: GET /me/onenote/pages/{onenotePage-id}/parentSection
        Operation type: sections
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_create_sections(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sections for me.
        OneNote operation: POST /me/onenote/sections
        Operation type: sections
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_delete_sections(
        self,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for me.
        OneNote operation: DELETE /me/onenote/sections/{onenoteSection-id}
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_get_sections(
        self,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get section.
        OneNote operation: GET /me/onenote/sections/{onenoteSection-id}
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_update_sections(
        self,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in me.
        OneNote operation: PATCH /me/onenote/sections/{onenoteSection-id}
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_create_pages(
        self,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create page.
        OneNote operation: POST /me/onenote/sections/{onenoteSection-id}/pages
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_delete_pages(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for me.
        OneNote operation: DELETE /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_get_pages(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from me.
        OneNote operation: GET /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_update_pages(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in me.
        OneNote operation: PATCH /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_delete_pages_content(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in me.
        OneNote operation: DELETE /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_get_pages_content(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from me.
        OneNote operation: GET /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_update_pages_content(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in me.
        OneNote operation: PUT /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_pages_get_parent_section(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from me.
        OneNote operation: GET /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_onenote_section_pages_onenote_page_preview(
        self,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: sections
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_pages_onenote_page_copy_to_section(
        self,
        user_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /users/{user-id}/onenote/pages/{onenotePage-id}/copyToSection
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_pages_get_parent_section(
        self,
        user_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from users.
        OneNote operation: GET /users/{user-id}/onenote/pages/{onenotePage-id}/parentSection
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_create_sections(
        self,
        user_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sections for users.
        OneNote operation: POST /users/{user-id}/onenote/sections
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_delete_sections(
        self,
        user_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for users.
        OneNote operation: DELETE /users/{user-id}/onenote/sections/{onenoteSection-id}
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_get_sections(
        self,
        user_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from users.
        OneNote operation: GET /users/{user-id}/onenote/sections/{onenoteSection-id}
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_update_sections(
        self,
        user_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in users.
        OneNote operation: PATCH /users/{user-id}/onenote/sections/{onenoteSection-id}
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_create_pages(
        self,
        user_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for users.
        OneNote operation: POST /users/{user-id}/onenote/sections/{onenoteSection-id}/pages
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_delete_pages(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for users.
        OneNote operation: DELETE /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_get_pages(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from users.
        OneNote operation: GET /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_update_pages(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in users.
        OneNote operation: PATCH /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_delete_pages_content(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in users.
        OneNote operation: DELETE /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_get_pages_content(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from users.
        OneNote operation: GET /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_update_pages_content(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in users.
        OneNote operation: PUT /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_pages_get_parent_section(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from users.
        OneNote operation: GET /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_sections_onenote_section_pages_onenote_page_preview(
        self,
        user_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: sections
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    # ========== SECTIONGROUPS OPERATIONS (75 methods) ==========

    async def groups_onenote_create_section_groups(
        self,
        group_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sectionGroups for groups.
        OneNote operation: POST /groups/{group-id}/onenote/sectionGroups
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_delete_section_groups(
        self,
        group_id: str,
        sectionGroup_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sectionGroups for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_get_section_groups(
        self,
        group_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_update_section_groups(
        self,
        group_id: str,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sectionGroups in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_get_parent_section_group(
        self,
        group_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_get_section_groups(
        self,
        group_id: str,
        sectionGroup_id: str,
        sectionGroup_id1: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            sectionGroup_id1 (str, required): OneNote sectionGroup id1 identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).section_groups.by_section_group_id(sectionGroup_id1).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_create_sections(
        self,
        group_id: str,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sections for groups.
        OneNote operation: POST /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_delete_sections(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_get_sections(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_update_sections(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_create_pages(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for groups.
        OneNote operation: POST /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_delete_pages(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_get_pages(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_update_pages(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_delete_pages_content(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_get_pages_content(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_update_pages_content(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in groups.
        OneNote operation: PUT /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_pages_get_parent_section(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_section_groups_sections_get_parent_section_group(
        self,
        group_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_sections_onenote_section_copy_to_section_group(
        self,
        group_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /groups/{group-id}/onenote/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_sections_get_parent_section_group(
        self,
        group_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from groups.
        OneNote operation: GET /groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: sectionGroups
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_create_section_groups(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sectionGroups for me.
        OneNote operation: POST /me/onenote/sectionGroups
        Operation type: sectionGroups
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_delete_section_groups(
        self,
        sectionGroup_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sectionGroups for me.
        OneNote operation: DELETE /me/onenote/sectionGroups/{sectionGroup-id}
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_get_section_groups(
        self,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroup.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_update_section_groups(
        self,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sectionGroups in me.
        OneNote operation: PATCH /me/onenote/sectionGroups/{sectionGroup-id}
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_get_parent_section_group(
        self,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from me.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_get_section_groups(
        self,
        sectionGroup_id: str,
        sectionGroup_id1: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from me.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            sectionGroup_id1 (str, required): OneNote sectionGroup id1 identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).section_groups.by_section_group_id(sectionGroup_id1).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_create_sections(
        self,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create section.
        OneNote operation: POST /me/onenote/sectionGroups/{sectionGroup-id}/sections
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_delete_sections(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for me.
        OneNote operation: DELETE /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_get_sections(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from me.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_update_sections(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in me.
        OneNote operation: PATCH /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_create_pages(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for me.
        OneNote operation: POST /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_delete_pages(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for me.
        OneNote operation: DELETE /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_get_pages(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from me.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_update_pages(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in me.
        OneNote operation: PATCH /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_delete_pages_content(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in me.
        OneNote operation: DELETE /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_get_pages_content(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from me.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_update_pages_content(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in me.
        OneNote operation: PUT /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_pages_get_parent_section(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from me.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_section_groups_sections_get_parent_section_group(
        self,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from me.
        OneNote operation: GET /me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: sectionGroups
        Args:
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_onenote_section_copy_to_section_group(
        self,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /me/onenote/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: sectionGroups
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_sections_get_parent_section_group(
        self,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from me.
        OneNote operation: GET /me/onenote/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: sectionGroups
        Args:
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_create_section_groups(
        self,
        user_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sectionGroups for users.
        OneNote operation: POST /users/{user-id}/onenote/sectionGroups
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_delete_section_groups(
        self,
        user_id: str,
        sectionGroup_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sectionGroups for users.
        OneNote operation: DELETE /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_get_section_groups(
        self,
        user_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_update_section_groups(
        self,
        user_id: str,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sectionGroups in users.
        OneNote operation: PATCH /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_get_parent_section_group(
        self,
        user_id: str,
        sectionGroup_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_get_section_groups(
        self,
        user_id: str,
        sectionGroup_id: str,
        sectionGroup_id1: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sectionGroups from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            sectionGroup_id1 (str, required): OneNote sectionGroup id1 identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).section_groups.by_section_group_id(sectionGroup_id1).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_create_sections(
        self,
        user_id: str,
        sectionGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to sections for users.
        OneNote operation: POST /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_delete_sections(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property sections for users.
        OneNote operation: DELETE /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_get_sections(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get sections from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_update_sections(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property sections in users.
        OneNote operation: PATCH /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_create_pages(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for users.
        OneNote operation: POST /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_delete_pages(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for users.
        OneNote operation: DELETE /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_get_pages(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_update_pages(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in users.
        OneNote operation: PATCH /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_delete_pages_content(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in users.
        OneNote operation: DELETE /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_get_pages_content(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_update_pages_content(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in users.
        OneNote operation: PUT /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSection.
        OneNote operation: POST /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/copyToSection
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).copy_to_section.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/onenotePatchContent
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_pages_get_parent_section(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSection from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).parent_section.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_preview(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/preview()
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_section_groups_sections_get_parent_section_group(
        self,
        user_id: str,
        sectionGroup_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from users.
        OneNote operation: GET /users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            sectionGroup_id (str, required): OneNote sectionGroup id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OnenoteRequestBuilder.OnenoteRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OnenoteRequestBuilder.OnenoteRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.section_groups.by_section_group_id(sectionGroup_id).sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_sections_onenote_section_copy_to_section_group(
        self,
        user_id: str,
        onenoteSection_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action copyToSectionGroup.
        OneNote operation: POST /users/{user-id}/onenote/sections/{onenoteSection-id}/copyToSectionGroup
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).copy_to_section_group.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_sections_get_parent_section_group(
        self,
        user_id: str,
        onenoteSection_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get parentSectionGroup from users.
        OneNote operation: GET /users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup
        Operation type: sectionGroups
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteSection_id (str, required): OneNote onenoteSection id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = SectionsRequestBuilder.SectionsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = SectionsRequestBuilder.SectionsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.sections.by_onenote_section_id(onenoteSection_id).parent_section_group.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    # ========== PAGES OPERATIONS (59 methods) ==========

    async def employee_experience_learning_providers_create_learning_contents(
        self,
        learningProvider_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to learningContents for employeeExperience.
        OneNote operation: POST /employeeExperience/learningProviders/{learningProvider-id}/learningContents
        Operation type: pages
        Args:
            learningProvider_id (str, required): OneNote learningProvider id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.learning_providers.by_learningProvider_id(learningProvider_id).learning_contents.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def employee_experience_learning_providers_learning_contents_delete_by_external_id(
        self,
        learningProvider_id: str,
        externalId: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete learningContent.
        OneNote operation: DELETE /employeeExperience/learningProviders/{learningProvider-id}/learningContents(externalId='{externalId}')
        Operation type: pages
        Args:
            learningProvider_id (str, required): OneNote learningProvider id identifier
            externalId (str, required): OneNote externalId identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.learning_providers.by_learningProvider_id(learningProvider_id).learning_contents(external_id='{external_id}').delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def employee_experience_learning_providers_learning_contents_get_by_external_id(
        self,
        learningProvider_id: str,
        externalId: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get learningContent.
        OneNote operation: GET /employeeExperience/learningProviders/{learningProvider-id}/learningContents(externalId='{externalId}')
        Operation type: pages
        Args:
            learningProvider_id (str, required): OneNote learningProvider id identifier
            externalId (str, required): OneNote externalId identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.learning_providers.by_learningProvider_id(learningProvider_id).learning_contents(external_id='{external_id}').get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def employee_experience_learning_providers_learning_contents_update_by_external_id(
        self,
        learningProvider_id: str,
        externalId: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property learningContents in employeeExperience.
        OneNote operation: PATCH /employeeExperience/learningProviders/{learningProvider-id}/learningContents(externalId='{externalId}')
        Operation type: pages
        Args:
            learningProvider_id (str, required): OneNote learningProvider id identifier
            externalId (str, required): OneNote externalId identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.learning_providers.by_learningProvider_id(learningProvider_id).learning_contents(external_id='{external_id}').patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def employee_experience_learning_providers_delete_learning_contents(
        self,
        learningProvider_id: str,
        learningContent_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete learningContent.
        OneNote operation: DELETE /employeeExperience/learningProviders/{learningProvider-id}/learningContents/{learningContent-id}
        Operation type: pages
        Args:
            learningProvider_id (str, required): OneNote learningProvider id identifier
            learningContent_id (str, required): OneNote learningContent id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.learning_providers.by_learningProvider_id(learningProvider_id).learning_contents.by_learningContent_id(learningContent_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def employee_experience_learning_providers_get_learning_contents(
        self,
        learningProvider_id: str,
        learningContent_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get learningContent.
        OneNote operation: GET /employeeExperience/learningProviders/{learningProvider-id}/learningContents/{learningContent-id}
        Operation type: pages
        Args:
            learningProvider_id (str, required): OneNote learningProvider id identifier
            learningContent_id (str, required): OneNote learningContent id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.learning_providers.by_learningProvider_id(learningProvider_id).learning_contents.by_learningContent_id(learningContent_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def employee_experience_learning_providers_update_learning_contents(
        self,
        learningProvider_id: str,
        learningContent_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property learningContents in employeeExperience.
        OneNote operation: PATCH /employeeExperience/learningProviders/{learningProvider-id}/learningContents/{learningContent-id}
        Operation type: pages
        Args:
            learningProvider_id (str, required): OneNote learningProvider id identifier
            learningContent_id (str, required): OneNote learningContent id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.learning_providers.by_learningProvider_id(learningProvider_id).learning_contents.by_learningContent_id(learningContent_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_create_pages(
        self,
        group_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for groups.
        OneNote operation: POST /groups/{group-id}/onenote/pages
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_delete_pages(
        self,
        group_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/pages/{onenotePage-id}
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_get_pages(
        self,
        group_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from groups.
        OneNote operation: GET /groups/{group-id}/onenote/pages/{onenotePage-id}
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_update_pages(
        self,
        group_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/pages/{onenotePage-id}
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_delete_pages_content(
        self,
        group_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/pages/{onenotePage-id}/content
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_get_pages_content(
        self,
        group_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from groups.
        OneNote operation: GET /groups/{group-id}/onenote/pages/{onenotePage-id}/content
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_update_pages_content(
        self,
        group_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in groups.
        OneNote operation: PUT /groups/{group-id}/onenote/pages/{onenotePage-id}/content
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_pages_onenote_page_onenote_patch_content(
        self,
        group_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /groups/{group-id}/onenote/pages/{onenotePage-id}/onenotePatchContent
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_group_onenote_pages_onenote_page_preview(
        self,
        group_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /groups/{group-id}/onenote/pages/{onenotePage-id}/preview()
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_delete_resources_content(
        self,
        group_id: str,
        onenoteResource_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property resources in groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/resources/{onenoteResource-id}/content
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.resources.by_resource_id(onenoteResource_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_get_resources_content(
        self,
        group_id: str,
        onenoteResource_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property resources from groups.
        OneNote operation: GET /groups/{group-id}/onenote/resources/{onenoteResource-id}/content
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = ResourcesRequestBuilder.ResourcesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = ResourcesRequestBuilder.ResourcesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.resources.by_resource_id(onenoteResource_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_update_resources_content(
        self,
        group_id: str,
        onenoteResource_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property resources in groups.
        OneNote operation: PUT /groups/{group-id}/onenote/resources/{onenoteResource-id}/content
        Operation type: pages
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.resources.by_resource_id(onenoteResource_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_create_pages(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create onenotePage.
        OneNote operation: POST /me/onenote/pages
        Operation type: pages
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_delete_pages(
        self,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete page.
        OneNote operation: DELETE /me/onenote/pages/{onenotePage-id}
        Operation type: pages
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_get_pages(
        self,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get page.
        OneNote operation: GET /me/onenote/pages/{onenotePage-id}
        Operation type: pages
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_update_pages(
        self,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in me.
        OneNote operation: PATCH /me/onenote/pages/{onenotePage-id}
        Operation type: pages
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_delete_pages_content(
        self,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in me.
        OneNote operation: DELETE /me/onenote/pages/{onenotePage-id}/content
        Operation type: pages
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_get_pages_content(
        self,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from me.
        OneNote operation: GET /me/onenote/pages/{onenotePage-id}/content
        Operation type: pages
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_update_pages_content(
        self,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update page.
        OneNote operation: PUT /me/onenote/pages/{onenotePage-id}/content
        Operation type: pages
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_pages_onenote_page_onenote_patch_content(
        self,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /me/onenote/pages/{onenotePage-id}/onenotePatchContent
        Operation type: pages
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_pages_onenote_page_preview(
        self,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /me/onenote/pages/{onenotePage-id}/preview()
        Operation type: pages
        Args:
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_delete_resources_content(
        self,
        onenoteResource_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property resources in me.
        OneNote operation: DELETE /me/onenote/resources/{onenoteResource-id}/content
        Operation type: pages
        Args:
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.resources.by_resource_id(onenoteResource_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_get_resources_content(
        self,
        onenoteResource_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get resource.
        OneNote operation: GET /me/onenote/resources/{onenoteResource-id}/content
        Operation type: pages
        Args:
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = ResourcesRequestBuilder.ResourcesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = ResourcesRequestBuilder.ResourcesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.resources.by_resource_id(onenoteResource_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_update_resources_content(
        self,
        onenoteResource_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property resources in me.
        OneNote operation: PUT /me/onenote/resources/{onenoteResource-id}/content
        Operation type: pages
        Args:
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.resources.by_resource_id(onenoteResource_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_online_meetings_delete_recordings_content(
        self,
        onlineMeeting_id: str,
        callRecording_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property recordings in me.
        OneNote operation: DELETE /me/onlineMeetings/{onlineMeeting-id}/recordings/{callRecording-id}/content
        Operation type: pages
        Args:
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callRecording_id (str, required): OneNote callRecording id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.online_meetings.by_onlineMeeting_id(onlineMeeting_id).recordings.by_recording_id(callRecording_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_online_meetings_get_recordings_content(
        self,
        onlineMeeting_id: str,
        callRecording_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property recordings from me.
        OneNote operation: GET /me/onlineMeetings/{onlineMeeting-id}/recordings/{callRecording-id}/content
        Operation type: pages
        Args:
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callRecording_id (str, required): OneNote callRecording id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.online_meetings.by_onlineMeeting_id(onlineMeeting_id).recordings.by_recording_id(callRecording_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_online_meetings_update_recordings_content(
        self,
        onlineMeeting_id: str,
        callRecording_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property recordings in me.
        OneNote operation: PUT /me/onlineMeetings/{onlineMeeting-id}/recordings/{callRecording-id}/content
        Operation type: pages
        Args:
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callRecording_id (str, required): OneNote callRecording id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.online_meetings.by_onlineMeeting_id(onlineMeeting_id).recordings.by_recording_id(callRecording_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_online_meetings_delete_transcripts_content(
        self,
        onlineMeeting_id: str,
        callTranscript_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property transcripts in me.
        OneNote operation: DELETE /me/onlineMeetings/{onlineMeeting-id}/transcripts/{callTranscript-id}/content
        Operation type: pages
        Args:
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callTranscript_id (str, required): OneNote callTranscript id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.online_meetings.by_onlineMeeting_id(onlineMeeting_id).transcripts.by_transcript_id(callTranscript_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_online_meetings_get_transcripts_content(
        self,
        onlineMeeting_id: str,
        callTranscript_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property transcripts from me.
        OneNote operation: GET /me/onlineMeetings/{onlineMeeting-id}/transcripts/{callTranscript-id}/content
        Operation type: pages
        Args:
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callTranscript_id (str, required): OneNote callTranscript id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.online_meetings.by_onlineMeeting_id(onlineMeeting_id).transcripts.by_transcript_id(callTranscript_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_online_meetings_update_transcripts_content(
        self,
        onlineMeeting_id: str,
        callTranscript_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property transcripts in me.
        OneNote operation: PUT /me/onlineMeetings/{onlineMeeting-id}/transcripts/{callTranscript-id}/content
        Operation type: pages
        Args:
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callTranscript_id (str, required): OneNote callTranscript id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.online_meetings.by_onlineMeeting_id(onlineMeeting_id).transcripts.by_transcript_id(callTranscript_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_online_meetings_delete_transcripts_metadata_content(
        self,
        onlineMeeting_id: str,
        callTranscript_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete metadataContent for the navigation property transcripts in me.
        OneNote operation: DELETE /me/onlineMeetings/{onlineMeeting-id}/transcripts/{callTranscript-id}/metadataContent
        Operation type: pages
        Args:
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callTranscript_id (str, required): OneNote callTranscript id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.online_meetings.by_onlineMeeting_id(onlineMeeting_id).transcripts.by_transcript_id(callTranscript_id).metadata_content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_online_meetings_get_transcripts_metadata_content(
        self,
        onlineMeeting_id: str,
        callTranscript_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get metadataContent for the navigation property transcripts from me.
        OneNote operation: GET /me/onlineMeetings/{onlineMeeting-id}/transcripts/{callTranscript-id}/metadataContent
        Operation type: pages
        Args:
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callTranscript_id (str, required): OneNote callTranscript id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.online_meetings.by_onlineMeeting_id(onlineMeeting_id).transcripts.by_transcript_id(callTranscript_id).metadata_content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_online_meetings_update_transcripts_metadata_content(
        self,
        onlineMeeting_id: str,
        callTranscript_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update metadataContent for the navigation property transcripts in me.
        OneNote operation: PUT /me/onlineMeetings/{onlineMeeting-id}/transcripts/{callTranscript-id}/metadataContent
        Operation type: pages
        Args:
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callTranscript_id (str, required): OneNote callTranscript id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.online_meetings.by_onlineMeeting_id(onlineMeeting_id).transcripts.by_transcript_id(callTranscript_id).metadata_content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_create_pages(
        self,
        user_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to pages for users.
        OneNote operation: POST /users/{user-id}/onenote/pages
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_delete_pages(
        self,
        user_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property pages for users.
        OneNote operation: DELETE /users/{user-id}/onenote/pages/{onenotePage-id}
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_get_pages(
        self,
        user_id: str,
        onenotePage_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get pages from users.
        OneNote operation: GET /users/{user-id}/onenote/pages/{onenotePage-id}
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_update_pages(
        self,
        user_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property pages in users.
        OneNote operation: PATCH /users/{user-id}/onenote/pages/{onenotePage-id}
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_delete_pages_content(
        self,
        user_id: str,
        onenotePage_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property pages in users.
        OneNote operation: DELETE /users/{user-id}/onenote/pages/{onenotePage-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_get_pages_content(
        self,
        user_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property pages from users.
        OneNote operation: GET /users/{user-id}/onenote/pages/{onenotePage-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_update_pages_content(
        self,
        user_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property pages in users.
        OneNote operation: PUT /users/{user-id}/onenote/pages/{onenotePage-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_pages_onenote_page_onenote_patch_content(
        self,
        user_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action onenotePatchContent.
        OneNote operation: POST /users/{user-id}/onenote/pages/{onenotePage-id}/onenotePatchContent
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).onenote_patch_content.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_user_onenote_pages_onenote_page_preview(
        self,
        user_id: str,
        onenotePage_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke function preview.
        OneNote operation: GET /users/{user-id}/onenote/pages/{onenotePage-id}/preview()
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenotePage_id (str, required): OneNote onenotePage id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = PagesRequestBuilder.PagesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = PagesRequestBuilder.PagesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.pages.by_onenote_page_id(onenotePage_id).preview().get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_delete_resources_content(
        self,
        user_id: str,
        onenoteResource_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property resources in users.
        OneNote operation: DELETE /users/{user-id}/onenote/resources/{onenoteResource-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.resources.by_resource_id(onenoteResource_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_get_resources_content(
        self,
        user_id: str,
        onenoteResource_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property resources from users.
        OneNote operation: GET /users/{user-id}/onenote/resources/{onenoteResource-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = ResourcesRequestBuilder.ResourcesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = ResourcesRequestBuilder.ResourcesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.resources.by_resource_id(onenoteResource_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_update_resources_content(
        self,
        user_id: str,
        onenoteResource_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property resources in users.
        OneNote operation: PUT /users/{user-id}/onenote/resources/{onenoteResource-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.resources.by_resource_id(onenoteResource_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_online_meetings_delete_recordings_content(
        self,
        user_id: str,
        onlineMeeting_id: str,
        callRecording_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property recordings in users.
        OneNote operation: DELETE /users/{user-id}/onlineMeetings/{onlineMeeting-id}/recordings/{callRecording-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callRecording_id (str, required): OneNote callRecording id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).online_meetings.by_onlineMeeting_id(onlineMeeting_id).recordings.by_recording_id(callRecording_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_online_meetings_get_recordings_content(
        self,
        user_id: str,
        onlineMeeting_id: str,
        callRecording_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get content for the navigation property recordings from users.
        OneNote operation: GET /users/{user-id}/onlineMeetings/{onlineMeeting-id}/recordings/{callRecording-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callRecording_id (str, required): OneNote callRecording id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).online_meetings.by_onlineMeeting_id(onlineMeeting_id).recordings.by_recording_id(callRecording_id).content.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_online_meetings_update_recordings_content(
        self,
        user_id: str,
        onlineMeeting_id: str,
        callRecording_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property recordings in users.
        OneNote operation: PUT /users/{user-id}/onlineMeetings/{onlineMeeting-id}/recordings/{callRecording-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callRecording_id (str, required): OneNote callRecording id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).online_meetings.by_onlineMeeting_id(onlineMeeting_id).recordings.by_recording_id(callRecording_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_online_meetings_delete_transcripts_content(
        self,
        user_id: str,
        onlineMeeting_id: str,
        callTranscript_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete content for the navigation property transcripts in users.
        OneNote operation: DELETE /users/{user-id}/onlineMeetings/{onlineMeeting-id}/transcripts/{callTranscript-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callTranscript_id (str, required): OneNote callTranscript id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).online_meetings.by_onlineMeeting_id(onlineMeeting_id).transcripts.by_transcript_id(callTranscript_id).content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_online_meetings_update_transcripts_content(
        self,
        user_id: str,
        onlineMeeting_id: str,
        callTranscript_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update content for the navigation property transcripts in users.
        OneNote operation: PUT /users/{user-id}/onlineMeetings/{onlineMeeting-id}/transcripts/{callTranscript-id}/content
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callTranscript_id (str, required): OneNote callTranscript id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).online_meetings.by_onlineMeeting_id(onlineMeeting_id).transcripts.by_transcript_id(callTranscript_id).content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_online_meetings_delete_transcripts_metadata_content(
        self,
        user_id: str,
        onlineMeeting_id: str,
        callTranscript_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete metadataContent for the navigation property transcripts in users.
        OneNote operation: DELETE /users/{user-id}/onlineMeetings/{onlineMeeting-id}/transcripts/{callTranscript-id}/metadataContent
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callTranscript_id (str, required): OneNote callTranscript id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).online_meetings.by_onlineMeeting_id(onlineMeeting_id).transcripts.by_transcript_id(callTranscript_id).metadata_content.delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_online_meetings_update_transcripts_metadata_content(
        self,
        user_id: str,
        onlineMeeting_id: str,
        callTranscript_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update metadataContent for the navigation property transcripts in users.
        OneNote operation: PUT /users/{user-id}/onlineMeetings/{onlineMeeting-id}/transcripts/{callTranscript-id}/metadataContent
        Operation type: pages
        Args:
            user_id (str, required): OneNote user id identifier
            onlineMeeting_id (str, required): OneNote onlineMeeting id identifier
            callTranscript_id (str, required): OneNote callTranscript id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).online_meetings.by_onlineMeeting_id(onlineMeeting_id).transcripts.by_transcript_id(callTranscript_id).metadata_content.put(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    # ========== RESOURCES OPERATIONS (33 methods) ==========

    async def groups_onenote_create_resources(
        self,
        group_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to resources for groups.
        OneNote operation: POST /groups/{group-id}/onenote/resources
        Operation type: resources
        Args:
            group_id (str, required): OneNote group id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.resources.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_delete_resources(
        self,
        group_id: str,
        onenoteResource_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property resources for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/resources/{onenoteResource-id}
        Operation type: resources
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.resources.by_resource_id(onenoteResource_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_get_resources(
        self,
        group_id: str,
        onenoteResource_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get resources from groups.
        OneNote operation: GET /groups/{group-id}/onenote/resources/{onenoteResource-id}
        Operation type: resources
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = ResourcesRequestBuilder.ResourcesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = ResourcesRequestBuilder.ResourcesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.resources.by_resource_id(onenoteResource_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_update_resources(
        self,
        group_id: str,
        onenoteResource_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property resources in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/resources/{onenoteResource-id}
        Operation type: resources
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.resources.by_resource_id(onenoteResource_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_delete_permission_grants(
        self,
        group_id: str,
        resourceSpecificPermissionGrant_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property permissionGrants for groups.
        OneNote operation: DELETE /groups/{group-id}/permissionGrants/{resourceSpecificPermissionGrant-id}
        Operation type: resources
        Args:
            group_id (str, required): OneNote group id identifier
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_get_permission_grants(
        self,
        group_id: str,
        resourceSpecificPermissionGrant_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get permissionGrants from groups.
        OneNote operation: GET /groups/{group-id}/permissionGrants/{resourceSpecificPermissionGrant-id}
        Operation type: resources
        Args:
            group_id (str, required): OneNote group id identifier
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_update_permission_grants(
        self,
        group_id: str,
        resourceSpecificPermissionGrant_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property permissionGrants in groups.
        OneNote operation: PATCH /groups/{group-id}/permissionGrants/{resourceSpecificPermissionGrant-id}
        Operation type: resources
        Args:
            group_id (str, required): OneNote group id identifier
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_insights_trending_get_resource(
        self,
        trending_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get resource from me.
        OneNote operation: GET /me/insights/trending/{trending-id}/resource
        Operation type: resources
        Args:
            trending_id (str, required): OneNote trending id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.insights.trending.by_trending_id(trending_id).resource.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_create_resources(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to resources for me.
        OneNote operation: POST /me/onenote/resources
        Operation type: resources
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.resources.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_delete_resources(
        self,
        onenoteResource_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property resources for me.
        OneNote operation: DELETE /me/onenote/resources/{onenoteResource-id}
        Operation type: resources
        Args:
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.resources.by_resource_id(onenoteResource_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_get_resources(
        self,
        onenoteResource_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get resources from me.
        OneNote operation: GET /me/onenote/resources/{onenoteResource-id}
        Operation type: resources
        Args:
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = ResourcesRequestBuilder.ResourcesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = ResourcesRequestBuilder.ResourcesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.resources.by_resource_id(onenoteResource_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_update_resources(
        self,
        onenoteResource_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property resources in me.
        OneNote operation: PATCH /me/onenote/resources/{onenoteResource-id}
        Operation type: resources
        Args:
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.resources.by_resource_id(onenoteResource_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_delete_permission_grants(
        self,
        resourceSpecificPermissionGrant_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property permissionGrants for me.
        OneNote operation: DELETE /me/permissionGrants/{resourceSpecificPermissionGrant-id}
        Operation type: resources
        Args:
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_update_permission_grants(
        self,
        resourceSpecificPermissionGrant_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property permissionGrants in me.
        OneNote operation: PATCH /me/permissionGrants/{resourceSpecificPermissionGrant-id}
        Operation type: resources
        Args:
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def permission_grants_resource_specific_permission_grant_delete_resource_specific_permission_grant(
        self,
        resourceSpecificPermissionGrant_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete entity from permissionGrants.
        OneNote operation: DELETE /permissionGrants/{resourceSpecificPermissionGrant-id}
        Operation type: resources
        Args:
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def permission_grants_resource_specific_permission_grant_get_resource_specific_permission_grant(
        self,
        resourceSpecificPermissionGrant_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get entity from permissionGrants by key.
        OneNote operation: GET /permissionGrants/{resourceSpecificPermissionGrant-id}
        Operation type: resources
        Args:
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def permission_grants_resource_specific_permission_grant_update_resource_specific_permission_grant(
        self,
        resourceSpecificPermissionGrant_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update entity in permissionGrants.
        OneNote operation: PATCH /permissionGrants/{resourceSpecificPermissionGrant-id}
        Operation type: resources
        Args:
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def permission_grants_resource_specific_permission_grant_check_member_objects(
        self,
        resourceSpecificPermissionGrant_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Invoke action checkMemberObjects.
        OneNote operation: POST /permissionGrants/{resourceSpecificPermissionGrant-id}/checkMemberObjects
        Operation type: resources
        Args:
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).check_member_objects.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def role_management_entitlement_management_create_resource_namespaces(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to resourceNamespaces for roleManagement.
        OneNote operation: POST /roleManagement/entitlementManagement/resourceNamespaces
        Operation type: resources
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.role_management.entitlement_management.resource_namespaces.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def role_management_entitlement_management_delete_resource_namespaces(
        self,
        unifiedRbacResourceNamespace_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property resourceNamespaces for roleManagement.
        OneNote operation: DELETE /roleManagement/entitlementManagement/resourceNamespaces/{unifiedRbacResourceNamespace-id}
        Operation type: resources
        Args:
            unifiedRbacResourceNamespace_id (str, required): OneNote unifiedRbacResourceNamespace id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.role_management.entitlement_management.resource_namespaces.by_resourceNamespace_id(unifiedRbacResourceNamespace_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def role_management_entitlement_management_get_resource_namespaces(
        self,
        unifiedRbacResourceNamespace_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get resourceNamespaces from roleManagement.
        OneNote operation: GET /roleManagement/entitlementManagement/resourceNamespaces/{unifiedRbacResourceNamespace-id}
        Operation type: resources
        Args:
            unifiedRbacResourceNamespace_id (str, required): OneNote unifiedRbacResourceNamespace id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.role_management.entitlement_management.resource_namespaces.by_resourceNamespace_id(unifiedRbacResourceNamespace_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def role_management_entitlement_management_update_resource_namespaces(
        self,
        unifiedRbacResourceNamespace_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property resourceNamespaces in roleManagement.
        OneNote operation: PATCH /roleManagement/entitlementManagement/resourceNamespaces/{unifiedRbacResourceNamespace-id}
        Operation type: resources
        Args:
            unifiedRbacResourceNamespace_id (str, required): OneNote unifiedRbacResourceNamespace id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.role_management.entitlement_management.resource_namespaces.by_resourceNamespace_id(unifiedRbacResourceNamespace_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def role_management_entitlement_management_resource_namespaces_create_resource_actions(
        self,
        unifiedRbacResourceNamespace_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to resourceActions for roleManagement.
        OneNote operation: POST /roleManagement/entitlementManagement/resourceNamespaces/{unifiedRbacResourceNamespace-id}/resourceActions
        Operation type: resources
        Args:
            unifiedRbacResourceNamespace_id (str, required): OneNote unifiedRbacResourceNamespace id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.role_management.entitlement_management.resource_namespaces.by_resourceNamespace_id(unifiedRbacResourceNamespace_id).resource_actions.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def role_management_entitlement_management_resource_namespaces_delete_resource_actions(
        self,
        unifiedRbacResourceNamespace_id: str,
        unifiedRbacResourceAction_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property resourceActions for roleManagement.
        OneNote operation: DELETE /roleManagement/entitlementManagement/resourceNamespaces/{unifiedRbacResourceNamespace-id}/resourceActions/{unifiedRbacResourceAction-id}
        Operation type: resources
        Args:
            unifiedRbacResourceNamespace_id (str, required): OneNote unifiedRbacResourceNamespace id identifier
            unifiedRbacResourceAction_id (str, required): OneNote unifiedRbacResourceAction id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.role_management.entitlement_management.resource_namespaces.by_resourceNamespace_id(unifiedRbacResourceNamespace_id).resource_actions.by_resourceAction_id(unifiedRbacResourceAction_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def role_management_entitlement_management_resource_namespaces_get_resource_actions(
        self,
        unifiedRbacResourceNamespace_id: str,
        unifiedRbacResourceAction_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get resourceActions from roleManagement.
        OneNote operation: GET /roleManagement/entitlementManagement/resourceNamespaces/{unifiedRbacResourceNamespace-id}/resourceActions/{unifiedRbacResourceAction-id}
        Operation type: resources
        Args:
            unifiedRbacResourceNamespace_id (str, required): OneNote unifiedRbacResourceNamespace id identifier
            unifiedRbacResourceAction_id (str, required): OneNote unifiedRbacResourceAction id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.role_management.entitlement_management.resource_namespaces.by_resourceNamespace_id(unifiedRbacResourceNamespace_id).resource_actions.by_resourceAction_id(unifiedRbacResourceAction_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def role_management_entitlement_management_resource_namespaces_update_resource_actions(
        self,
        unifiedRbacResourceNamespace_id: str,
        unifiedRbacResourceAction_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property resourceActions in roleManagement.
        OneNote operation: PATCH /roleManagement/entitlementManagement/resourceNamespaces/{unifiedRbacResourceNamespace-id}/resourceActions/{unifiedRbacResourceAction-id}
        Operation type: resources
        Args:
            unifiedRbacResourceNamespace_id (str, required): OneNote unifiedRbacResourceNamespace id identifier
            unifiedRbacResourceAction_id (str, required): OneNote unifiedRbacResourceAction id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.role_management.entitlement_management.resource_namespaces.by_resourceNamespace_id(unifiedRbacResourceNamespace_id).resource_actions.by_resourceAction_id(unifiedRbacResourceAction_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_insights_trending_get_resource(
        self,
        user_id: str,
        trending_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get resource from users.
        OneNote operation: GET /users/{user-id}/insights/trending/{trending-id}/resource
        Operation type: resources
        Args:
            user_id (str, required): OneNote user id identifier
            trending_id (str, required): OneNote trending id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).insights.trending.by_trending_id(trending_id).resource.get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_create_resources(
        self,
        user_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to resources for users.
        OneNote operation: POST /users/{user-id}/onenote/resources
        Operation type: resources
        Args:
            user_id (str, required): OneNote user id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.resources.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_delete_resources(
        self,
        user_id: str,
        onenoteResource_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property resources for users.
        OneNote operation: DELETE /users/{user-id}/onenote/resources/{onenoteResource-id}
        Operation type: resources
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.resources.by_resource_id(onenoteResource_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_get_resources(
        self,
        user_id: str,
        onenoteResource_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get resources from users.
        OneNote operation: GET /users/{user-id}/onenote/resources/{onenoteResource-id}
        Operation type: resources
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = ResourcesRequestBuilder.ResourcesRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = ResourcesRequestBuilder.ResourcesRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.resources.by_resource_id(onenoteResource_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_update_resources(
        self,
        user_id: str,
        onenoteResource_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property resources in users.
        OneNote operation: PATCH /users/{user-id}/onenote/resources/{onenoteResource-id}
        Operation type: resources
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteResource_id (str, required): OneNote onenoteResource id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.resources.by_resource_id(onenoteResource_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_delete_permission_grants(
        self,
        user_id: str,
        resourceSpecificPermissionGrant_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property permissionGrants for users.
        OneNote operation: DELETE /users/{user-id}/permissionGrants/{resourceSpecificPermissionGrant-id}
        Operation type: resources
        Args:
            user_id (str, required): OneNote user id identifier
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_update_permission_grants(
        self,
        user_id: str,
        resourceSpecificPermissionGrant_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property permissionGrants in users.
        OneNote operation: PATCH /users/{user-id}/permissionGrants/{resourceSpecificPermissionGrant-id}
        Operation type: resources
        Args:
            user_id (str, required): OneNote user id identifier
            resourceSpecificPermissionGrant_id (str, required): OneNote resourceSpecificPermissionGrant id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).permission_grants.by_permissionGrant_id(resourceSpecificPermissionGrant_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    # ========== OPERATIONS OPERATIONS (36 methods) ==========

    async def data_policy_operations_data_policy_operation_create_data_policy_operation(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Add new entity to dataPolicyOperations.
        OneNote operation: POST /dataPolicyOperations
        Operation type: operations
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.data_policy_operations.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def data_policy_operations_data_policy_operation_delete_data_policy_operation(
        self,
        dataPolicyOperation_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete entity from dataPolicyOperations.
        OneNote operation: DELETE /dataPolicyOperations/{dataPolicyOperation-id}
        Operation type: operations
        Args:
            dataPolicyOperation_id (str, required): OneNote dataPolicyOperation id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.data_policy_operations.by_dataPolicyOperation_id(dataPolicyOperation_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def data_policy_operations_data_policy_operation_get_data_policy_operation(
        self,
        dataPolicyOperation_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get dataPolicyOperation.
        OneNote operation: GET /dataPolicyOperations/{dataPolicyOperation-id}
        Operation type: operations
        Args:
            dataPolicyOperation_id (str, required): OneNote dataPolicyOperation id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.data_policy_operations.by_dataPolicyOperation_id(dataPolicyOperation_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def data_policy_operations_data_policy_operation_update_data_policy_operation(
        self,
        dataPolicyOperation_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update entity in dataPolicyOperations.
        OneNote operation: PATCH /dataPolicyOperations/{dataPolicyOperation-id}
        Operation type: operations
        Args:
            dataPolicyOperation_id (str, required): OneNote dataPolicyOperation id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.data_policy_operations.by_dataPolicyOperation_id(dataPolicyOperation_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def employee_experience_create_engagement_async_operations(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to engagementAsyncOperations for employeeExperience.
        OneNote operation: POST /employeeExperience/engagementAsyncOperations
        Operation type: operations
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.engagement_async_operations.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def employee_experience_delete_engagement_async_operations(
        self,
        engagementAsyncOperation_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property engagementAsyncOperations for employeeExperience.
        OneNote operation: DELETE /employeeExperience/engagementAsyncOperations/{engagementAsyncOperation-id}
        Operation type: operations
        Args:
            engagementAsyncOperation_id (str, required): OneNote engagementAsyncOperation id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.engagement_async_operations.by_engagementAsyncOperation_id(engagementAsyncOperation_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def employee_experience_get_engagement_async_operations(
        self,
        engagementAsyncOperation_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get engagementAsyncOperation.
        OneNote operation: GET /employeeExperience/engagementAsyncOperations/{engagementAsyncOperation-id}
        Operation type: operations
        Args:
            engagementAsyncOperation_id (str, required): OneNote engagementAsyncOperation id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.engagement_async_operations.by_engagementAsyncOperation_id(engagementAsyncOperation_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def employee_experience_update_engagement_async_operations(
        self,
        engagementAsyncOperation_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property engagementAsyncOperations in employeeExperience.
        OneNote operation: PATCH /employeeExperience/engagementAsyncOperations/{engagementAsyncOperation-id}
        Operation type: operations
        Args:
            engagementAsyncOperation_id (str, required): OneNote engagementAsyncOperation id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.employee_experience.engagement_async_operations.by_engagementAsyncOperation_id(engagementAsyncOperation_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_create_operations(
        self,
        group_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to operations for groups.
        OneNote operation: POST /groups/{group-id}/onenote/operations
        Operation type: operations
        Args:
            group_id (str, required): OneNote group id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.operations.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_delete_operations(
        self,
        group_id: str,
        onenoteOperation_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property operations for groups.
        OneNote operation: DELETE /groups/{group-id}/onenote/operations/{onenoteOperation-id}
        Operation type: operations
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteOperation_id (str, required): OneNote onenoteOperation id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.operations.by_onenote_operation_id(onenoteOperation_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_get_operations(
        self,
        group_id: str,
        onenoteOperation_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get operations from groups.
        OneNote operation: GET /groups/{group-id}/onenote/operations/{onenoteOperation-id}
        Operation type: operations
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteOperation_id (str, required): OneNote onenoteOperation id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OperationsRequestBuilder.OperationsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OperationsRequestBuilder.OperationsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.operations.by_onenote_operation_id(onenoteOperation_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def groups_onenote_update_operations(
        self,
        group_id: str,
        onenoteOperation_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property operations in groups.
        OneNote operation: PATCH /groups/{group-id}/onenote/operations/{onenoteOperation-id}
        Operation type: operations
        Args:
            group_id (str, required): OneNote group id identifier
            onenoteOperation_id (str, required): OneNote onenoteOperation id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.groups.by_group_id(group_id).onenote.operations.by_onenote_operation_id(onenoteOperation_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_authentication_create_operations(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to operations for me.
        OneNote operation: POST /me/authentication/operations
        Operation type: operations
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.authentication.operations.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_authentication_delete_operations(
        self,
        longRunningOperation_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property operations for me.
        OneNote operation: DELETE /me/authentication/operations/{longRunningOperation-id}
        Operation type: operations
        Args:
            longRunningOperation_id (str, required): OneNote longRunningOperation id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.authentication.operations.by_onenote_operation_id(longRunningOperation_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_authentication_get_operations(
        self,
        longRunningOperation_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get operations from me.
        OneNote operation: GET /me/authentication/operations/{longRunningOperation-id}
        Operation type: operations
        Args:
            longRunningOperation_id (str, required): OneNote longRunningOperation id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.authentication.operations.by_onenote_operation_id(longRunningOperation_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_authentication_update_operations(
        self,
        longRunningOperation_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property operations in me.
        OneNote operation: PATCH /me/authentication/operations/{longRunningOperation-id}
        Operation type: operations
        Args:
            longRunningOperation_id (str, required): OneNote longRunningOperation id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.authentication.operations.by_onenote_operation_id(longRunningOperation_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_create_operations(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to operations for me.
        OneNote operation: POST /me/onenote/operations
        Operation type: operations
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.operations.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_delete_operations(
        self,
        onenoteOperation_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property operations for me.
        OneNote operation: DELETE /me/onenote/operations/{onenoteOperation-id}
        Operation type: operations
        Args:
            onenoteOperation_id (str, required): OneNote onenoteOperation id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.operations.by_onenote_operation_id(onenoteOperation_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_get_operations(
        self,
        onenoteOperation_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get onenoteOperation.
        OneNote operation: GET /me/onenote/operations/{onenoteOperation-id}
        Operation type: operations
        Args:
            onenoteOperation_id (str, required): OneNote onenoteOperation id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OperationsRequestBuilder.OperationsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OperationsRequestBuilder.OperationsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.operations.by_onenote_operation_id(onenoteOperation_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def me_onenote_update_operations(
        self,
        onenoteOperation_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property operations in me.
        OneNote operation: PATCH /me/onenote/operations/{onenoteOperation-id}
        Operation type: operations
        Args:
            onenoteOperation_id (str, required): OneNote onenoteOperation id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.me.onenote.operations.by_onenote_operation_id(onenoteOperation_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def print_create_operations(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to operations for print.
        OneNote operation: POST /print/operations
        Operation type: operations
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.print.operations.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def print_delete_operations(
        self,
        printOperation_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property operations for print.
        OneNote operation: DELETE /print/operations/{printOperation-id}
        Operation type: operations
        Args:
            printOperation_id (str, required): OneNote printOperation id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.print.operations.by_onenote_operation_id(printOperation_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def print_get_operations(
        self,
        printOperation_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get printOperation.
        OneNote operation: GET /print/operations/{printOperation-id}
        Operation type: operations
        Args:
            printOperation_id (str, required): OneNote printOperation id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.print.operations.by_onenote_operation_id(printOperation_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def print_update_operations(
        self,
        printOperation_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property operations in print.
        OneNote operation: PATCH /print/operations/{printOperation-id}
        Operation type: operations
        Args:
            printOperation_id (str, required): OneNote printOperation id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.print.operations.by_onenote_operation_id(printOperation_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def reports_partners_billing_create_operations(
        self,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to operations for reports.
        OneNote operation: POST /reports/partners/billing/operations
        Operation type: operations
        Args:
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.reports.partners.billing.operations.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def reports_partners_billing_delete_operations(
        self,
        operation_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property operations for reports.
        OneNote operation: DELETE /reports/partners/billing/operations/{operation-id}
        Operation type: operations
        Args:
            operation_id (str, required): OneNote operation id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.reports.partners.billing.operations.by_onenote_operation_id(operation_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def reports_partners_billing_get_operations(
        self,
        operation_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get operation.
        OneNote operation: GET /reports/partners/billing/operations/{operation-id}
        Operation type: operations
        Args:
            operation_id (str, required): OneNote operation id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.reports.partners.billing.operations.by_onenote_operation_id(operation_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def reports_partners_billing_update_operations(
        self,
        operation_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property operations in reports.
        OneNote operation: PATCH /reports/partners/billing/operations/{operation-id}
        Operation type: operations
        Args:
            operation_id (str, required): OneNote operation id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.reports.partners.billing.operations.by_onenote_operation_id(operation_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_authentication_create_operations(
        self,
        user_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to operations for users.
        OneNote operation: POST /users/{user-id}/authentication/operations
        Operation type: operations
        Args:
            user_id (str, required): OneNote user id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).authentication.operations.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_authentication_delete_operations(
        self,
        user_id: str,
        longRunningOperation_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property operations for users.
        OneNote operation: DELETE /users/{user-id}/authentication/operations/{longRunningOperation-id}
        Operation type: operations
        Args:
            user_id (str, required): OneNote user id identifier
            longRunningOperation_id (str, required): OneNote longRunningOperation id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).authentication.operations.by_onenote_operation_id(longRunningOperation_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_authentication_get_operations(
        self,
        user_id: str,
        longRunningOperation_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get longRunningOperation.
        OneNote operation: GET /users/{user-id}/authentication/operations/{longRunningOperation-id}
        Operation type: operations
        Args:
            user_id (str, required): OneNote user id identifier
            longRunningOperation_id (str, required): OneNote longRunningOperation id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).authentication.operations.by_onenote_operation_id(longRunningOperation_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_authentication_update_operations(
        self,
        user_id: str,
        longRunningOperation_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property operations in users.
        OneNote operation: PATCH /users/{user-id}/authentication/operations/{longRunningOperation-id}
        Operation type: operations
        Args:
            user_id (str, required): OneNote user id identifier
            longRunningOperation_id (str, required): OneNote longRunningOperation id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).authentication.operations.by_onenote_operation_id(longRunningOperation_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_create_operations(
        self,
        user_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Create new navigation property to operations for users.
        OneNote operation: POST /users/{user-id}/onenote/operations
        Operation type: operations
        Args:
            user_id (str, required): OneNote user id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.operations.post(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_delete_operations(
        self,
        user_id: str,
        onenoteOperation_id: str,
        If_Match: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Delete navigation property operations for users.
        OneNote operation: DELETE /users/{user-id}/onenote/operations/{onenoteOperation-id}
        Operation type: operations
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteOperation_id (str, required): OneNote onenoteOperation id identifier
            If_Match (str, optional): ETag
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.operations.by_onenote_operation_id(onenoteOperation_id).delete(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_get_operations(
        self,
        user_id: str,
        onenoteOperation_id: str,
        dollar_select: Optional[List[str]] = None,
        dollar_expand: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Get operations from users.
        OneNote operation: GET /users/{user-id}/onenote/operations/{onenoteOperation-id}
        Operation type: operations
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteOperation_id (str, required): OneNote onenoteOperation id identifier
            dollar_select (List[str], optional): Select properties to be returned
            dollar_expand (List[str], optional): Expand related entities
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = OperationsRequestBuilder.OperationsRequestBuilderGetQueryParameters()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = OperationsRequestBuilder.OperationsRequestBuilderGetRequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.operations.by_onenote_operation_id(onenoteOperation_id).get(request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )

    async def users_onenote_update_operations(
        self,
        user_id: str,
        onenoteOperation_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        request_body: Optional[Mapping[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> OneNoteResponse:
        """Update the navigation property operations in users.
        OneNote operation: PATCH /users/{user-id}/onenote/operations/{onenoteOperation-id}
        Operation type: operations
        Args:
            user_id (str, required): OneNote user id identifier
            onenoteOperation_id (str, required): OneNote onenoteOperation id identifier
            select (optional): Select specific properties to return
            expand (optional): Expand related entities (e.g., sections, pages, parentNotebook)
            filter (optional): Filter the results using OData syntax
            orderby (optional): Order the results by specified properties
            search (optional): Search for notebooks, sections, or pages by content
            top (optional): Limit number of results returned
            skip (optional): Skip number of results for pagination
            request_body (optional): Request body data for OneNote operations
            headers (optional): Additional headers for the request
            **kwargs: Additional query parameters
        Returns:
            OneNoteResponse: OneNote response wrapper with success/data/error
        """
        # Build query parameters including OData for OneNote
        try:
            # Use typed query parameters
            query_params = RequestConfiguration()
            # Set query parameters using typed object properties
            if select:
                query_params.select = select if isinstance(select, list) else [select]
            if expand:
                query_params.expand = expand if isinstance(expand, list) else [expand]
            if filter:
                query_params.filter = filter
            if orderby:
                query_params.orderby = orderby
            if search:
                query_params.search = search
            if top is not None:
                query_params.top = top
            if skip is not None:
                query_params.skip = skip

            # Create proper typed request configuration
            config = RequestConfiguration()
            config.query_parameters = query_params

            if headers:
                config.headers = headers

            # Add consistency level for search operations in OneNote
            if search:
                if not config.headers:
                    config.headers = {}
                config.headers['ConsistencyLevel'] = 'eventual'

            response = await self.client.users.by_user_id(user_id).onenote.operations.by_onenote_operation_id(onenoteOperation_id).patch(body=request_body, request_configuration=config)
            return self._handle_onenote_response(response)
        except Exception as e:
            return OneNoteResponse(
                success=False,
                error=f"OneNote API call failed: {str(e)}",
            )


